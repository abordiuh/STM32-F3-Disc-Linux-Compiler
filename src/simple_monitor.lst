
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
0800c188 l    d  .rodata	00000000 .rodata
0801bb40 l    d  .ARM	00000000 .ARM
0801bb48 l    d  .init_array	00000000 .init_array
0801bb50 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000ac0 l    d  .bss	00000000 .bss
20001d1c l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
0801c614 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800c118 l       .text	00000000 LoopCopyDataInit
0800c110 l       .text	00000000 CopyDataInit
0800c12c l       .text	00000000 LoopFillZerobss
0800c126 l       .text	00000000 FillZerobss
0800c13e l       .text	00000000 LoopForever
0800c158 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800c170 l     O .text	00000000 __EH_FRAME_BEGIN__
080001c0 l     F .text	00000000 deregister_tm_clones
080001e0 l     F .text	00000000 register_tm_clones
08000204 l     F .text	00000000 __do_global_dtors_aux
20000ac0 l       .bss	00000000 completed.6523
0801bb50 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
0800022c l     F .text	00000000 frame_dummy
20000ac4 l       .bss	00000000 object.6528
0801bb4c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfprintf.c
080020e8 l     F .text	0000006a __sbprintf
0800c724 l     O .rodata	00000010 blanks.7072
0800c734 l     O .rodata	00000010 zeroes.7073
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
080022c0 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080033b4 l     F .text	00000004 __fp_unlock
080033c4 l     F .text	000000f0 __sinit.part.1
080034b4 l     F .text	00000004 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
20000438 l     O .data	00000020 lc_ctype_charset
2000045c l     O .data	00000020 lc_message_charset
2000047c l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0800c748 l     O .rodata	0000000c p05.5398
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 vfprintf.c
0800567c l     F .text	00000078 __sprint_r.part.0
0800651c l     F .text	0000006a __sbprintf
0800c870 l     O .rodata	00000010 blanks.7015
0800c880 l     O .rodata	00000010 zeroes.7016
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 gpiocmd.c
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
200008c8 l     O .data	00000004 printPrompt.5907
0800cbd0 l     O .rodata	00000006 __FUNCTION__.5921
20000b10 l     O .bss	00000004 count.5904
20000b14 l     O .bss	00000004 saved.5905
200008d0 l     O .data	00000004 buf.5906
00000000 l    df *ABS*	00000000 dump.c
200008d4 l     O .data	00000004 count.5346
20000b18 l     O .bss	00000004 address.5345
00000000 l    df *ABS*	00000000 syscall.c
20000b1c l     O .bss	00000004 heap_end.5951
00000000 l    df *ABS*	00000000 terminal.c
08007dc8 l     F .text	00000080 USBD_CDC_DataIn
20000b20 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
08008114 l     F .text	00000078 Uncompress
20000c44 l     O .bss	00000014 buf.5893
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000c58 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
0800a188 l     F .text	00000024 I2C_TransferConfig
0800a1ac l     F .text	00000090 I2C_IsAcknowledgeFailed
0800a23c l     F .text	00000068 I2C_WaitOnFlagUntilTimeout
0800a2a4 l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
0800a2f4 l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
0800a348 l     F .text	00000062 I2C_RequestMemoryWrite
0800a3aa l     F .text	00000060 I2C_RequestMemoryRead
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
0800a72e l     F .text	00000050 SPI_WaitFifoStateUntilTimeout.part.1
0800a72e l     F .text	00000050 SPI_WaitFlagStateUntilTimeout.part.0
0800a77e l     F .text	00000040 SPI_WaitFlagStateUntilTimeout
0800a7be l     F .text	00000050 SPI_WaitFifoStateUntilTimeout
0800a80e l     F .text	00000042 SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
20000c5c l     O .bss	00000001 cfgidx.10222
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
0800b1ae l     F .text	00000012 USBD_CDC_DataIn
0800b1c0 l     F .text	00000028 USBD_CDC_EP0_RxReady
0800b1e8 l     F .text	0000000c USBD_CDC_GetFSCfgDesc
0800b1f4 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
0800b200 l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
0800b218 l     F .text	0000002e USBD_CDC_DataOut
0800b246 l     F .text	0000005a USBD_CDC_Setup
0800b2a0 l     F .text	0000003a USBD_CDC_DeInit
0800b2da l     F .text	0000008c USBD_CDC_Init
20000958 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20000c60 l     O .bss	00000230 mem.10440
00000000 l    df *ABS*	00000000 usbd_desc.c
0800b61c l     F .text	00000028 IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
0800b6f8 l     F .text	00000004 CDC_Itf_DeInit
0800b6fc l     F .text	0000001c CDC_Itf_Receive
0800b718 l     F .text	00000018 CDC_Itf_Init
0800b730 l     F .text	00000044 CDC_Itf_Control
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
0800b774 l     F .text	00000080 SPIx_Init
0800b7f4 l     F .text	00000040 SPIx_WriteRead
0800b834 l     F .text	0000006c I2Cx_Init
20000e90 l     O .bss	00000060 SpiHandle
20000ef0 l     O .bss	00000038 I2cHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20000f28 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20000f2c l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0800c15c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000010 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
0801bb54 l       .fini_array	00000000 __fini_array_end
20000ac0 l       .bss	00000000 __bss_start__
20001d1c l       .bss	00000000 __bss_end__
0801bb50 l       .fini_array	00000000 __fini_array_start
0801bb50 l       .init_array	00000000 __init_array_end
0801bb48 l       .init_array	00000000 __preinit_array_end
0801bb48 l       .init_array	00000000 __init_array_start
0801bb48 l       .init_array	00000000 __preinit_array_start
0800c158  w    F .text	00000002 RTC_Alarm_IRQHandler
080177c0 g     O .rodata	00000008 RTC_BKP19R_fields
0801ba34 g     O .rodata	00000010 APBAHBPrescTable
0800df00 g     O .rodata	00000050 TIM2_SR_fields
08014d60 g     O .rodata	00000100 CAN_F10R1_fields
08018570 g     O .rodata	00000008 TIM16_DMAR_fields
08000418 g     F .text	00000014 putchar
0800c158  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08004db4 g     F .text	00000038 _mprec_log10
08017410 g     O .rodata	00000008 I2C1_RXDR_fields
080071d4 g     F .text	0000002c .hidden __aeabi_dcmpun
0800bcf8 g     F .text	0000001e LSM303DLHC_AccFilterCmd
0800c158  w    F .text	00000002 TIM8_CC_IRQHandler
08017958 g     O .rodata	00000030 TIM6_CR1_fields
0800db78 g     O .rodata	00000048 I2C1_ICR_fields
08004e34 g     F .text	0000005e __any_on
08007dc0 g     F .text	00000004 _isatty_r
0800c820 g     O .rodata	00000028 __mprec_tinytens
20000f30 g     O .bss	00000050 input_b
08007198 g     F .text	00000012 .hidden __aeabi_dcmple
08017698 g     O .rodata	00000008 TIM2_PSC_fields
0800e690 g     O .rodata	00000028 TIM17_CCMR1_Output_fields
08000640 g     F .text	000000ba strcpy
08017bb0 g     O .rodata	00000050 COMP_COMP5_CSR_fields
08013738 g     O .rodata	00000008 I2C1_TXDR_fields
0800042c g     F .text	00000068 _puts_r
0800b6c0 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
0800fb00 g     O .rodata	00000100 CAN_F19R1_fields
080070d4 g     F .text	0000007a .hidden __cmpdf2
080081e4 g     F .text	00000054 DecodeWriteRegister
0800a048 g     F .text	000000c6 HAL_PCD_EP_ClrStall
08014910 g     O .rodata	00000008 TIM16_CCR1_fields
0800c158  w    F .text	00000002 DebugMon_Handler
08007dc4 g     F .text	00000004 _lseek_r
08013e98 g     O .rodata	00000020 FPU_MVFR1_fields
0800b4b6 g     F .text	0000001a HAL_PCD_ResetCallback
0800a142 g     F .text	00000022 PCD_WritePMA
080187d8 g     O .rodata	00000100 CAN_F22R1_fields
0800e108 g     O .rodata	000000e0 CAN_FA1R_fields
20000fd0 g     O .bss	00000224 hUSBDDevice
0800fcf8 g     O .rodata	00000048 TIM2_SMCR_fields
0800e650 g     O .rodata	00000020 NVIC_IPR1_fields
0801c62c g     O .parsetable	0000000c CmdTestE
080070d4 g     F .text	0000007a .hidden __eqdf2
08013ba8 g     O .rodata	00000100 CAN_F14R1_fields
08014d58 g     O .rodata	00000008 TIM8_PSC_fields
08012ff0 g     O .rodata	00000030 TIM15_EGR_fields
08007e48 g     F .text	00000048 CmdStats
0800bfd4 g     F .text	0000002e L3GD20_FilterConfig
0800a10e g     F .text	00000034 HAL_PCDEx_PMAConfig
08015938 g     O .rodata	00000140 TIM2_registers
080170d0 g     O .rodata	00000058 TIM15_DIER_fields
0800ee50 g     O .rodata	00000008 DMA1_CMAR3_fields
0800f5f0 g     O .rodata	00000100 GPIOA_BSRR_fields
0801b5ec g     O .rodata	00000060 DMA1_CCR7_fields
080096f8 g     F .text	000001ae HAL_PCD_EP_Close
08013ff0 g     O .rodata	00000008 TSC_IOG6CR_fields
0800ee58 g     O .rodata	00000028 ADC1_SQR1_fields
08000850 g     F .text	00000006 strtok_r
08006c44 g     F .text	0000005a .hidden __floatdidf
0800ed30 g     O .rodata	000000e0 CAN_FS1R_fields
08014858 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
0800d880 g     O .rodata	00000010 RTC_SHIFTR_fields
080003e8 g     F .text	00000028 printf
0800bf58 g     F .text	00000040 L3GD20_EnableIT
08017800 g     O .rodata	00000028 CAN_TI1R_fields
0800abf8 g     F .text	00000016 USBD_SetClassConfig
080144c8 g     O .rodata	00000020 NVIC_IPR14_fields
08006838 g     F .text	00000054 _wcrtomb_r
0800c158  w    F .text	00000002 TIM1_CC_IRQHandler
08009098 g     F .text	00000068 HAL_NVIC_SetPriority
080102a8 g     O .rodata	000001b0 ADC1_registers
0800b49e g     F .text	00000010 HAL_PCD_DataInStageCallback
080177c8 g     O .rodata	00000018 TIM2_CR2_fields
08014410 g     O .rodata	00000008 Flash_WRPR_fields
08005368 g     F .text	00000020 __sseek
08003584 g     F .text	00000008 __sinit
0800f878 g     O .rodata	00000060 DMA1_CCR2_fields
08006588 g     F .text	000000ac __swbuf_r
0800c158  w    F .text	00000002 HardFault_Handler
0800e298 g     O .rodata	00000100 TSC_IOHCR_fields
08013608 g     O .rodata	00000020 CRC_CR_fields
08003bd4 g     F .text	00000040 _setlocale_r
080034b8 g     F .text	0000002e __sfmoreglue
0800e288 g     O .rodata	00000008 NVIC_ISER0_fields
08004570 g     F .text	00000002 __malloc_unlock
08016420 g     O .rodata	00000008 TIM15_ARR_fields
08013ad0 g     O .rodata	00000008 RTC_BKP24R_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
08013ac8 g     O .rodata	00000008 TIM1_CCR3_fields
0801b65c g     O .rodata	00000008 TIM1_DMAR_fields
0800f578 g     O .rodata	00000008 TIM15_CCR1_fields
0800c158  w    F .text	00000002 USB_HP_IRQHandler
08017680 g     O .rodata	00000010 USART1_RTOR_fields
08011d90 g     O .rodata	00000070 RCC_AHBENR_fields
080152b8 g     O .rodata	00000018 TIM2_CNT_fields
08016300 g     O .rodata	000000b0 I2C1_registers
0800770c g     F .text	0000000e SysTick_Handler
080125e0 g     O .rodata	00000008 RTC_WPR_fields
08018250 g     O .rodata	00000008 RTC_SSR_fields
08013d88 g     O .rodata	00000008 TSC_IOG2CR_fields
080092dc g     F .text	0000000a HAL_GPIO_WritePin
0800b3be g     F .text	00000026 USBD_CDC_ReceivePacket
0800c158  w    F .text	00000002 PVD_IRQHandler
0800e290 g     O .rodata	00000008 DMA1_CPAR7_fields
0800bcbe g     F .text	0000001c LSM303DLHC_AccRebootCmd
080152d0 g     O .rodata	00000010 TIM6_CNT_fields
0800f398 g     O .rodata	00000078 TIM1_DIER_fields
0800b4ae g     F .text	00000008 HAL_PCD_SOFCallback
08013068 g     O .rodata	00000008 NVIC_ICPR0_fields
080044a4 g     F .text	000000c6 memmove
0800c158  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800b9e0 g     F .text	00000068 GYRO_IO_Init
08017ff8 g     O .rodata	00000020 NVIC_IPR2_fields
0801bb54 g       *ABS*	00000000 _sidata
08003570 g     F .text	00000014 _cleanup
08008fb8 g     F .text	00000038 HAL_RCC_GetHCLKFreq
0800c158  w    F .text	00000002 PendSV_Handler
0801c620 g     O .parsetable	0000000c CmdButtonE
08016748 g     O .rodata	00000008 NVIC_ICPR1_fields
0800c158  w    F .text	00000002 NMI_Handler
08009100 g     F .text	00000018 HAL_NVIC_EnableIRQ
08004574 g     F .text	0000004c _Balloc
0801bb48 g       .ARM	00000000 __exidx_end
080007ec g     F .text	00000064 __strtok_r
0800c158  w    F .text	00000002 EXTI3_IRQHandler
08008f4c g     F .text	0000006c HAL_RCC_GetSysClockFreq
0800b924 g     F .text	0000001c BSP_LED_Off
0801b36c g     O .rodata	00000008 DMA1_CNDTR5_fields
080120d8 g     O .rodata	00000098 TIM8_CCER_fields
08012900 g     O .rodata	00000100 CAN_F8R2_fields
080070c4 g     F .text	0000008a .hidden __gtdf2
0801c6b0 g       .parsetable	00000000 _parsetable_end
08016f58 g     O .rodata	00000048 RCC_AHBRSTR_fields
080002a8 g     F .text	0000000c __errno
0800e1e8 g     O .rodata	00000008 RTC_BKP6R_fields
0800e778 g     O .rodata	00000028 CAN_TI2R_fields
0800adfc g     F .text	00000214 USBD_StdDevReq
0800a40c g     F .text	00000090 HAL_I2C_Init
08016568 g     O .rodata	00000008 NVIC_ISER2_fields
0801c698 g     O .parsetable	0000000c CmdWE
0800a49c  w    F .text	00000002 HAL_I2C_MspDeInit
08011558 g     O .rodata	00000020 CAN_RDH0R_fields
08013a90 g     O .rodata	00000020 FPU_FPDSCR_fields
0800b604 g     F .text	0000000c USBD_VCP_DeviceDescriptor
08008ff0  w    F .text	00000002 HAL_MspInit
0800f9f8 g     O .rodata	00000100 CAN_F0R2_fields
0800d7e0 g     O .rodata	00000008 TSC_IOG8CR_fields
0800b59c g     F .text	00000026 USBD_LL_IsStallEP
08017ab0 g     O .rodata	00000100 CAN_F0R1_fields
08012a00 g     O .rodata	00000020 TIM15_SMCR_fields
0800b550 g     F .text	0000000e USBD_LL_Start
0800bb38 g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
0800bbf8 g     F .text	00000030 BSP_ACCELERO_Init
0800abee g     F .text	0000000a USBD_Start
08007db6 g     F .text	0000000a _fstat_r
080092e6 g     F .text	00000008 HAL_GPIO_TogglePin
08016878 g     O .rodata	00000048 TIM8_CR1_fields
080146c0 g     O .rodata	00000008 Flash_AR_fields
08010b30 g     O .rodata	00000100 CAN_F2R1_fields
080137a0 g     O .rodata	00000058 COMP_COMP4_CSR_fields
0800f1c0 g     O .rodata	00000040 GPIOB_AFRH_fields
08005328 g     F .text	00000004 __seofread
0800c188 g       .text	00000000 _etext
08013770 g     O .rodata	00000010 EXTI_PR2_fields
080144f8 g     O .rodata	00000028 USB_FS_FNR_fields
20000ac0 g       .bss	00000000 _sbss
08013530 g     O .rodata	00000070 COMP_registers
08016750 g     O .rodata	00000100 CAN_F4R2_fields
0800b600 g     F .text	00000002 USBD_static_free
08012fe8 g     O .rodata	00000008 DMA1_CMAR1_fields
080108c8 g     O .rodata	00000060 TIM2_DIER_fields
08007160 g     F .text	00000010 .hidden __aeabi_cdcmple
08011748 g     O .rodata	00000008 TSC_IOG1CR_fields
08018540 g     O .rodata	00000020 TIM17_CCER_fields
08018340 g     O .rodata	00000008 TIM8_RCR_fields
08014ac8 g     O .rodata	00000010 TIM16_CNT_fields
080149a8 g     O .rodata	00000100 GPIOB_BSRR_fields
08011bd8 g     O .rodata	00000100 CAN_F16R2_fields
0800f820 g     O .rodata	00000018 ADC1_OFR1_fields
08017128 g     O .rodata	00000100 CAN_F24R2_fields
08010eb0 g     O .rodata	00000008 RTC_BKP23R_fields
080141d8 g     O .rodata	00000008 TIM15_CCR2_fields
0800eaa0 g     O .rodata	00000098 ADC1_CFGR_fields
0800e5d0 g     O .rodata	00000008 RTC_BKP13R_fields
0800abe0 g     F .text	0000000e USBD_RegisterClass
08011e08 g     O .rodata	00000100 CAN_F20R1_fields
08011cd8 g     O .rodata	00000060 USART1_ICR_fields
0801b8e4 g     O .rodata	00000100 CAN_F25R2_fields
08018560 g     O .rodata	00000008 TSC_IOG4CR_fields
08011f08 g     O .rodata	00000100 CAN_F27R2_fields
0801b864 g     O .rodata	00000078 TIM8_SR_fields
0800db28 g     O .rodata	00000050 USB_FS_ISTR_fields
08016400 g     O .rodata	00000008 DMA1_CMAR2_fields
0800f410 g     O .rodata	00000008 RTC_BKP26R_fields
08013040 g     O .rodata	00000028 ADC1_SQR2_fields
080125e8 g     O .rodata	00000010 TIM17_CNT_fields
0800f270 g     O .rodata	00000008 WWDG_SR_fields
08010a28 g     O .rodata	000000c0 EXTI_registers
08009144 g     F .text	0000018c HAL_GPIO_Init
0800ada0 g     F .text	00000006 USBD_LL_SetSpeed
20000a40 g     O .data	00000004 BUTTON_PORT
0800bc28 g     F .text	00000010 BSP_ACCELERO_GetXYZ
08010ea0 g     O .rodata	00000008 NVIC_ICTR_fields
0800e498 g     O .rodata	00000008 TIM6_ARR_fields
08011578 g     O .rodata	000000b0 CAN_TSR_fields
08007c70 g     F .text	000000b8 DumpBuffer
08000410 g     F .text	00000006 _putchar_r
08012880 g     O .rodata	00000080 GPIOA_IDR_fields
0800d710 g     O .rodata	00000050 USB_FS_USB_EP3R_fields
0800b4d2 g     F .text	00000002 HAL_PCD_ResumeCallback
08004370 g     F .text	00000134 memcpy
08007150 g     F .text	00000020 .hidden __aeabi_cdrcmple
080176a0 g     O .rodata	00000100 CAN_F7R2_fields
080172b8 g     O .rodata	00000010 TIM1_CNT_fields
0800ba48 g     F .text	00000044 GYRO_IO_Write
080004a4 g     F .text	00000150 setvbuf
08007568 g     F .text	0000005c CmdLED
20000ac0 g     O .data	00000000 .hidden __TMC_END__
08010d40 g     O .rodata	00000078 TIM1_SR_fields
0800f8d8 g     O .rodata	00000020 NVIC_IPR13_fields
0800e670 g     O .rodata	00000008 TIM15_PSC_fields
0800b040 g     F .text	000000b2 USBD_StdEPReq
080033b8 g     F .text	0000000c _cleanup_r
08014f00 g     O .rodata	00000040 GPIOA_AFRH_fields
08006bd4 g     F .text	00000022 .hidden __floatsidf
080165b0 g     O .rodata	00000010 DAC_DHR12RD_fields
080168f8 g     O .rodata	00000058 COMP_COMP2_CSR_fields
080165c0 g     O .rodata	00000078 TIM8_DIER_fields
0801b64c g     O .rodata	00000010 ADC1_DIFSEL_fields
080070cc g     F .text	00000082 .hidden __ltdf2
0800b958 g     F .text	00000074 BSP_PB_Init
0800c158  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
0800c158  w    F .text	00000002 EXTI0_IRQHandler
08017c70 g     O .rodata	00000010 TIM8_OR_fields
0800c158  w    F .text	00000002 I2C2_EV_IRQHandler
0800e748 g     O .rodata	00000020 CAN_TDH0R_fields
08010c38 g     O .rodata	00000050 USB_FS_USB_EP4R_fields
08007250 g     F .text	00000000 .hidden __aeabi_uldivmod
08013740 g     O .rodata	00000030 WWDG_registers
0800da20 g     O .rodata	00000008 TIM17_RCR_fields
08000494 g     F .text	00000010 puts
0800b182 g     F .text	00000016 USBD_CtlSendStatus
0800c158  w    F .text	00000002 FPU_IRQHandler
08009058  w    F .text	0000001a HAL_Delay
0800b010 g     F .text	00000030 USBD_StdItfReq
08010c30 g     O .rodata	00000008 TIM8_CCR4_fields
200008d8 g     O .data	00000004 SystemCoreClock
080172c8 g     O .rodata	00000120 TIM15_registers
080099b0 g     F .text	00000178 HAL_PCD_EP_Transmit
0800027c g     F .text	00000012 my_Tick
08004d54 g     F .text	00000060 __ratio
08013990 g     O .rodata	00000100 CAN_F3R1_fields
0800adbe g     F .text	00000028 USBD_ParseSetupRequest
08014808 g     O .rodata	00000010 TIM2_CCR1_fields
08011a28 g     O .rodata	00000010 DAC_SWTRIGR_fields
0800c158  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
080106a8 g     O .rodata	00000100 CAN_F13R1_fields
08003d3c g     F .text	00000010 malloc
08012e18 g     O .rodata	00000008 IWDG_RLR_fields
080003c8 g     F .text	0000001e _printf_r
0800a164 g     F .text	00000022 PCD_ReadPMA
080075ec g     F .text	00000054 CmdGyro
08018228 g     O .rodata	00000010 CAN_FMR_fields
0800c758 g     O .rodata	000000c8 __mprec_tens
0801b6bc g     O .rodata	00000040 OPAMP_registers
08016128 g     O .rodata	00000008 DMA1_CNDTR4_fields
08017a28 g     O .rodata	00000008 NVIC_IABR1_fields
08017928 g     O .rodata	00000030 ADC1_2_registers
200009ec g     O .data	0000001c VCP_Desc
08017448 g     O .rodata	000000d0 EXTI_PR1_fields
0800c158  w    F .text	00000002 UsageFault_Handler
08003c14 g     F .text	00000008 __locale_charset
08015d08 g     O .rodata	00000020 TIM8_CCR5_fields
0800c158  w    F .text	00000002 ADC1_2_IRQHandler
20000adc g     O .bss	00000004 __malloc_top_pad
20000f80 g     O .bss	00000050 input
08016950 g     O .rodata	00000100 CAN_F4R1_fields
080144e8 g     O .rodata	00000010 ADC1_TR3_fields
08010db8 g     O .rodata	00000008 DMA1_CPAR2_fields
0800f278 g     O .rodata	00000048 TIM16_DIER_fields
080092d0 g     F .text	0000000c HAL_GPIO_ReadPin
08013728 g     O .rodata	00000008 NVIC_ICER2_fields
0800098c g     F .text	00000018 strtoul
20001470 g     O .bss	00000004 BuffLength
20000458 g     O .data	00000004 __mb_cur_max
08006bb4 g     F .text	0000001e .hidden __aeabi_ui2d
08003c34 g     F .text	00000008 _localeconv_r
0800f268 g     O .rodata	00000008 TIM8_CCR1_fields
20001474 g     O .bss	0000006c UartHandle
08017e10 g     O .rodata	00000100 CAN_F9R2_fields
08015930 g     O .rodata	00000008 DAC_DHR12L2_fields
08004788 g     F .text	00000012 __i2b
08003830 g     F .text	00000304 __sfvwrite_r
0800ada6 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
0800c158  w    F .text	00000002 SPI1_IRQHandler
08013ad8 g     O .rodata	00000028 CAN_TI0R_fields
0800c158  w    F .text	00000002 CAN_SCE_IRQHandler
08007280 g     F .text	000002e2 .hidden __udivmoddi4
08006930 g     F .text	00000000 .hidden __aeabi_drsub
08017f60 g     O .rodata	00000048 ADC1_SMPR2_fields
08014988 g     O .rodata	00000020 NVIC_IPR4_fields
08007d7c g     F .text	00000034 _sbrk_r
0801c65c g     O .parsetable	0000000c CMD_GPIO_INITE
0800e5b0 g     O .rodata	00000020 NVIC_IPR18_fields
0800b3e4 g     F .text	0000009c HAL_PCD_MspInit
08015b88 g     O .rodata	00000010 TIM6_DIER_fields
0800f040 g     O .rodata	00000060 TIM1_CCMR1_Output_fields
0801b254 g     O .rodata	000000b0 USART1_ISR_fields
0800c158  w    F .text	00000002 TIM6_DAC_IRQHandler
0800fdb0 g     O .rodata	00000068 I2C1_CR2_fields
08013d80 g     O .rodata	00000008 TIM8_CCR2_fields
08009faa g     F .text	0000009e HAL_PCD_EP_SetStall
0800771c g     F .text	0000014c CMD_GPIO_INIT
08007f58 g     F .text	0000000a _read_r
0800d838 g     O .rodata	00000048 TIM1_SMCR_fields
08013f60 g     O .rodata	00000030 CAN_ESR_fields
0800abb6 g     F .text	0000002a USBD_Init
08016a60 g     O .rodata	00000080 GPIOB_BRR_fields
200011f8 g     O .bss	00000178 hpcd
08007184 g     F .text	00000012 .hidden __aeabi_dcmplt
080066a4 g     F .text	00000084 _fclose_r
08014918 g     O .rodata	00000018 ADC1_OFR2_fields
0800e6b8 g     O .rodata	00000010 TIM2_ARR_fields
08003390 g     F .text	00000024 fflush
0800bad4 g     F .text	00000064 COMPASSACCELERO_IO_Init
20000b08 g     O .bss	00000004 __malloc_max_sbrked_mem
080185a8 g     O .rodata	00000100 CAN_F9R1_fields
080146c8 g     O .rodata	00000038 RTC_DR_fields
08017238 g     O .rodata	00000008 TIM1_CCR1_fields
08009118 g     F .text	0000002c HAL_SYSTICK_Config
08006bf8 g     F .text	0000003a .hidden __extendsfdf2
08016020 g     O .rodata	00000008 Flash_OPTKEYR_fields
08011398 g     O .rodata	00000018 ADC1_OFR4_fields
200011f4 g     O .bss	00000004 USBDDataIn
08006ef4 g     F .text	000001d0 .hidden __aeabi_ddiv
0800c158  w    F .text	00000002 TIM8_UP_IRQHandler
20000a08 g     O .data	0000001a USBD_StringSerial
08011858 g     O .rodata	00000100 CAN_F25R1_fields
08018370 g     O .rodata	00000018 SPI1_I2SPR_fields
08015c00 g     O .rodata	00000008 ADC1_JDR1_fields
08016740 g     O .rodata	00000008 IWDG_KR_fields
08017988 g     O .rodata	00000050 USB_FS_USB_EP0R_fields
0800693c g     F .text	00000276 .hidden __adddf3
0800bb80 g     F .text	00000038 COMPASSACCELERO_IO_Write
08013d90 g     O .rodata	00000100 CAN_F23R2_fields
08013b20 g     O .rodata	00000050 CRC_registers
08010600 g     O .rodata	000000a0 USART1_CR1_fields
08010ed8 g     O .rodata	00000320 RTC_registers
08011648 g     O .rodata	00000100 CAN_F5R2_fields
08010458 g     O .rodata	00000028 TIM17_CR2_fields
08004bc8 g     F .text	000000d0 __b2d
0801bb40 g       .ARM	00000000 __exidx_start
0800fce0 g     O .rodata	00000018 TIM16_CCMR1_Input_fields
0800ea20 g     O .rodata	00000008 Flash_KEYR_fields
08006ca0 g     F .text	00000254 .hidden __aeabi_dmul
0800be66 g     F .text	0000001c LSM303DLHC_AccZClickITConfig
080143a8 g     O .rodata	00000060 TIM8_CCMR2_Output_fields
0800f198 g     O .rodata	00000028 PWR_CSR_fields
080170c0 g     O .rodata	00000010 RTC_ALRMASSR_fields
20000964 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
080177a0 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
080107f8 g     O .rodata	00000008 NVIC_IABR0_fields
0800c720 g     O .rodata	00000004 _global_impure_ptr
08010978 g     O .rodata	00000040 FPU_MVFR0_fields
080162e8 g     O .rodata	00000008 TIM16_RCR_fields
08004f24 g     F .text	000003de _realloc_r
080002dc g     F .text	00000050 __libc_init_array
0800b172 g     F .text	00000010 USBD_CtlContinueRx
08017690 g     O .rodata	00000008 RTC_BKP12R_fields
0800dff0 g     O .rodata	00000010 USART1_GTPR_fields
080093c2 g     F .text	00000336 HAL_PCD_EP_Open
0800c158  w    F .text	00000002 DMA2_Channel2_IRQHandler
0800c158  w    F .text	00000002 DMA1_Channel4_IRQHandler
0800f0a8 g     O .rodata	00000010 TIM1_OR_fields
0800d760 g     O .rodata	00000080 GPIOB_PUPDR_fields
08009b28 g     F .text	00000482 HAL_PCD_IRQHandler
080079cc g     F .text	00000020 CmdR
080067d0 g     F .text	00000026 _fputwc_r
0800c848 g     O .rodata	00000028 __mprec_bigtens
08018258 g     O .rodata	00000008 TIM1_CCR4_fields
08004654 g     F .text	00000098 __s2b
08006bb4 g     F .text	0000001e .hidden __floatunsidf
08012fc0 g     O .rodata	00000020 CAN_TDL1R_fields
08004a1c g     F .text	00000042 __mcmp
080168d8 g     O .rodata	00000020 NVIC_IPR7_fields
0800c002 g     F .text	0000002e L3GD20_FilterCmd
08017418 g     O .rodata	00000008 TIM17_DMAR_fields
0800a49e g     F .text	0000002e HAL_I2C_DeInit
08015b78 g     O .rodata	00000010 TIM15_CNT_fields
0800359c g     F .text	00000014 __fp_lock_all
0800a852 g     F .text	000000a6 HAL_SPI_Init
0800ff60 g     O .rodata	00000008 RTC_BKP10R_fields
08010928 g     O .rodata	00000048 CAN_MSR_fields
08014570 g     O .rodata	000000d0 RCC_registers
0800c170 g     F .text	00000000 _init
08011628 g     O .rodata	00000020 CAN_TDL0R_fields
08013ab0 g     O .rodata	00000008 DAC_DHR8R2_fields
08014f40 g     O .rodata	00000090 RCC_APB1RSTR_fields
0800bc7c g     F .text	00000010 BSP_GYRO_GetXYZ
0800faf8 g     O .rodata	00000008 RTC_BKP0R_fields
08015370 g     O .rodata	00000590 CAN_registers
0801c614 g       .parsetable	00000000 _parsetable_start
080114e0 g     O .rodata	00000060 DMA1_CCR5_fields
08010b28 g     O .rodata	00000008 RTC_BKP8R_fields
08010198 g     O .rodata	00000110 TSC_registers
080137f8 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800b580 g     F .text	0000000e USBD_LL_StallEP
0800ed00 g     O .rodata	00000008 NVIC_ICER1_fields
08017420 g     O .rodata	00000028 TIM16_EGR_fields
0801c680 g     O .parsetable	0000000c CmdRE
0800a850  w    F .text	00000002 HAL_SPI_MspInit
08015a78 g     O .rodata	00000100 CAN_F8R1_fields
0800c158  w    F .text	00000002 USART3_IRQHandler
08012ea8 g     O .rodata	00000100 CAN_F21R1_fields
080107a8 g     O .rodata	00000050 RCC_CSR_fields
0800b644 g     F .text	00000044 USBD_VCP_SerialStrDescriptor
08013378 g     O .rodata	00000080 GPIOA_OTYPER_fields
08018578 g     O .rodata	00000010 DAC_DHR12LD_fields
0800f6f0 g     O .rodata	00000030 TIM16_SR_fields
08014fd0 g     O .rodata	000001a0 TIM1_registers
080002b4 g     F .text	00000028 __libc_fini_array
08017c38 g     O .rodata	00000038 ADC1_JSQR_fields
20001d1c g       .bss	00000000 _ebss
08007980 g     F .text	00000030 CmdTest
0800bbb8 g     F .text	00000040 COMPASSACCELERO_IO_Read
20000a94 g     O .data	0000002c L3gd20Drv
08013840 g     O .rodata	00000050 FPU_CPACR_fields
0800c158  w    F .text	00000002 DMA1_Channel7_IRQHandler
08013cb8 g     O .rodata	00000020 CAN_TDL2R_fields
0800a5f4 g     F .text	00000134 HAL_I2C_Mem_Read
0800ee10 g     O .rodata	00000040 GPIOA_AFRL_fields
0800c108  w    F .text	00000038 Reset_Handler
200008dc g     O .data	00000043 USBD_CDC_CfgFSDesc
0801b4cc g     O .rodata	00000008 RTC_BKP29R_fields
0800bc38 g     F .text	00000044 BSP_GYRO_Init
0800ebe0 g     O .rodata	00000020 NVIC_IPR0_fields
08013098 g     O .rodata	00000080 GPIOA_ODR_fields
080046ec g     F .text	00000040 __hi0bits
08010dc0 g     O .rodata	00000020 NVIC_IPR15_fields
0800f0a0 g     O .rodata	00000008 TIM1_CCR2_fields
080104a8 g     O .rodata	000000d0 EXTI_RTSR1_fields
080114d8 g     O .rodata	00000008 DAC_DOR2_fields
08012fe0 g     O .rodata	00000008 CRC_DR_fields
08007200 g     F .text	0000004e .hidden __fixdfsi
0800ec28 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0801c674 g     O .parsetable	0000000c CmdLEDE
0800c158  w    F .text	00000002 UART5_IRQHandler
080082ec g     F .text	0000004c DecodePeripheral
080173f0 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
0800ff70 g     O .rodata	00000100 CAN_F11R2_fields
0800c158  w    F .text	00000002 ADC3_IRQHandler
08012e20 g     O .rodata	00000038 RTC_TSTR_fields
08013f18 g     O .rodata	00000048 TIM2_CR1_fields
08009018 g     F .text	00000024 HAL_Init
08012aa8 g     O .rodata	00000100 CAN_F1R2_fields
08004e94 g     F .text	00000042 _putc_r
0800b154 g     F .text	0000001e USBD_CtlPrepareRx
08012678 g     O .rodata	00000008 RTC_BKP17R_fields
08015170 g     O .rodata	00000020 CAN_RDL1R_fields
080161e8 g     O .rodata	00000100 CAN_F23R1_fields
0800a8fa g     F .text	0000002e HAL_SPI_DeInit
0800c158  w    F .text	00000002 TIM4_IRQHandler
080113d0 g     O .rodata	00000100 CAN_F18R1_fields
08018260 g     O .rodata	000000d0 USB_FS_registers
0800693c g     F .text	00000276 .hidden __aeabi_dadd
08018538 g     O .rodata	00000008 TIM8_CCR3_fields
080070cc g     F .text	00000082 .hidden __ledf2
08016028 g     O .rodata	00000100 CAN_F13R2_fields
0800ca62 g     O .rodata	00000008 LEDs
08014640 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
0801b8dc g     O .rodata	00000008 DAC_DHR12R1_fields
080187a8 g     O .rodata	00000028 I2C1_OAR1_fields
0800b5f8 g     F .text	00000008 USBD_static_malloc
0800ed10 g     O .rodata	00000020 CAN_RF0R_fields
0800c158  w    F .text	00000002 CAN_RX1_IRQHandler
0800c158  w    F .text	00000002 DMA2_Channel1_IRQHandler
0800ed08 g     O .rodata	00000008 RTC_BKP7R_fields
080048cc g     F .text	000000a0 __pow5mult
080133f8 g     O .rodata	00000010 ADC1_TR1_fields
08018158 g     O .rodata	00000008 DMA1_CNDTR7_fields
08006c34 g     F .text	0000006a .hidden __aeabi_ul2d
0800b390 g     F .text	0000002e USBD_CDC_TransmitPacket
20000a44 g     O .data	00000004 I2cxTimeout
080114d0 g     O .rodata	00000008 TSC_IOG5CR_fields
08011d88 g     O .rodata	00000008 DAC_DHR12R2_fields
08013ac0 g     O .rodata	00000008 RTC_BKP18R_fields
08000264 g     F .text	00000016 mytest
0800ff68 g     O .rodata	00000008 DMA1_CMAR6_fields
08011d58 g     O .rodata	00000030 TIM15_CCMR1_Input_fields
08007640 g     F .text	0000002c CmdButton
0800b198 g     F .text	00000016 USBD_CtlReceiveStatus
08011308 g     O .rodata	00000010 TIM2_CCR4_fields
20001d1c g       ._user_heap_stack	00000000 end
20000a24 g     O .data	00000008 LineCoding
080109b8 g     O .rodata	00000070 SPI1_CR1_fields
0800c158  w    F .text	00000002 I2C1_EV_IRQHandler
080152e0 g     O .rodata	00000090 SPI1_registers
0800b55e g     F .text	00000014 USBD_LL_OpenEP
08014930 g     O .rodata	00000010 TIM8_DCR_fields
08008380 g     F .text	00000058 DecodePrintRegisters
08013298 g     O .rodata	00000068 USB_FS_USB_CNTR_fields
08011978 g     O .rodata	000000b0 USART1_registers
0800bf98 g     F .text	0000003c L3GD20_DisableIT
0800f0b8 g     O .rodata	00000008 USART1_TDR_fields
08014e68 g     O .rodata	00000078 RCC_APB1ENR_fields
0800a8f8  w    F .text	00000002 HAL_SPI_MspDeInit
080187d0 g     O .rodata	00000008 DMA1_CNDTR2_fields
08016638 g     O .rodata	00000070 CAN_IER_fields
08017a30 g     O .rodata	00000060 DMA1_CCR1_fields
08017e08 g     O .rodata	00000008 NVIC_ICER0_fields
08012e98 g     O .rodata	00000008 NVIC_ISER1_fields
0800acd8 g     F .text	0000008a USBD_LL_DataInStage
0801b4c4 g     O .rodata	00000008 RTC_BKP31R_fields
08013250 g     O .rodata	00000048 TIM1_EGR_fields
08017258 g     O .rodata	00000060 TIM2_CCMR1_Output_fields
08016428 g     O .rodata	00000010 DAC_SR_fields
08014280 g     O .rodata	00000010 TIM2_CCR2_fields
0800b4d4 g     F .text	0000007c USBD_LL_Init
08016870 g     O .rodata	00000008 RTC_BKP3R_fields
0800b908 g     F .text	0000001c BSP_LED_On
0800be82 g     F .text	00000032 L3GD20_Init
080071c0 g     F .text	00000012 .hidden __aeabi_dcmpgt
0800c158  w    F .text	00000002 DMA1_Channel6_IRQHandler
0801c650 g     O .parsetable	0000000c CMD_GPIO_TOGGLEE
0800ade6 g     F .text	00000016 USBD_CtlError
20000920 g     O .data	00000038 USBD_CDC
0800ac0e g     F .text	0000000e USBD_ClrClassConfig
0801b304 g     O .rodata	00000008 RTC_BKP5R_fields
0800c158  w    F .text	00000002 UART4_IRQHandler
0800c158  w    F .text	00000002 DMA2_Channel4_IRQHandler
0800b366 g     F .text	0000000e USBD_CDC_RegisterInterface
0800358c g     F .text	00000002 __sfp_lock_acquire
080042d0 g     F .text	00000000 memchr
08003660 g     F .text	000001d0 _free_r
0800c158  w    F .text	00000002 TIM3_IRQHandler
0800c158  w    F .text	00000002 RCC_IRQHandler
0800dee0 g     O .rodata	00000020 RTC_CALR_fields
08003c1c g     F .text	0000000c __locale_mb_cur_max
080071ac g     F .text	00000012 .hidden __aeabi_dcmpge
08010970 g     O .rodata	00000008 DAC_DHR12L1_fields
0800dfc0 g     O .rodata	00000030 TIM17_SR_fields
00001000 g       *ABS*	00000000 _Min_Heap_Size
08013198 g     O .rodata	00000080 GPIOB_OTYPER_fields
0800c158  w    F .text	00000002 DMA1_Channel1_IRQHandler
08017598 g     O .rodata	00000008 RTC_BKP9R_fields
08018388 g     O .rodata	00000100 CAN_F14R2_fields
08006938 g     F .text	0000027a .hidden __aeabi_dsub
0800b48c g     F .text	00000012 HAL_PCD_DataOutStageCallback
0800c158 g       .text	00000002 Default_Handler
200008bc g     O .data	00000004 __malloc_sbrk_base
0800b6a4 g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
08014888 g     O .rodata	00000088 GPIOA_LCKR_fields
08011b40 g     O .rodata	00000090 RTC_TAFCR_fields
20000a2c g     O .data	00000010 USBD_CDC_fops
08018488 g     O .rodata	000000b0 GPIOA_registers
080112f8 g     O .rodata	00000008 NVIC_ISPR2_fields
0800c158  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08015ba0 g     O .rodata	00000060 TIM2_CCMR2_Output_fields
0800efb0 g     O .rodata	00000088 GPIOB_LCKR_fields
0800ea28 g     O .rodata	00000078 TIM8_CR2_fields
080099a0 g     F .text	00000010 HAL_PCD_EP_GetRxCount
0800e5d8 g     O .rodata	00000030 CAN_BTR_fields
08006c34 g     F .text	0000006a .hidden __floatundidf
0801b30c g     O .rodata	00000060 DMA1_CCR4_fields
0800f558 g     O .rodata	00000020 NVIC_IPR10_fields
08011bd0 g     O .rodata	00000008 TIM17_ARR_fields
08011a38 g     O .rodata	00000100 CAN_F12R2_fields
0800496c g     F .text	000000ae __lshift
08015e78 g     O .rodata	00000028 USART1_RQR_fields
08014528 g     O .rodata	00000048 TIM17_DIER_fields
0800d9b8 g     O .rodata	00000008 RTC_BKP22R_fields
08015ea0 g     O .rodata	00000020 CAN_TDH2R_fields
080135b0 g     O .rodata	00000008 TIM1_RCR_fields
0800b58e g     F .text	0000000e USBD_LL_ClearStallEP
0801b844 g     O .rodata	00000020 NVIC_IPR5_fields
0800f418 g     O .rodata	00000058 Flash_OBR_fields
0800c158  w    F .text	00000002 EXTI15_10_IRQHandler
0800fd40 g     O .rodata	00000018 CAN_TDT1R_fields
0800c030 g     F .text	000000d8 L3GD20_ReadXYZAngRate
08014038 g     O .rodata	00000038 RTC_TR_fields
08014aa8 g     O .rodata	00000020 NVIC_IPR17_fields
0800221c g     F .text	000000a4 __register_exitproc
0800f340 g     O .rodata	00000058 Flash_CR_fields
08010e40 g     O .rodata	00000058 SPI1_SR_fields
08010ae8 g     O .rodata	00000040 USB_FS_DADDR_fields
08011548 g     O .rodata	00000010 EXTI_SWIER2_fields
08009396 g     F .text	0000002c HAL_PCD_SetAddress
08013020 g     O .rodata	00000020 NVIC_IPR19_fields
08012008 g     O .rodata	00000008 TIM6_SR_fields
0800e008 g     O .rodata	00000100 CAN_F1R1_fields
08016a58 g     O .rodata	00000008 TIM17_PSC_fields
0800df50 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
0800479c g     F .text	00000130 __multiply
08018960 g     O .rodata	00000008 SPI1_CRCPR_fields
0800bcda g     F .text	0000001e LSM303DLHC_AccFilterConfig
08008c8c g     F .text	000002c0 HAL_RCC_ClockConfig
08009074 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
200008cc g     O .data	00000004 Commands
08017f10 g     O .rodata	00000010 ADC1_TR2_fields
20000ae0 g     O .bss	00000028 __malloc_current_mallinfo
0800bde4 g     F .text	0000001e LSM303DLHC_AccFilterClickCmd
08013b18 g     O .rodata	00000008 RTC_TSSSR_fields
08007af8 g     F .text	00000130 TaskInput
08011850 g     O .rodata	00000008 TIM6_CR2_fields
08016190 g     O .rodata	00000050 RCC_CR_fields
08013408 g     O .rodata	000000e0 CAN_FM1R_fields
08013e90 g     O .rodata	00000008 TIM1_CCR6_fields
08004c98 g     F .text	000000ba __d2b
08018160 g     O .rodata	00000098 USART1_CR2_fields
08015d78 g     O .rodata	00000060 TIM1_BDTR_fields
080005f4 g     F .text	0000004c strcasecmp
0800ddb8 g     O .rodata	00000008 IWDG_WINR_fields
080134e8 g     O .rodata	00000048 ADC1_SMPR1_fields
0800ba8c g     F .text	00000048 GYRO_IO_Read
08000294 g     F .text	00000004 my_Init
08010eb8 g     O .rodata	00000018 I2C1_OAR2_fields
08017c80 g     O .rodata	00000100 CAN_F26R1_fields
08000858 g     F .text	00000134 _strtoul_r
08014408 g     O .rodata	00000008 CRC_POL_fields
0801b4d4 g     O .rodata	00000008 DMA1_CMAR4_fields
0800c158  w    F .text	00000002 TIM7_IRQHandler
0800befc g     F .text	0000005c L3GD20_INT1InterruptConfig
0800b4d0 g     F .text	00000002 HAL_PCD_SuspendCallback
08015ec8 g     O .rodata	00000008 DMA1_CPAR3_fields
08011e00 g     O .rodata	00000008 RTC_BKP14R_fields
0800b20c g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
08007db0 g     F .text	00000006 _close_r
0800d658 g     O .rodata	00000008 SPI1_DR_fields
0800ea00 g     O .rodata	00000018 RCC_CFGR2_fields
08006bd4 g     F .text	00000022 .hidden __aeabi_i2d
0800e5a0 g     O .rodata	00000010 TIM15_DCR_fields
0800e678 g     O .rodata	00000018 Flash_ACR_fields
0801b5dc g     O .rodata	00000008 CRC_IDR_fields
20000a68 g     O .data	0000002c Lsm303dlhcDrv
08011300 g     O .rodata	00000008 DMA1_CPAR5_fields
08017828 g     O .rodata	00000100 CAN_F18R2_fields
08015d28 g     O .rodata	00000050 IWDG_registers
080007dc g     F .text	00000010 strtok
0801c668 g     O .parsetable	0000000c CmdGyroE
08012ea0 g     O .rodata	00000008 IWDG_PR_fields
080141b8 g     O .rodata	00000020 NVIC_IPR11_fields
080135b8 g     O .rodata	00000050 COMP_COMP7_CSR_fields
0800dec0 g     O .rodata	00000020 CAN_RF1R_fields
08007e90 g     F .text	0000007c TerminalInit
08002154 g     F .text	000000c8 __swsetup_r
080104a0 g     O .rodata	00000008 TIM8_ARR_fields
08007564  w    F .text	00000002 .hidden __aeabi_ldiv0
0800c158  w    F .text	00000002 EXTI9_5_IRQHandler
0800abb0 g     F .text	00000006 HAL_SPI_GetState
08006ef4 g     F .text	000001d0 .hidden __divdf3
08010090 g     O .rodata	00000008 ADC1_DR_fields
080034e8 g     F .text	00000088 __sfp
08004dec g     F .text	00000046 __copybits
0800c158  w    F .text	00000002 RTC_WKUP_IRQHandler
0801b4b4 g     O .rodata	00000010 USART1_BRR_fields
080179d8 g     O .rodata	00000050 TIM15_CCMR1_Output_fields
200004b4 g     O .data	00000408 __malloc_av_
08014778 g     O .rodata	00000088 SYSCFG_CFGR1_fields
08003598 g     F .text	00000002 __sinit_lock_release
08007f62 g     F .text	00000010 TerminalReadNonBlock
08006ca0 g     F .text	00000254 .hidden __muldf3
08018590 g     O .rodata	00000018 CAN_TDT0R_fields
08007d28 g     F .text	00000054 CmdDump
08005304 g     F .text	00000022 __sread
08013070 g     O .rodata	00000028 TIM16_CCMR1_Output_fields
08016408 g     O .rodata	00000018 WWDG_CFR_fields
08016be8 g     O .rodata	00000370 Peripherals
08017518 g     O .rodata	00000080 GPIOB_ODR_fields
0800904c  w    F .text	0000000c HAL_GetTick
08014418 g     O .rodata	00000050 USB_FS_USB_EP5R_fields
08011750 g     O .rodata	00000100 CAN_F11R1_fields
0800456c g     F .text	00000002 __malloc_lock
08015ec0 g     O .rodata	00000008 NVIC_ISPR0_fields
0800eca8 g     O .rodata	00000058 ADC1_ISR_fields
0800f200 g     O .rodata	00000048 FPU_FPCCR_fields
08018330 g     O .rodata	00000010 TSC_ICR_fields
0800bd16 g     F .text	000000ce LSM303DLHC_AccReadXYZ
0800f870 g     O .rodata	00000008 NVIC_IABR2_fields
08003364 g     F .text	0000002c _fflush_r
08007f72 g     F .text	00000012 TerminalReadAnyNonBlock
0800b688 g     F .text	0000001c USBD_VCP_ProductStrDescriptor
08006644 g     F .text	0000005e _calloc_r
080188d8 g     O .rodata	00000080 GPIOA_PUPDR_fields
0800c158  w    F .text	00000002 SPI2_IRQHandler
080168c0 g     O .rodata	00000008 RTC_BKP21R_fields
0801bab5 g     O .rodata	00000012 hUSBDDeviceDesc
0800d990 g     O .rodata	00000028 RTC_TSDR_fields
08008108 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
08016498 g     O .rodata	00000048 RCC_CFGR3_fields
0800032c g     F .text	0000009a memset
0800c158  w    F .text	00000002 MemManage_Handler
08007678 g     F .text	00000094 main
08015ed0 g     O .rodata	00000100 TSC_IOSCR_fields
0800d478 g     O .rodata	000001e0 DMA1_registers
0800b9cc g     F .text	00000014 BSP_PB_GetState
080141e0 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
20000b0c g     O .bss	00000004 __malloc_max_total_mem
08010e98 g     O .rodata	00000008 ADC1_JDR3_fields
080141b0 g     O .rodata	00000008 SPI1_TXCRCR_fields
08006634 g     F .text	00000010 __swbuf
0800a928 g     F .text	00000288 HAL_SPI_TransmitReceive
20000a3c g     O .data	00000004 SpixTimeout
0801c614 g       *ABS*	00000000 _siccmram
0801b66c g     O .rodata	00000050 COMP_COMP3_CSR_fields
080120b8 g     O .rodata	00000020 NVIC_IPR9_fields
08012358 g     O .rodata	00000040 DBGMCU_registers
08016850 g     O .rodata	00000020 NVIC_IPR16_fields
080111f8 g     O .rodata	00000100 CAN_F2R2_fields
0800c158  w    F .text	00000002 SVC_Handler
08005388 g     F .text	00000008 __sclose
0800c158  w    F .text	00000002 DMA2_Channel5_IRQHandler
0800fc00 g     O .rodata	000000e0 DMA1_IFCR_fields
08006728 g     F .text	00000010 fclose
0800eb60 g     O .rodata	00000080 TSC_IOGCSR_fields
080080a4 g     F .text	00000064 TerminalInputBufferWrite
08018568 g     O .rodata	00000008 DMA1_CPAR1_fields
080023e8 g     F .text	00000e34 _dtoa_r
08003d5c g     F .text	0000056c _malloc_r
08013ff8 g     O .rodata	00000040 GPIOB_AFRL_fields
080068e4 g     F .text	0000001a __ascii_wctomb
0800e7a0 g     O .rodata	00000058 ADC1_IER_fields
08006c44 g     F .text	0000005a .hidden __aeabi_l2d
0800f038 g     O .rodata	00000008 DAC_DHR8R1_fields
08015900 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
0800e900 g     O .rodata	00000100 TSC_IOASCR_fields
08010070 g     O .rodata	00000020 NVIC_IPR20_fields
08003b34 g     F .text	0000004a _fwalk
0800ad62 g     F .text	0000003e USBD_LL_Reset
08015190 g     O .rodata	00000018 CAN_RDT1R_fields
080125f8 g     O .rodata	00000080 GPIOA_BRR_fields
08016ae8 g     O .rodata	00000100 CAN_F20R2_fields
080135a0 g     O .rodata	00000010 TSC_ISR_fields
0800b5ec g     F .text	0000000c USBD_LL_GetRxDataSize
0800c158  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800bc8c g     F .text	00000020 LSM303DLHC_AccInit
0800c158  w    F .text	00000002 USB_LP_IRQHandler
200014e0 g     O .bss	00000800 UserRxBuffer
08014170 g     O .rodata	00000040 SPI1_I2SCFGR_fields
0801ba64 g     O .rodata	00000004 USBD_LangIDDesc
0800ee80 g     O .rodata	00000100 CAN_F15R2_fields
0800c158  w    F .text	00000002 EXTI4_IRQHandler
080163b0 g     O .rodata	00000050 USB_FS_USB_EP2R_fields
08004ed8 g     F .text	0000004c putc
20000a48 g     O .data	00000020 LED_PORT
0800dc58 g     O .rodata	00000008 TIM8_CCR6_fields
0800be20 g     F .text	00000046 LSM303DLHC_AccClickITEnable
0800ac76 g     F .text	00000062 USBD_LL_DataOutStage
08011b38 g     O .rodata	00000008 RTC_BKP4R_fields
080035c4 g     F .text	0000009c _malloc_trim_r
080173e8 g     O .rodata	00000008 TSC_IOG7CR_fields
08016010 g     O .rodata	00000008 RTC_BKP16R_fields
08013218 g     O .rodata	00000028 DBGMCU_CR_fields
08013b00 g     O .rodata	00000018 CAN_RDT0R_fields
0800f470 g     O .rodata	00000008 ADC1_AWD2CR_fields
08017d80 g     O .rodata	00000008 DMA1_CMAR5_fields
08011958 g     O .rodata	00000020 CAN_RDL0R_fields
08018968 g     O .rodata	00000008 DMA1_CPAR4_fields
080053a8 g     F .text	000002dc strcmp
080166a8 g     O .rodata	00000080 TIM6_registers
080075c4 g     F .text	00000028 CmdAccel
08006504 g     F .text	00000018 vfiprintf
08013838 g     O .rodata	00000008 RTC_BKP11R_fields
0800a728 g     F .text	00000006 HAL_I2C_GetState
08008648 g     F .text	00000068 SystemInit
08014940 g     O .rodata	00000048 TIM16_BDTR_fields
080070d4 g     F .text	0000007a .hidden __nedf2
08013308 g     O .rodata	00000070 RTC_ALRMBR_fields
08013ca8 g     O .rodata	00000010 TIM2_DCR_fields
0801b9e4 g     O .rodata	00000050 ADC1_CR_fields
0800c17c g     F .text	00000000 _fini
080079b0 g     F .text	0000001c CmdW
0800938a g     F .text	0000000c HAL_PCD_Start
0800c158  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08012398 g     O .rodata	00000020 EXTI_EMR2_fields
0800bcac g     F .text	00000012 LSM303DLHC_AccReadID
0800ec20 g     O .rodata	00000008 RTC_WUTR_fields
080161e0 g     O .rodata	00000008 DMA1_CPAR6_fields
08017c30 g     O .rodata	00000008 CRC_INIT_fields
0800dbc8 g     O .rodata	00000088 RTC_ISR_fields
0800e768 g     O .rodata	00000010 TIM1_DCR_fields
0800e250 g     O .rodata	00000038 PWR_CR_fields
08010800 g     O .rodata	00000030 TIM2_EGR_fields
0800029c g     F .text	0000000c atexit
08017d88 g     O .rodata	00000080 OPAMP_OPAMP1_CR_fields
0800f478 g     O .rodata	00000060 FPU_registers
0800e800 g     O .rodata	00000100 EXTI_IMR1_fields
0800806c g     F .text	00000038 _write_r
0800f118 g     O .rodata	00000010 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
080181f8 g     O .rodata	00000028 ADC1_SQR3_fields
0800c158  w    F .text	00000002 DMA1_Channel3_IRQHandler
08018728 g     O .rodata	00000080 DBGMCU_APB1FZ_fields
08003c3c g     F .text	00000010 setlocale
08013eb8 g     O .rodata	00000060 SPI1_CR2_fields
08018240 g     O .rodata	00000010 ADC1_CALFACT_fields
08016a50 g     O .rodata	00000008 RTC_BKP28R_fields
08008ff2  w    F .text	00000024 HAL_InitTick
0800f2c0 g     O .rodata	00000020 TIM1_CCR5_fields
0800b5c2 g     F .text	0000000e USBD_LL_SetUSBAddress
08017a90 g     O .rodata	00000020 NVIC_IPR12_fields
0801bac8 g     O .rodata	00000010 LED_PIN
20000008 g     O .data	00000004 _impure_ptr
08013780 g     O .rodata	00000018 CAN_TDT2R_fields
08016018 g     O .rodata	00000008 ADC1_JDR4_fields
08015fd0 g     O .rodata	00000040 TIM15_CR2_fields
0800321c g     F .text	00000148 __sflush_r
0800e1f0 g     O .rodata	00000060 RCC_CFGR_fields
0800903c  w    F .text	00000010 HAL_IncTick
0800eb38 g     O .rodata	00000028 TIM17_EGR_fields
0800b572 g     F .text	0000000e USBD_LL_CloseEP
0800c158  w    F .text	00000002 ADC4_IRQHandler
08003c30 g     F .text	00000004 __locale_cjk_lang
08015dd8 g     O .rodata	000000a0 RTC_CR_fields
0800b144 g     F .text	00000010 USBD_CtlContinueSendData
080175a0 g     O .rodata	000000e0 DMA1_ISR_fields
0800f720 g     O .rodata	00000100 CAN_F6R1_fields
0800beb4 g     F .text	0000001c L3GD20_ReadID
0800c158  w    F .text	00000002 WWDG_IRQHandler
0800a40a  w    F .text	00000002 HAL_I2C_MspInit
0800da28 g     O .rodata	00000100 EXTI_EMR1_fields
08011d38 g     O .rodata	00000020 NVIC_IPR6_fields
08018970 g     O .rodata	00000010 TIM2_CCR3_fields
08016438 g     O .rodata	00000060 DMA1_CCR6_fields
08013118 g     O .rodata	00000080 GPIOA_MODER_fields
080164e8 g     O .rodata	00000080 OPAMP_OPAMP2_CR_fields
08004b74 g     F .text	00000054 __ulp
080035b0 g     F .text	00000014 __fp_unlock_all
08014700 g     O .rodata	00000078 TIM1_CR2_fields
08010d30 g     O .rodata	00000010 RTC_PRER_fields
0800b5d0 g     F .text	0000000e USBD_LL_Transmit
0800c158  w    F .text	00000002 TIM2_IRQHandler
08000290 g     F .text	00000004 my_Loop
08017c00 g     O .rodata	00000020 TIM16_CCER_fields
080092ee g     F .text	0000009c HAL_PCD_Init
200009a8 g     O .data	00000043 USBD_CDC_CfgHSDesc
0801c644 g     O .parsetable	0000000c CmdDecodeE
0800fe60 g     O .rodata	00000100 CAN_F26R2_fields
08014290 g     O .rodata	00000100 CAN_F6R2_fields
20000000 g       .data	00000000 myTickCount
08010098 g     O .rodata	00000100 CAN_F16R1_fields
0800dc50 g     O .rodata	00000008 RTC_BKP27R_fields
08013828 g     O .rodata	00000010 EXTI_RTSR2_fields
08018348 g     O .rodata	00000028 TIM16_CR2_fields
0800f580 g     O .rodata	00000070 RTC_ALRMAR_fields
08016738 g     O .rodata	00000008 TIM1_ARR_fields
0800b0f2 g     F .text	00000038 USBD_GetString
0800b940 g     F .text	00000018 BSP_LED_Toggle
0800f8f8 g     O .rodata	00000100 CAN_F22R2_fields
0800d890 g     O .rodata	00000100 CAN_F24R1_fields
08003c4c g     F .text	00000008 localeconv
0800b480 g     F .text	0000000c HAL_PCD_SetupStageCallback
0801b4dc g     O .rodata	00000100 CAN_F5R1_fields
0800c158  w    F .text	00000002 COMP7_IRQHandler
08003c54 g     F .text	0000005e __swhatbuf_r
20008000 g       *ABS*	00000000 _estack
080079ec g     F .text	0000010c parse
08014e60 g     O .rodata	00000008 RTC_BKP2R_fields
0800c158  w    F .text	00000002 COMP1_2_3_IRQHandler
08014070 g     O .rodata	00000100 CAN_F17R1_fields
0800c158  w    F .text	00000002 EXTI1_IRQHandler
0800f2e0 g     O .rodata	00000060 TIM8_BDTR_fields
08007170 g     F .text	00000012 .hidden __aeabi_dcmpeq
08014670 g     O .rodata	00000050 USB_FS_USB_EP1R_fields
0800d660 g     O .rodata	000000b0 ADC1_2_CSR_fields
08014520 g     O .rodata	00000008 FPU_FPCAR_fields
20000ac0 g       .data	00000000 _edata
08012ba8 g     O .rodata	000001a0 TIM8_registers
08010ea8 g     O .rodata	00000008 RTC_BKP30R_fields
08014390 g     O .rodata	00000018 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
08013b70 g     O .rodata	00000038 TIM16_CR1_fields
0801b6fc g     O .rodata	00000100 CAN_F17R2_fields
0800f838 g     O .rodata	00000038 TIM15_CR1_fields
08006738 g     F .text	00000098 __fputwc
080083d8 g     F .text	00000270 CmdDecode
08013798 g     O .rodata	00000008 TIM15_RCR_fields
08011318 g     O .rodata	00000080 GPIOB_IDR_fields
0800d7e8 g     O .rodata	00000050 TIM1_CCMR3_Output_fields
08013300 g     O .rodata	00000008 TIM8_DMAR_fields
0800e6c8 g     O .rodata	00000080 Flash_registers
08012508 g     O .rodata	00000010 TIM16_DCR_fields
0801b474 g     O .rodata	00000040 RCC_APB2RSTR_fields
08007c28 g     F .text	00000028 fetch_uint32_arg
08016728 g     O .rodata	00000010 RTC_ALRMBSSR_fields
08016570 g     O .rodata	00000040 SYSCFG_RCR_fields
0800c158  w    F .text	00000002 USART2_IRQHandler
08017f28 g     O .rodata	00000038 TIM17_CR1_fields
08014af8 g     O .rodata	00000260 NVIC_registers
0800c158  w    F .text	00000002 COMP4_5_6_IRQHandler
0800532c g     F .text	0000003c __swrite
080086b0 g     F .text	000005dc HAL_RCC_OscConfig
200008c0 g     O .data	00000004 __malloc_trim_threshold
08013730 g     O .rodata	00000008 TIM17_CCR1_fields
080105d8 g     O .rodata	00000028 I2C1_TIMINGR_fields
08016ae0 g     O .rodata	00000008 USB_FS_BTABLE_fields
08012098 g     O .rodata	00000020 CAN_TDH1R_fields
08003c28 g     F .text	00000008 __locale_msgcharset
08013cd8 g     O .rodata	000000a8 I2C1_CR1_fields
08005708 g     F .text	00000dfc _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800b12a g     F .text	0000001a USBD_CtlSendData
08016fc0 g     O .rodata	00000100 CAN_F15R1_fields
080162f0 g     O .rodata	00000010 ADC1_2_CDR_fields
08003b80 g     F .text	00000052 _fwalk_reent
08004a60 g     F .text	00000114 __mdiff
08017f20 g     O .rodata	00000008 TIM6_PSC_fields
08007200 g     F .text	0000004e .hidden __aeabi_d2iz
08015b98 g     O .rodata	00000008 RTC_BKP15R_fields
08010480 g     O .rodata	00000020 PWR_registers
08016fa0 g     O .rodata	00000020 Flash_SR_fields
08018588 g     O .rodata	00000008 ADC1_JDR2_fields
08012fb8 g     O .rodata	00000008 RTC_BKP20R_fields
20000004 g     O .data	00000004 __ctype_ptr__
08011540 g     O .rodata	00000008 DMA1_CNDTR6_fields
0800ddc0 g     O .rodata	00000100 CAN_F19R2_fields
0800c158  w    F .text	00000002 I2C2_ER_IRQHandler
08012518 g     O .rodata	00000040 ADC1_2_CCR_fields
0800c158  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800dcd8 g     O .rodata	000000e0 DAC_registers
080186a8 g     O .rodata	00000080 GPIOA_OSPEEDR_fields
0801b444 g     O .rodata	00000030 TIM8_CCMR2_Input_fields
08003590 g     F .text	00000002 __sfp_lock_release
0800dc60 g     O .rodata	00000048 TIM17_BDTR_fields
08014ad8 g     O .rodata	00000020 CAN_RDH1R_fields
08013f90 g     O .rodata	00000060 TIM2_CCER_fields
08017c20 g     O .rodata	00000010 DAC_DHR8RD_fields
08007c50 g     F .text	00000020 fetch_string_arg
0800b8a0 g     F .text	00000068 BSP_LED_Init
08012780 g     O .rodata	00000080 GPIOB_MODER_fields
0801c638 g     O .parsetable	0000000c CmdDumpE
0801ba54 g     O .rodata	00000010 PLLMULFactorTable
08010830 g     O .rodata	00000098 USART1_CR3_fields
08008238 g     F .text	00000050 DecodeField
080177e0 g     O .rodata	00000020 CAN_RI0R_fields
0800c158  w    F .text	00000002 TIM8_BRK_IRQHandler
0800f248 g     O .rodata	00000020 DBGMCU_APB2FZ_fields
0800ea18 g     O .rodata	00000008 TIM1_PSC_fields
08008338 g     F .text	00000048 DecodePrintPeripherals
08012558 g     O .rodata	00000038 TIM15_CCER_fields
0800c61c g     O .rodata	00000101 _ctype_
08014800 g     O .rodata	00000008 DMA1_CMAR7_fields
08007564  w    F .text	00000002 .hidden __aeabi_idiv0
080071d4 g     F .text	0000002c .hidden __unorddf2
080113b0 g     O .rodata	00000020 CAN_RI1R_fields
08018018 g     O .rodata	00000028 SYSCFG_CFGR2_fields
08012010 g     O .rodata	00000088 RCC_CIR_fields
0801c68c g     O .parsetable	0000000c CmdStatsE
0800c158  w    F .text	00000002 FLASH_IRQHandler
08012350 g     O .rodata	00000008 TIM15_DMAR_fields
08018040 g     O .rodata	00000010 EXTI_FTSR2_fields
08012400 g     O .rodata	00000100 CAN_F10R2_fields
080105b8 g     O .rodata	00000020 NVIC_IPR3_fields
08007868 g     F .text	00000118 CMD_GPIO_TOGGLE
08018238 g     O .rodata	00000008 DMA1_CNDTR1_fields
0800ef88 g     O .rodata	00000028 I2C1_TIMEOUTR_fields
0800e608 g     O .rodata	00000048 TIM15_BDTR_fields
0800b610 g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20001370 g     O .bss	00000100 USBD_StrDesc
08007f84 g     F .text	000000e8 TerminalOutputBufferWrite
0800c158  w    F .text	00000002 BusFault_Handler
0800c158  w    F .text	00000002 USART1_IRQHandler
08012590 g     O .rodata	00000050 COMP_COMP1_CSR_fields
0801b7fc g     O .rodata	00000048 TIM8_EGR_fields
08003cb4 g     F .text	00000088 __smakebuf_r
08012e58 g     O .rodata	00000040 TIM15_SR_fields
08000700 g     F .text	000000dc strlen
08010578 g     O .rodata	00000040 RCC_APB2ENR_fields
0800c158  w    F .text	00000002 SPI3_IRQHandler
08007160 g     F .text	00000010 .hidden __aeabi_cdcmpeq
080070c4 g     F .text	0000008a .hidden __gedf2
20001ce0 g     O .bss	0000003c TimHandle
08014468 g     O .rodata	00000060 DMA1_CCR3_fields
0800fe18 g     O .rodata	00000048 TIM1_CR1_fields
08017240 g     O .rodata	00000018 IWDG_SR_fields
08017fa8 g     O .rodata	00000050 USB_FS_USB_EP6R_fields
080151a8 g     O .rodata	00000110 TIM16_registers
0800a186  w    F .text	00000002 HAL_PCDEx_SetConnectionState
08012250 g     O .rodata	00000100 TIM17_registers
0800a4cc g     F .text	00000128 HAL_I2C_Mem_Write
08010c88 g     O .rodata	00000098 TIM1_CCER_fields
200008c4 g     O .data	00000004 __wctomb
08013890 g     O .rodata	00000100 CAN_F3R2_fields
0800f4d8 g     O .rodata	00000080 DAC_CR_fields
0800c158  w    F .text	00000002 I2C1_ER_IRQHandler
080056f4 g     F .text	00000012 __sprint_r
0800f0c8 g     O .rodata	00000050 USB_FS_USB_EP7R_fields
08012a20 g     O .rodata	00000088 I2C1_ISR_fields
0800d9c0 g     O .rodata	00000060 TIM1_CCMR2_Output_fields
0800ec00 g     O .rodata	00000020 NVIC_IPR8_fields
0801ba44 g     O .rodata	00000010 PredivFactorTable
08018050 g     O .rodata	00000008 TSC_IOG3CR_fields
08006bf8 g     F .text	0000003a .hidden __aeabi_f2d
0800b5de g     F .text	0000000e USBD_LL_PrepareReceive
08010ed0 g     O .rodata	00000008 DMA1_CNDTR3_fields
0800bed0 g     F .text	0000002c L3GD20_RebootCmd
0800e398 g     O .rodata	00000100 CAN_F27R1_fields
08013240 g     O .rodata	00000010 TSC_IER_fields
08012170 g     O .rodata	000000e0 CAN_FFA1R_fields
08010d20 g     O .rodata	00000010 TIM8_CNT_fields
08006900 g     F .text	00000030 _wctomb_r
08012500 g     O .rodata	00000008 ADC1_AWD3CR_fields
08018220 g     O .rodata	00000008 RTC_BKP25R_fields
08013628 g     O .rodata	00000100 TSC_IOCCR_fields
08014200 g     O .rodata	00000080 OPAMP_OPAMP3_CR_fields
0800b384 g     F .text	0000000c USBD_CDC_SetRxBuffer
0801b374 g     O .rodata	000000d0 EXTI_SWIER1_fields
08006938 g     F .text	0000027a .hidden __subdf3
0800dbc0 g     O .rodata	00000008 TIM16_ARR_fields
08012fa8 g     O .rodata	00000010 DBGMCU_IDCODE_fields
080009a8 g     F .text	00001728 _vfprintf_r
0800472c g     F .text	0000005a __lo0bits
08014ee0 g     O .rodata	00000020 EXTI_IMR2_fields
080164e0 g     O .rodata	00000008 TIM6_EGR_fields
08014850 g     O .rodata	00000008 SPI1_RXCRCR_fields
0801b664 g     O .rodata	00000008 I2C1_PECR_fields
080098a6 g     F .text	000000fa HAL_PCD_EP_Receive
0801b23c g     O .rodata	00000018 ADC1_OFR3_fields
0800fd58 g     O .rodata	00000058 COMP_COMP6_CSR_fields
08013ab8 g     O .rodata	00000008 RTC_BKP1R_fields
08016130 g     O .rodata	00000060 TIM8_CCMR1_Output_fields
08015c58 g     O .rodata	000000b0 GPIOB_registers
08008288 g     F .text	00000064 DecodeRegister
080123b8 g     O .rodata	00000048 TIM8_SMCR_fields
0800818c g     F .text	00000058 DecodeReadRegister
0800df70 g     O .rodata	00000050 CAN_MCR_fields
0800688c g     F .text	00000058 wcrtomb
0800e000 g     O .rodata	00000008 DAC_DOR1_fields
08007f0c g     F .text	0000004c TerminalRead
08010de0 g     O .rodata	00000060 TSC_CR_fields
0800ef80 g     O .rodata	00000008 TIM2_DMAR_fields
0800dca8 g     O .rodata	00000030 TIM8_CCMR1_Input_fields
0800be02 g     F .text	0000001e LSM303DLHC_AccIT1Enable
0800e4a0 g     O .rodata	00000100 CAN_F12R1_fields
0800c158  w    F .text	00000002 USBWakeUp_IRQHandler
0801b5e4 g     O .rodata	00000008 TIM16_PSC_fields
080106a0 g     O .rodata	00000008 USART1_RDR_fields
08014818 g     O .rodata	00000038 RCC_BDCR_fields
080020d0 g     F .text	00000018 vfprintf
080168c8 g     O .rodata	00000010 TIM17_DCR_fields
08018958 g     O .rodata	00000008 NVIC_ISPR1_fields
0800e7f8 g     O .rodata	00000008 NVIC_ICPR2_fields
0801c614 g     O .parsetable	0000000c CmdAccelE
08018058 g     O .rodata	00000100 CAN_F21R2_fields
0800b374 g     F .text	00000010 USBD_CDC_SetTxBuffer
080067f8 g     F .text	00000040 fputwc
0800f128 g     O .rodata	00000070 SYSCFG_registers
08012800 g     O .rodata	00000080 OPAMP_OPAMP4_CR_fields
08003d4c g     F .text	00000010 free
08003594 g     F .text	00000002 __sinit_lock_acquire
0800c158  w    F .text	00000002 DMA2_Channel3_IRQHandler
08012d48 g     O .rodata	000000d0 EXTI_FTSR1_fields
0800b6dc g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
08012680 g     O .rodata	00000100 CAN_F7R1_fields
080045d4 g     F .text	00000080 __multadd
0800ac1c g     F .text	0000005a USBD_LL_SetupStage
080045c0 g     F .text	00000012 _Bfree
0800766c g     F .text	0000000a Error_Handler
08017228 g     O .rodata	00000010 WWDG_CR_fields
0800c158  w    F .text	00000002 EXTI2_TSC_IRQHandler
0800f0c0 g     O .rodata	00000008 NVIC_STIR_fields
0800c158  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
08015c08 g     O .rodata	00000050 TIM8_CCMR3_Output_fields



Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c2:	4805      	ldr	r0, [pc, #20]	; (80001d8 <deregister_tm_clones+0x18>)
 80001c4:	1a1b      	subs	r3, r3, r0
 80001c6:	2b06      	cmp	r3, #6
 80001c8:	d902      	bls.n	80001d0 <deregister_tm_clones+0x10>
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <deregister_tm_clones+0x1c>)
 80001cc:	b103      	cbz	r3, 80001d0 <deregister_tm_clones+0x10>
 80001ce:	4718      	bx	r3
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000ac3 	.word	0x20000ac3
 80001d8:	20000ac0 	.word	0x20000ac0
 80001dc:	00000000 	.word	0x00000000

080001e0 <register_tm_clones>:
 80001e0:	4905      	ldr	r1, [pc, #20]	; (80001f8 <register_tm_clones+0x18>)
 80001e2:	4806      	ldr	r0, [pc, #24]	; (80001fc <register_tm_clones+0x1c>)
 80001e4:	1a09      	subs	r1, r1, r0
 80001e6:	1089      	asrs	r1, r1, #2
 80001e8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001ec:	1049      	asrs	r1, r1, #1
 80001ee:	d002      	beq.n	80001f6 <register_tm_clones+0x16>
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <register_tm_clones+0x20>)
 80001f2:	b103      	cbz	r3, 80001f6 <register_tm_clones+0x16>
 80001f4:	4718      	bx	r3
 80001f6:	4770      	bx	lr
 80001f8:	20000ac0 	.word	0x20000ac0
 80001fc:	20000ac0 	.word	0x20000ac0
 8000200:	00000000 	.word	0x00000000

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c06      	ldr	r4, [pc, #24]	; (8000220 <__do_global_dtors_aux+0x1c>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	b943      	cbnz	r3, 800021e <__do_global_dtors_aux+0x1a>
 800020c:	f7ff ffd8 	bl	80001c0 <deregister_tm_clones>
 8000210:	4b04      	ldr	r3, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x20>)
 8000212:	b113      	cbz	r3, 800021a <__do_global_dtors_aux+0x16>
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <__do_global_dtors_aux+0x24>)
 8000216:	f3af 8000 	nop.w
 800021a:	2301      	movs	r3, #1
 800021c:	7023      	strb	r3, [r4, #0]
 800021e:	bd10      	pop	{r4, pc}
 8000220:	20000ac0 	.word	0x20000ac0
 8000224:	00000000 	.word	0x00000000
 8000228:	0800c170 	.word	0x0800c170

0800022c <frame_dummy>:
 800022c:	b508      	push	{r3, lr}
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <frame_dummy+0x24>)
 8000230:	b11b      	cbz	r3, 800023a <frame_dummy+0xe>
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <frame_dummy+0x28>)
 8000234:	4808      	ldr	r0, [pc, #32]	; (8000258 <frame_dummy+0x2c>)
 8000236:	f3af 8000 	nop.w
 800023a:	4808      	ldr	r0, [pc, #32]	; (800025c <frame_dummy+0x30>)
 800023c:	6803      	ldr	r3, [r0, #0]
 800023e:	b913      	cbnz	r3, 8000246 <frame_dummy+0x1a>
 8000240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000244:	e7cc      	b.n	80001e0 <register_tm_clones>
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <frame_dummy+0x34>)
 8000248:	2b00      	cmp	r3, #0
 800024a:	d0f9      	beq.n	8000240 <frame_dummy+0x14>
 800024c:	4798      	blx	r3
 800024e:	e7f7      	b.n	8000240 <frame_dummy+0x14>
 8000250:	00000000 	.word	0x00000000
 8000254:	20000ac4 	.word	0x20000ac4
 8000258:	0800c170 	.word	0x0800c170
 800025c:	20000ac0 	.word	0x20000ac0
 8000260:	00000000 	.word	0x00000000

08000264 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 8000264:	b500      	push	{lr}
    push {r1}
 8000266:	b402      	push	{r1}
    push {r0-r7}
 8000268:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r0, =0
 800026a:	2000      	movs	r0, #0
    bl   BSP_LED_Toggle           @@ call BSP function
 800026c:	f00b fb68 	bl	800b940 <BSP_LED_Toggle>
    pop  {r0-r7}
 8000270:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 8000272:	4909      	ldr	r1, [pc, #36]	; (8000298 <my_Init+0x4>)
    ldr  r0, [r1]
 8000274:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 8000276:	bc02      	pop	{r1}
    pop  {pc}
 8000278:	bd00      	pop	{pc}
 800027a:	bf00      	nop

0800027c <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 800027c:	b500      	push	{lr}
    push {r0-r1}
 800027e:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 8000280:	4905      	ldr	r1, [pc, #20]	; (8000298 <my_Init+0x4>)
    ldr  r0, [r1]
 8000282:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 8000284:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000288:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 800028a:	bc03      	pop	{r0, r1}
    pop  {pc}
 800028c:	bd00      	pop	{pc}
 800028e:	bf00      	nop

08000290 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000290:	b500      	push	{lr}
    pop  {pc}
 8000292:	bd00      	pop	{pc}

08000294 <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 8000294:	b500      	push	{lr}
    pop  {pc}
 8000296:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000298:	20000000 	.word	0x20000000

0800029c <atexit>:
 800029c:	2300      	movs	r3, #0
 800029e:	4601      	mov	r1, r0
 80002a0:	461a      	mov	r2, r3
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 bfba 	b.w	800221c <__register_exitproc>

080002a8 <__errno>:
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <__errno+0x8>)
 80002aa:	6818      	ldr	r0, [r3, #0]
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000008 	.word	0x20000008

080002b4 <__libc_fini_array>:
 80002b4:	b538      	push	{r3, r4, r5, lr}
 80002b6:	4d07      	ldr	r5, [pc, #28]	; (80002d4 <__libc_fini_array+0x20>)
 80002b8:	4c07      	ldr	r4, [pc, #28]	; (80002d8 <__libc_fini_array+0x24>)
 80002ba:	1b2c      	subs	r4, r5, r4
 80002bc:	10a4      	asrs	r4, r4, #2
 80002be:	d005      	beq.n	80002cc <__libc_fini_array+0x18>
 80002c0:	3c01      	subs	r4, #1
 80002c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80002c6:	4798      	blx	r3
 80002c8:	2c00      	cmp	r4, #0
 80002ca:	d1f9      	bne.n	80002c0 <__libc_fini_array+0xc>
 80002cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80002d0:	f00b bf54 	b.w	800c17c <_fini>
 80002d4:	0801bb54 	.word	0x0801bb54
 80002d8:	0801bb50 	.word	0x0801bb50

080002dc <__libc_init_array>:
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	4e0f      	ldr	r6, [pc, #60]	; (800031c <__libc_init_array+0x40>)
 80002e0:	4d0f      	ldr	r5, [pc, #60]	; (8000320 <__libc_init_array+0x44>)
 80002e2:	1b76      	subs	r6, r6, r5
 80002e4:	10b6      	asrs	r6, r6, #2
 80002e6:	bf18      	it	ne
 80002e8:	2400      	movne	r4, #0
 80002ea:	d005      	beq.n	80002f8 <__libc_init_array+0x1c>
 80002ec:	3401      	adds	r4, #1
 80002ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f2:	4798      	blx	r3
 80002f4:	42a6      	cmp	r6, r4
 80002f6:	d1f9      	bne.n	80002ec <__libc_init_array+0x10>
 80002f8:	4e0a      	ldr	r6, [pc, #40]	; (8000324 <__libc_init_array+0x48>)
 80002fa:	4d0b      	ldr	r5, [pc, #44]	; (8000328 <__libc_init_array+0x4c>)
 80002fc:	1b76      	subs	r6, r6, r5
 80002fe:	f00b ff37 	bl	800c170 <_init>
 8000302:	10b6      	asrs	r6, r6, #2
 8000304:	bf18      	it	ne
 8000306:	2400      	movne	r4, #0
 8000308:	d006      	beq.n	8000318 <__libc_init_array+0x3c>
 800030a:	3401      	adds	r4, #1
 800030c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000310:	4798      	blx	r3
 8000312:	42a6      	cmp	r6, r4
 8000314:	d1f9      	bne.n	800030a <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	bd70      	pop	{r4, r5, r6, pc}
 800031a:	bf00      	nop
 800031c:	0801bb48 	.word	0x0801bb48
 8000320:	0801bb48 	.word	0x0801bb48
 8000324:	0801bb50 	.word	0x0801bb50
 8000328:	0801bb48 	.word	0x0801bb48

0800032c <memset>:
 800032c:	b470      	push	{r4, r5, r6}
 800032e:	0784      	lsls	r4, r0, #30
 8000330:	d046      	beq.n	80003c0 <memset+0x94>
 8000332:	1e54      	subs	r4, r2, #1
 8000334:	2a00      	cmp	r2, #0
 8000336:	d041      	beq.n	80003bc <memset+0x90>
 8000338:	b2cd      	uxtb	r5, r1
 800033a:	4603      	mov	r3, r0
 800033c:	e002      	b.n	8000344 <memset+0x18>
 800033e:	1e62      	subs	r2, r4, #1
 8000340:	b3e4      	cbz	r4, 80003bc <memset+0x90>
 8000342:	4614      	mov	r4, r2
 8000344:	f803 5b01 	strb.w	r5, [r3], #1
 8000348:	079a      	lsls	r2, r3, #30
 800034a:	d1f8      	bne.n	800033e <memset+0x12>
 800034c:	2c03      	cmp	r4, #3
 800034e:	d92e      	bls.n	80003ae <memset+0x82>
 8000350:	b2cd      	uxtb	r5, r1
 8000352:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000356:	2c0f      	cmp	r4, #15
 8000358:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800035c:	d919      	bls.n	8000392 <memset+0x66>
 800035e:	f103 0210 	add.w	r2, r3, #16
 8000362:	4626      	mov	r6, r4
 8000364:	3e10      	subs	r6, #16
 8000366:	2e0f      	cmp	r6, #15
 8000368:	f842 5c10 	str.w	r5, [r2, #-16]
 800036c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8000370:	f842 5c08 	str.w	r5, [r2, #-8]
 8000374:	f842 5c04 	str.w	r5, [r2, #-4]
 8000378:	f102 0210 	add.w	r2, r2, #16
 800037c:	d8f2      	bhi.n	8000364 <memset+0x38>
 800037e:	f1a4 0210 	sub.w	r2, r4, #16
 8000382:	f022 020f 	bic.w	r2, r2, #15
 8000386:	f004 040f 	and.w	r4, r4, #15
 800038a:	3210      	adds	r2, #16
 800038c:	2c03      	cmp	r4, #3
 800038e:	4413      	add	r3, r2
 8000390:	d90d      	bls.n	80003ae <memset+0x82>
 8000392:	461e      	mov	r6, r3
 8000394:	4622      	mov	r2, r4
 8000396:	3a04      	subs	r2, #4
 8000398:	2a03      	cmp	r2, #3
 800039a:	f846 5b04 	str.w	r5, [r6], #4
 800039e:	d8fa      	bhi.n	8000396 <memset+0x6a>
 80003a0:	1f22      	subs	r2, r4, #4
 80003a2:	f022 0203 	bic.w	r2, r2, #3
 80003a6:	3204      	adds	r2, #4
 80003a8:	4413      	add	r3, r2
 80003aa:	f004 0403 	and.w	r4, r4, #3
 80003ae:	b12c      	cbz	r4, 80003bc <memset+0x90>
 80003b0:	b2c9      	uxtb	r1, r1
 80003b2:	441c      	add	r4, r3
 80003b4:	f803 1b01 	strb.w	r1, [r3], #1
 80003b8:	42a3      	cmp	r3, r4
 80003ba:	d1fb      	bne.n	80003b4 <memset+0x88>
 80003bc:	bc70      	pop	{r4, r5, r6}
 80003be:	4770      	bx	lr
 80003c0:	4614      	mov	r4, r2
 80003c2:	4603      	mov	r3, r0
 80003c4:	e7c2      	b.n	800034c <memset+0x20>
 80003c6:	bf00      	nop

080003c8 <_printf_r>:
 80003c8:	b40e      	push	{r1, r2, r3}
 80003ca:	b500      	push	{lr}
 80003cc:	b082      	sub	sp, #8
 80003ce:	ab03      	add	r3, sp, #12
 80003d0:	6881      	ldr	r1, [r0, #8]
 80003d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80003d6:	9301      	str	r3, [sp, #4]
 80003d8:	f000 fae6 	bl	80009a8 <_vfprintf_r>
 80003dc:	b002      	add	sp, #8
 80003de:	f85d eb04 	ldr.w	lr, [sp], #4
 80003e2:	b003      	add	sp, #12
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop

080003e8 <printf>:
 80003e8:	b40f      	push	{r0, r1, r2, r3}
 80003ea:	b500      	push	{lr}
 80003ec:	4907      	ldr	r1, [pc, #28]	; (800040c <printf+0x24>)
 80003ee:	b083      	sub	sp, #12
 80003f0:	ab04      	add	r3, sp, #16
 80003f2:	6808      	ldr	r0, [r1, #0]
 80003f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80003f8:	6881      	ldr	r1, [r0, #8]
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	f000 fad4 	bl	80009a8 <_vfprintf_r>
 8000400:	b003      	add	sp, #12
 8000402:	f85d eb04 	ldr.w	lr, [sp], #4
 8000406:	b004      	add	sp, #16
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	20000008 	.word	0x20000008

08000410 <_putchar_r>:
 8000410:	6882      	ldr	r2, [r0, #8]
 8000412:	f004 bd3f 	b.w	8004e94 <_putc_r>
 8000416:	bf00      	nop

08000418 <putchar>:
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <putchar+0x10>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4601      	mov	r1, r0
 800041e:	689a      	ldr	r2, [r3, #8]
 8000420:	4618      	mov	r0, r3
 8000422:	f004 bd37 	b.w	8004e94 <_putc_r>
 8000426:	bf00      	nop
 8000428:	20000008 	.word	0x20000008

0800042c <_puts_r>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	4605      	mov	r5, r0
 8000430:	b089      	sub	sp, #36	; 0x24
 8000432:	4608      	mov	r0, r1
 8000434:	460c      	mov	r4, r1
 8000436:	f000 f963 	bl	8000700 <strlen>
 800043a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800043c:	4f14      	ldr	r7, [pc, #80]	; (8000490 <_puts_r+0x64>)
 800043e:	9404      	str	r4, [sp, #16]
 8000440:	2601      	movs	r6, #1
 8000442:	1c44      	adds	r4, r0, #1
 8000444:	a904      	add	r1, sp, #16
 8000446:	2202      	movs	r2, #2
 8000448:	9403      	str	r4, [sp, #12]
 800044a:	9005      	str	r0, [sp, #20]
 800044c:	68ac      	ldr	r4, [r5, #8]
 800044e:	9706      	str	r7, [sp, #24]
 8000450:	9607      	str	r6, [sp, #28]
 8000452:	9101      	str	r1, [sp, #4]
 8000454:	9202      	str	r2, [sp, #8]
 8000456:	b1b3      	cbz	r3, 8000486 <_puts_r+0x5a>
 8000458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800045c:	049a      	lsls	r2, r3, #18
 800045e:	d406      	bmi.n	800046e <_puts_r+0x42>
 8000460:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000462:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800046a:	81a3      	strh	r3, [r4, #12]
 800046c:	6662      	str	r2, [r4, #100]	; 0x64
 800046e:	4621      	mov	r1, r4
 8000470:	4628      	mov	r0, r5
 8000472:	aa01      	add	r2, sp, #4
 8000474:	f003 f9dc 	bl	8003830 <__sfvwrite_r>
 8000478:	2800      	cmp	r0, #0
 800047a:	bf14      	ite	ne
 800047c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000480:	200a      	moveq	r0, #10
 8000482:	b009      	add	sp, #36	; 0x24
 8000484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000486:	4628      	mov	r0, r5
 8000488:	f003 f87c 	bl	8003584 <__sinit>
 800048c:	e7e4      	b.n	8000458 <_puts_r+0x2c>
 800048e:	bf00      	nop
 8000490:	0801badc 	.word	0x0801badc

08000494 <puts>:
 8000494:	4b02      	ldr	r3, [pc, #8]	; (80004a0 <puts+0xc>)
 8000496:	4601      	mov	r1, r0
 8000498:	6818      	ldr	r0, [r3, #0]
 800049a:	f7ff bfc7 	b.w	800042c <_puts_r>
 800049e:	bf00      	nop
 80004a0:	20000008 	.word	0x20000008

080004a4 <setvbuf>:
 80004a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004a8:	4c51      	ldr	r4, [pc, #324]	; (80005f0 <setvbuf+0x14c>)
 80004aa:	6825      	ldr	r5, [r4, #0]
 80004ac:	b083      	sub	sp, #12
 80004ae:	4604      	mov	r4, r0
 80004b0:	460f      	mov	r7, r1
 80004b2:	4690      	mov	r8, r2
 80004b4:	461e      	mov	r6, r3
 80004b6:	b115      	cbz	r5, 80004be <setvbuf+0x1a>
 80004b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d079      	beq.n	80005b2 <setvbuf+0x10e>
 80004be:	f1b8 0f02 	cmp.w	r8, #2
 80004c2:	d004      	beq.n	80004ce <setvbuf+0x2a>
 80004c4:	f1b8 0f01 	cmp.w	r8, #1
 80004c8:	d87f      	bhi.n	80005ca <setvbuf+0x126>
 80004ca:	2e00      	cmp	r6, #0
 80004cc:	db7d      	blt.n	80005ca <setvbuf+0x126>
 80004ce:	4621      	mov	r1, r4
 80004d0:	4628      	mov	r0, r5
 80004d2:	f002 ff47 	bl	8003364 <_fflush_r>
 80004d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80004d8:	b141      	cbz	r1, 80004ec <setvbuf+0x48>
 80004da:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80004de:	4299      	cmp	r1, r3
 80004e0:	d002      	beq.n	80004e8 <setvbuf+0x44>
 80004e2:	4628      	mov	r0, r5
 80004e4:	f003 f8bc 	bl	8003660 <_free_r>
 80004e8:	2300      	movs	r3, #0
 80004ea:	6323      	str	r3, [r4, #48]	; 0x30
 80004ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80004f0:	2200      	movs	r2, #0
 80004f2:	61a2      	str	r2, [r4, #24]
 80004f4:	6062      	str	r2, [r4, #4]
 80004f6:	061a      	lsls	r2, r3, #24
 80004f8:	d454      	bmi.n	80005a4 <setvbuf+0x100>
 80004fa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80004fe:	f023 0303 	bic.w	r3, r3, #3
 8000502:	f1b8 0f02 	cmp.w	r8, #2
 8000506:	81a3      	strh	r3, [r4, #12]
 8000508:	d039      	beq.n	800057e <setvbuf+0xda>
 800050a:	ab01      	add	r3, sp, #4
 800050c:	466a      	mov	r2, sp
 800050e:	4621      	mov	r1, r4
 8000510:	4628      	mov	r0, r5
 8000512:	f003 fb9f 	bl	8003c54 <__swhatbuf_r>
 8000516:	89a3      	ldrh	r3, [r4, #12]
 8000518:	4318      	orrs	r0, r3
 800051a:	81a0      	strh	r0, [r4, #12]
 800051c:	b326      	cbz	r6, 8000568 <setvbuf+0xc4>
 800051e:	b327      	cbz	r7, 800056a <setvbuf+0xc6>
 8000520:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000522:	2b00      	cmp	r3, #0
 8000524:	d04d      	beq.n	80005c2 <setvbuf+0x11e>
 8000526:	9b00      	ldr	r3, [sp, #0]
 8000528:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800052c:	6027      	str	r7, [r4, #0]
 800052e:	429e      	cmp	r6, r3
 8000530:	bf1c      	itt	ne
 8000532:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
 8000536:	81a0      	strhne	r0, [r4, #12]
 8000538:	f1b8 0f01 	cmp.w	r8, #1
 800053c:	bf08      	it	eq
 800053e:	f040 0001 	orreq.w	r0, r0, #1
 8000542:	b283      	uxth	r3, r0
 8000544:	bf08      	it	eq
 8000546:	81a0      	strheq	r0, [r4, #12]
 8000548:	f003 0008 	and.w	r0, r3, #8
 800054c:	b280      	uxth	r0, r0
 800054e:	6127      	str	r7, [r4, #16]
 8000550:	6166      	str	r6, [r4, #20]
 8000552:	b318      	cbz	r0, 800059c <setvbuf+0xf8>
 8000554:	f013 0001 	ands.w	r0, r3, #1
 8000558:	d02f      	beq.n	80005ba <setvbuf+0x116>
 800055a:	2000      	movs	r0, #0
 800055c:	4276      	negs	r6, r6
 800055e:	61a6      	str	r6, [r4, #24]
 8000560:	60a0      	str	r0, [r4, #8]
 8000562:	b003      	add	sp, #12
 8000564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000568:	9e00      	ldr	r6, [sp, #0]
 800056a:	4630      	mov	r0, r6
 800056c:	f003 fbe6 	bl	8003d3c <malloc>
 8000570:	4607      	mov	r7, r0
 8000572:	b368      	cbz	r0, 80005d0 <setvbuf+0x12c>
 8000574:	89a3      	ldrh	r3, [r4, #12]
 8000576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057a:	81a3      	strh	r3, [r4, #12]
 800057c:	e7d0      	b.n	8000520 <setvbuf+0x7c>
 800057e:	2000      	movs	r0, #0
 8000580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	2500      	movs	r5, #0
 800058a:	2101      	movs	r1, #1
 800058c:	81a3      	strh	r3, [r4, #12]
 800058e:	60a5      	str	r5, [r4, #8]
 8000590:	6022      	str	r2, [r4, #0]
 8000592:	6122      	str	r2, [r4, #16]
 8000594:	6161      	str	r1, [r4, #20]
 8000596:	b003      	add	sp, #12
 8000598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800059c:	60a0      	str	r0, [r4, #8]
 800059e:	b003      	add	sp, #12
 80005a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80005a4:	6921      	ldr	r1, [r4, #16]
 80005a6:	4628      	mov	r0, r5
 80005a8:	f003 f85a 	bl	8003660 <_free_r>
 80005ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80005b0:	e7a3      	b.n	80004fa <setvbuf+0x56>
 80005b2:	4628      	mov	r0, r5
 80005b4:	f002 ffe6 	bl	8003584 <__sinit>
 80005b8:	e781      	b.n	80004be <setvbuf+0x1a>
 80005ba:	60a6      	str	r6, [r4, #8]
 80005bc:	b003      	add	sp, #12
 80005be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80005c2:	4628      	mov	r0, r5
 80005c4:	f002 ffde 	bl	8003584 <__sinit>
 80005c8:	e7ad      	b.n	8000526 <setvbuf+0x82>
 80005ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005ce:	e7e2      	b.n	8000596 <setvbuf+0xf2>
 80005d0:	f8dd 9000 	ldr.w	r9, [sp]
 80005d4:	45b1      	cmp	r9, r6
 80005d6:	d006      	beq.n	80005e6 <setvbuf+0x142>
 80005d8:	4648      	mov	r0, r9
 80005da:	f003 fbaf 	bl	8003d3c <malloc>
 80005de:	4607      	mov	r7, r0
 80005e0:	b108      	cbz	r0, 80005e6 <setvbuf+0x142>
 80005e2:	464e      	mov	r6, r9
 80005e4:	e7c6      	b.n	8000574 <setvbuf+0xd0>
 80005e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80005ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005ee:	e7c7      	b.n	8000580 <setvbuf+0xdc>
 80005f0:	20000008 	.word	0x20000008

080005f4 <strcasecmp>:
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <strcasecmp+0x48>)
 80005f6:	b430      	push	{r4, r5}
 80005f8:	681d      	ldr	r5, [r3, #0]
 80005fa:	f810 4b01 	ldrb.w	r4, [r0], #1
 80005fe:	192b      	adds	r3, r5, r4
 8000600:	4622      	mov	r2, r4
 8000602:	785b      	ldrb	r3, [r3, #1]
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	2b01      	cmp	r3, #1
 800060a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800060e:	bf08      	it	eq
 8000610:	f104 0220 	addeq.w	r2, r4, #32
 8000614:	18ec      	adds	r4, r5, r3
 8000616:	7864      	ldrb	r4, [r4, #1]
 8000618:	f004 0403 	and.w	r4, r4, #3
 800061c:	2c01      	cmp	r4, #1
 800061e:	d006      	beq.n	800062e <strcasecmp+0x3a>
 8000620:	1ad2      	subs	r2, r2, r3
 8000622:	d101      	bne.n	8000628 <strcasecmp+0x34>
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1e8      	bne.n	80005fa <strcasecmp+0x6>
 8000628:	4610      	mov	r0, r2
 800062a:	bc30      	pop	{r4, r5}
 800062c:	4770      	bx	lr
 800062e:	3320      	adds	r3, #32
 8000630:	1ad2      	subs	r2, r2, r3
 8000632:	d0e2      	beq.n	80005fa <strcasecmp+0x6>
 8000634:	4610      	mov	r0, r2
 8000636:	bc30      	pop	{r4, r5}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000004 	.word	0x20000004

08000640 <strcpy>:
 8000640:	ea80 0201 	eor.w	r2, r0, r1
 8000644:	4684      	mov	ip, r0
 8000646:	f012 0f03 	tst.w	r2, #3
 800064a:	d14f      	bne.n	80006ec <strcpy+0xac>
 800064c:	f011 0f03 	tst.w	r1, #3
 8000650:	d132      	bne.n	80006b8 <strcpy+0x78>
 8000652:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8000656:	f011 0f04 	tst.w	r1, #4
 800065a:	f851 3b04 	ldr.w	r3, [r1], #4
 800065e:	d00b      	beq.n	8000678 <strcpy+0x38>
 8000660:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8000664:	439a      	bics	r2, r3
 8000666:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800066a:	bf04      	itt	eq
 800066c:	f84c 3b04 	streq.w	r3, [ip], #4
 8000670:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000674:	d116      	bne.n	80006a4 <strcpy+0x64>
 8000676:	bf00      	nop
 8000678:	f851 4b04 	ldr.w	r4, [r1], #4
 800067c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8000680:	439a      	bics	r2, r3
 8000682:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000686:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800068a:	d10b      	bne.n	80006a4 <strcpy+0x64>
 800068c:	f84c 3b04 	str.w	r3, [ip], #4
 8000690:	43a2      	bics	r2, r4
 8000692:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000696:	bf04      	itt	eq
 8000698:	f851 3b04 	ldreq.w	r3, [r1], #4
 800069c:	f84c 4b04 	streq.w	r4, [ip], #4
 80006a0:	d0ea      	beq.n	8000678 <strcpy+0x38>
 80006a2:	4623      	mov	r3, r4
 80006a4:	f80c 3b01 	strb.w	r3, [ip], #1
 80006a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80006ac:	ea4f 2333 	mov.w	r3, r3, ror #8
 80006b0:	d1f8      	bne.n	80006a4 <strcpy+0x64>
 80006b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	f011 0f01 	tst.w	r1, #1
 80006bc:	d006      	beq.n	80006cc <strcpy+0x8c>
 80006be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80006c2:	f80c 2b01 	strb.w	r2, [ip], #1
 80006c6:	2a00      	cmp	r2, #0
 80006c8:	bf08      	it	eq
 80006ca:	4770      	bxeq	lr
 80006cc:	f011 0f02 	tst.w	r1, #2
 80006d0:	d0bf      	beq.n	8000652 <strcpy+0x12>
 80006d2:	f831 2b02 	ldrh.w	r2, [r1], #2
 80006d6:	f012 0fff 	tst.w	r2, #255	; 0xff
 80006da:	bf16      	itet	ne
 80006dc:	f82c 2b02 	strhne.w	r2, [ip], #2
 80006e0:	f88c 2000 	strbeq.w	r2, [ip]
 80006e4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 80006e8:	d1b3      	bne.n	8000652 <strcpy+0x12>
 80006ea:	4770      	bx	lr
 80006ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80006f0:	f80c 2b01 	strb.w	r2, [ip], #1
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	d1f9      	bne.n	80006ec <strcpy+0xac>
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	0000      	movs	r0, r0
	...

08000700 <strlen>:
 8000700:	f890 f000 	pld	[r0]
 8000704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000708:	f020 0107 	bic.w	r1, r0, #7
 800070c:	f06f 0c00 	mvn.w	ip, #0
 8000710:	f010 0407 	ands.w	r4, r0, #7
 8000714:	f891 f020 	pld	[r1, #32]
 8000718:	f040 8049 	bne.w	80007ae <strlen+0xae>
 800071c:	f04f 0400 	mov.w	r4, #0
 8000720:	f06f 0007 	mvn.w	r0, #7
 8000724:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000728:	f891 f040 	pld	[r1, #64]	; 0x40
 800072c:	f100 0008 	add.w	r0, r0, #8
 8000730:	fa82 f24c 	uadd8	r2, r2, ip
 8000734:	faa4 f28c 	sel	r2, r4, ip
 8000738:	fa83 f34c 	uadd8	r3, r3, ip
 800073c:	faa2 f38c 	sel	r3, r2, ip
 8000740:	bb4b      	cbnz	r3, 8000796 <strlen+0x96>
 8000742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000746:	fa82 f24c 	uadd8	r2, r2, ip
 800074a:	f100 0008 	add.w	r0, r0, #8
 800074e:	faa4 f28c 	sel	r2, r4, ip
 8000752:	fa83 f34c 	uadd8	r3, r3, ip
 8000756:	faa2 f38c 	sel	r3, r2, ip
 800075a:	b9e3      	cbnz	r3, 8000796 <strlen+0x96>
 800075c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000760:	fa82 f24c 	uadd8	r2, r2, ip
 8000764:	f100 0008 	add.w	r0, r0, #8
 8000768:	faa4 f28c 	sel	r2, r4, ip
 800076c:	fa83 f34c 	uadd8	r3, r3, ip
 8000770:	faa2 f38c 	sel	r3, r2, ip
 8000774:	b97b      	cbnz	r3, 8000796 <strlen+0x96>
 8000776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800077a:	f101 0120 	add.w	r1, r1, #32
 800077e:	fa82 f24c 	uadd8	r2, r2, ip
 8000782:	f100 0008 	add.w	r0, r0, #8
 8000786:	faa4 f28c 	sel	r2, r4, ip
 800078a:	fa83 f34c 	uadd8	r3, r3, ip
 800078e:	faa2 f38c 	sel	r3, r2, ip
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0c6      	beq.n	8000724 <strlen+0x24>
 8000796:	2a00      	cmp	r2, #0
 8000798:	bf04      	itt	eq
 800079a:	3004      	addeq	r0, #4
 800079c:	461a      	moveq	r2, r3
 800079e:	ba12      	rev	r2, r2
 80007a0:	fab2 f282 	clz	r2, r2
 80007a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80007a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80007ac:	4770      	bx	lr
 80007ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007b2:	f004 0503 	and.w	r5, r4, #3
 80007b6:	f1c4 0000 	rsb	r0, r4, #0
 80007ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80007be:	f014 0f04 	tst.w	r4, #4
 80007c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80007c6:	fa0c f505 	lsl.w	r5, ip, r5
 80007ca:	ea62 0205 	orn	r2, r2, r5
 80007ce:	bf1c      	itt	ne
 80007d0:	ea63 0305 	ornne	r3, r3, r5
 80007d4:	4662      	movne	r2, ip
 80007d6:	f04f 0400 	mov.w	r4, #0
 80007da:	e7a9      	b.n	8000730 <strlen+0x30>

080007dc <strtok>:
 80007dc:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <strtok+0xc>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	2301      	movs	r3, #1
 80007e2:	325c      	adds	r2, #92	; 0x5c
 80007e4:	f000 b802 	b.w	80007ec <__strtok_r>
 80007e8:	20000008 	.word	0x20000008

080007ec <__strtok_r>:
 80007ec:	b4f0      	push	{r4, r5, r6, r7}
 80007ee:	b320      	cbz	r0, 800083a <__strtok_r+0x4e>
 80007f0:	4607      	mov	r7, r0
 80007f2:	460d      	mov	r5, r1
 80007f4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80007f8:	e001      	b.n	80007fe <__strtok_r+0x12>
 80007fa:	42a6      	cmp	r6, r4
 80007fc:	d016      	beq.n	800082c <__strtok_r+0x40>
 80007fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000802:	2c00      	cmp	r4, #0
 8000804:	d1f9      	bne.n	80007fa <__strtok_r+0xe>
 8000806:	b1ee      	cbz	r6, 8000844 <__strtok_r+0x58>
 8000808:	463e      	mov	r6, r7
 800080a:	460c      	mov	r4, r1
 800080c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000810:	e000      	b.n	8000814 <__strtok_r+0x28>
 8000812:	b173      	cbz	r3, 8000832 <__strtok_r+0x46>
 8000814:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000818:	429d      	cmp	r5, r3
 800081a:	d1fa      	bne.n	8000812 <__strtok_r+0x26>
 800081c:	b15d      	cbz	r5, 8000836 <__strtok_r+0x4a>
 800081e:	2300      	movs	r3, #0
 8000820:	703b      	strb	r3, [r7, #0]
 8000822:	6016      	str	r6, [r2, #0]
 8000824:	4606      	mov	r6, r0
 8000826:	4630      	mov	r0, r6
 8000828:	bcf0      	pop	{r4, r5, r6, r7}
 800082a:	4770      	bx	lr
 800082c:	b163      	cbz	r3, 8000848 <__strtok_r+0x5c>
 800082e:	4638      	mov	r0, r7
 8000830:	e7de      	b.n	80007f0 <__strtok_r+0x4>
 8000832:	4637      	mov	r7, r6
 8000834:	e7e8      	b.n	8000808 <__strtok_r+0x1c>
 8000836:	462e      	mov	r6, r5
 8000838:	e7f3      	b.n	8000822 <__strtok_r+0x36>
 800083a:	6810      	ldr	r0, [r2, #0]
 800083c:	2800      	cmp	r0, #0
 800083e:	d1d7      	bne.n	80007f0 <__strtok_r+0x4>
 8000840:	4606      	mov	r6, r0
 8000842:	e7f0      	b.n	8000826 <__strtok_r+0x3a>
 8000844:	6016      	str	r6, [r2, #0]
 8000846:	e7ee      	b.n	8000826 <__strtok_r+0x3a>
 8000848:	6017      	str	r7, [r2, #0]
 800084a:	4606      	mov	r6, r0
 800084c:	7003      	strb	r3, [r0, #0]
 800084e:	e7ea      	b.n	8000826 <__strtok_r+0x3a>

08000850 <strtok_r>:
 8000850:	2301      	movs	r3, #1
 8000852:	f7ff bfcb 	b.w	80007ec <__strtok_r>
 8000856:	bf00      	nop

08000858 <_strtoul_r>:
 8000858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800085c:	4c49      	ldr	r4, [pc, #292]	; (8000984 <_strtoul_r+0x12c>)
 800085e:	4682      	mov	sl, r0
 8000860:	460e      	mov	r6, r1
 8000862:	f8d4 e000 	ldr.w	lr, [r4]
 8000866:	e000      	b.n	800086a <_strtoul_r+0x12>
 8000868:	4626      	mov	r6, r4
 800086a:	4634      	mov	r4, r6
 800086c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000870:	eb0e 0005 	add.w	r0, lr, r5
 8000874:	7840      	ldrb	r0, [r0, #1]
 8000876:	f000 0008 	and.w	r0, r0, #8
 800087a:	f000 0cff 	and.w	ip, r0, #255	; 0xff
 800087e:	2800      	cmp	r0, #0
 8000880:	d1f2      	bne.n	8000868 <_strtoul_r+0x10>
 8000882:	2d2d      	cmp	r5, #45	; 0x2d
 8000884:	d054      	beq.n	8000930 <_strtoul_r+0xd8>
 8000886:	2d2b      	cmp	r5, #43	; 0x2b
 8000888:	bf04      	itt	eq
 800088a:	7875      	ldrbeq	r5, [r6, #1]
 800088c:	1cb4      	addeq	r4, r6, #2
 800088e:	b15b      	cbz	r3, 80008a8 <_strtoul_r+0x50>
 8000890:	2b10      	cmp	r3, #16
 8000892:	d05e      	beq.n	8000952 <_strtoul_r+0xfa>
 8000894:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8000898:	fbb8 f8f3 	udiv	r8, r8, r3
 800089c:	fb03 fb08 	mul.w	fp, r3, r8
 80008a0:	ea6f 0b0b 	mvn.w	fp, fp
 80008a4:	4699      	mov	r9, r3
 80008a6:	e007      	b.n	80008b8 <_strtoul_r+0x60>
 80008a8:	2d30      	cmp	r5, #48	; 0x30
 80008aa:	d046      	beq.n	800093a <_strtoul_r+0xe2>
 80008ac:	230a      	movs	r3, #10
 80008ae:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8000988 <_strtoul_r+0x130>
 80008b2:	4699      	mov	r9, r3
 80008b4:	f04f 0b05 	mov.w	fp, #5
 80008b8:	2700      	movs	r7, #0
 80008ba:	4638      	mov	r0, r7
 80008bc:	e00c      	b.n	80008d8 <_strtoul_r+0x80>
 80008be:	3d30      	subs	r5, #48	; 0x30
 80008c0:	42ab      	cmp	r3, r5
 80008c2:	dd19      	ble.n	80008f8 <_strtoul_r+0xa0>
 80008c4:	1c7e      	adds	r6, r7, #1
 80008c6:	d005      	beq.n	80008d4 <_strtoul_r+0x7c>
 80008c8:	4540      	cmp	r0, r8
 80008ca:	d822      	bhi.n	8000912 <_strtoul_r+0xba>
 80008cc:	d01f      	beq.n	800090e <_strtoul_r+0xb6>
 80008ce:	fb09 5000 	mla	r0, r9, r0, r5
 80008d2:	2701      	movs	r7, #1
 80008d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80008d8:	eb0e 0605 	add.w	r6, lr, r5
 80008dc:	7876      	ldrb	r6, [r6, #1]
 80008de:	f016 0f04 	tst.w	r6, #4
 80008e2:	d1ec      	bne.n	80008be <_strtoul_r+0x66>
 80008e4:	f016 0603 	ands.w	r6, r6, #3
 80008e8:	d006      	beq.n	80008f8 <_strtoul_r+0xa0>
 80008ea:	2e01      	cmp	r6, #1
 80008ec:	bf14      	ite	ne
 80008ee:	2657      	movne	r6, #87	; 0x57
 80008f0:	2637      	moveq	r6, #55	; 0x37
 80008f2:	1bad      	subs	r5, r5, r6
 80008f4:	42ab      	cmp	r3, r5
 80008f6:	dce5      	bgt.n	80008c4 <_strtoul_r+0x6c>
 80008f8:	2f00      	cmp	r7, #0
 80008fa:	db0f      	blt.n	800091c <_strtoul_r+0xc4>
 80008fc:	f1bc 0f00 	cmp.w	ip, #0
 8000900:	d000      	beq.n	8000904 <_strtoul_r+0xac>
 8000902:	4240      	negs	r0, r0
 8000904:	b142      	cbz	r2, 8000918 <_strtoul_r+0xc0>
 8000906:	b97f      	cbnz	r7, 8000928 <_strtoul_r+0xd0>
 8000908:	6011      	str	r1, [r2, #0]
 800090a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800090e:	455d      	cmp	r5, fp
 8000910:	dddd      	ble.n	80008ce <_strtoul_r+0x76>
 8000912:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000916:	e7dd      	b.n	80008d4 <_strtoul_r+0x7c>
 8000918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800091c:	2322      	movs	r3, #34	; 0x22
 800091e:	f8ca 3000 	str.w	r3, [sl]
 8000922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000926:	b35a      	cbz	r2, 8000980 <_strtoul_r+0x128>
 8000928:	1e61      	subs	r1, r4, #1
 800092a:	6011      	str	r1, [r2, #0]
 800092c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000930:	1cb4      	adds	r4, r6, #2
 8000932:	7875      	ldrb	r5, [r6, #1]
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e7a9      	b.n	800088e <_strtoul_r+0x36>
 800093a:	7823      	ldrb	r3, [r4, #0]
 800093c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8000940:	2b58      	cmp	r3, #88	; 0x58
 8000942:	d00d      	beq.n	8000960 <_strtoul_r+0x108>
 8000944:	2308      	movs	r3, #8
 8000946:	4699      	mov	r9, r3
 8000948:	f04f 0b07 	mov.w	fp, #7
 800094c:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8000950:	e7b2      	b.n	80008b8 <_strtoul_r+0x60>
 8000952:	2d30      	cmp	r5, #48	; 0x30
 8000954:	d10e      	bne.n	8000974 <_strtoul_r+0x11c>
 8000956:	7820      	ldrb	r0, [r4, #0]
 8000958:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800095c:	2858      	cmp	r0, #88	; 0x58
 800095e:	d109      	bne.n	8000974 <_strtoul_r+0x11c>
 8000960:	f04f 0910 	mov.w	r9, #16
 8000964:	7865      	ldrb	r5, [r4, #1]
 8000966:	464b      	mov	r3, r9
 8000968:	f04f 0b0f 	mov.w	fp, #15
 800096c:	3402      	adds	r4, #2
 800096e:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8000972:	e7a1      	b.n	80008b8 <_strtoul_r+0x60>
 8000974:	f04f 0b0f 	mov.w	fp, #15
 8000978:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 800097c:	4699      	mov	r9, r3
 800097e:	e79b      	b.n	80008b8 <_strtoul_r+0x60>
 8000980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000984:	20000004 	.word	0x20000004
 8000988:	19999999 	.word	0x19999999

0800098c <strtoul>:
 800098c:	b410      	push	{r4}
 800098e:	4c04      	ldr	r4, [pc, #16]	; (80009a0 <strtoul+0x14>)
 8000990:	4613      	mov	r3, r2
 8000992:	460a      	mov	r2, r1
 8000994:	4601      	mov	r1, r0
 8000996:	6820      	ldr	r0, [r4, #0]
 8000998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800099c:	f7ff bf5c 	b.w	8000858 <_strtoul_r>
 80009a0:	20000008 	.word	0x20000008
 80009a4:	00000000 	.word	0x00000000

080009a8 <_vfprintf_r>:
 80009a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009ac:	b0c1      	sub	sp, #260	; 0x104
 80009ae:	461c      	mov	r4, r3
 80009b0:	9104      	str	r1, [sp, #16]
 80009b2:	4616      	mov	r6, r2
 80009b4:	4605      	mov	r5, r0
 80009b6:	9006      	str	r0, [sp, #24]
 80009b8:	f003 f93c 	bl	8003c34 <_localeconv_r>
 80009bc:	6803      	ldr	r3, [r0, #0]
 80009be:	9313      	str	r3, [sp, #76]	; 0x4c
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe9d 	bl	8000700 <strlen>
 80009c6:	940a      	str	r4, [sp, #40]	; 0x28
 80009c8:	9012      	str	r0, [sp, #72]	; 0x48
 80009ca:	b11d      	cbz	r5, 80009d4 <_vfprintf_r+0x2c>
 80009cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 8124 	beq.w	8000c1c <_vfprintf_r+0x274>
 80009d4:	9804      	ldr	r0, [sp, #16]
 80009d6:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 80009da:	b293      	uxth	r3, r2
 80009dc:	0499      	lsls	r1, r3, #18
 80009de:	d407      	bmi.n	80009f0 <_vfprintf_r+0x48>
 80009e0:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80009e2:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 80009e6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80009ea:	8183      	strh	r3, [r0, #12]
 80009ec:	6641      	str	r1, [r0, #100]	; 0x64
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	071a      	lsls	r2, r3, #28
 80009f2:	f140 80de 	bpl.w	8000bb2 <_vfprintf_r+0x20a>
 80009f6:	9a04      	ldr	r2, [sp, #16]
 80009f8:	6912      	ldr	r2, [r2, #16]
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	f000 80d9 	beq.w	8000bb2 <_vfprintf_r+0x20a>
 8000a00:	f003 031a 	and.w	r3, r3, #26
 8000a04:	2b0a      	cmp	r3, #10
 8000a06:	f000 80e2 	beq.w	8000bce <_vfprintf_r+0x226>
 8000a0a:	ed9f 7b87 	vldr	d7, [pc, #540]	; 8000c28 <_vfprintf_r+0x280>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9325      	str	r3, [sp, #148]	; 0x94
 8000a12:	930e      	str	r3, [sp, #56]	; 0x38
 8000a14:	9324      	str	r3, [sp, #144]	; 0x90
 8000a16:	9315      	str	r3, [sp, #84]	; 0x54
 8000a18:	9307      	str	r3, [sp, #28]
 8000a1a:	4b85      	ldr	r3, [pc, #532]	; (8000c30 <_vfprintf_r+0x288>)
 8000a1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8000a20:	f103 0a10 	add.w	sl, r3, #16
 8000a24:	ab30      	add	r3, sp, #192	; 0xc0
 8000a26:	9323      	str	r3, [sp, #140]	; 0x8c
 8000a28:	4699      	mov	r9, r3
 8000a2a:	46b0      	mov	r8, r6
 8000a2c:	f898 3000 	ldrb.w	r3, [r8]
 8000a30:	4644      	mov	r4, r8
 8000a32:	b1eb      	cbz	r3, 8000a70 <_vfprintf_r+0xc8>
 8000a34:	2b25      	cmp	r3, #37	; 0x25
 8000a36:	d102      	bne.n	8000a3e <_vfprintf_r+0x96>
 8000a38:	e01a      	b.n	8000a70 <_vfprintf_r+0xc8>
 8000a3a:	2b25      	cmp	r3, #37	; 0x25
 8000a3c:	d003      	beq.n	8000a46 <_vfprintf_r+0x9e>
 8000a3e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1f9      	bne.n	8000a3a <_vfprintf_r+0x92>
 8000a46:	ebc8 0504 	rsb	r5, r8, r4
 8000a4a:	b18d      	cbz	r5, 8000a70 <_vfprintf_r+0xc8>
 8000a4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000a4e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8000a50:	f8c9 8000 	str.w	r8, [r9]
 8000a54:	3301      	adds	r3, #1
 8000a56:	442a      	add	r2, r5
 8000a58:	2b07      	cmp	r3, #7
 8000a5a:	f8c9 5004 	str.w	r5, [r9, #4]
 8000a5e:	9225      	str	r2, [sp, #148]	; 0x94
 8000a60:	9324      	str	r3, [sp, #144]	; 0x90
 8000a62:	f300 80c2 	bgt.w	8000bea <_vfprintf_r+0x242>
 8000a66:	f109 0908 	add.w	r9, r9, #8
 8000a6a:	9b07      	ldr	r3, [sp, #28]
 8000a6c:	442b      	add	r3, r5
 8000a6e:	9307      	str	r3, [sp, #28]
 8000a70:	7823      	ldrb	r3, [r4, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 80c2 	beq.w	8000bfc <_vfprintf_r+0x254>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8000a80:	4619      	mov	r1, r3
 8000a82:	9308      	str	r3, [sp, #32]
 8000a84:	9303      	str	r3, [sp, #12]
 8000a86:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8000a8a:	7863      	ldrb	r3, [r4, #1]
 8000a8c:	f104 0801 	add.w	r8, r4, #1
 8000a90:	465d      	mov	r5, fp
 8000a92:	f108 0801 	add.w	r8, r8, #1
 8000a96:	f1a3 0020 	sub.w	r0, r3, #32
 8000a9a:	2858      	cmp	r0, #88	; 0x58
 8000a9c:	f200 8458 	bhi.w	8001350 <_vfprintf_r+0x9a8>
 8000aa0:	e8df f010 	tbh	[pc, r0, lsl #1]
 8000aa4:	0456040e 	.word	0x0456040e
 8000aa8:	04170456 	.word	0x04170456
 8000aac:	04560456 	.word	0x04560456
 8000ab0:	04560456 	.word	0x04560456
 8000ab4:	04560456 	.word	0x04560456
 8000ab8:	04480361 	.word	0x04480361
 8000abc:	005d0456 	.word	0x005d0456
 8000ac0:	04560108 	.word	0x04560108
 8000ac4:	036f0124 	.word	0x036f0124
 8000ac8:	036f036f 	.word	0x036f036f
 8000acc:	036f036f 	.word	0x036f036f
 8000ad0:	036f036f 	.word	0x036f036f
 8000ad4:	036f036f 	.word	0x036f036f
 8000ad8:	04560456 	.word	0x04560456
 8000adc:	04560456 	.word	0x04560456
 8000ae0:	04560456 	.word	0x04560456
 8000ae4:	04560456 	.word	0x04560456
 8000ae8:	04560456 	.word	0x04560456
 8000aec:	039c037f 	.word	0x039c037f
 8000af0:	039c0456 	.word	0x039c0456
 8000af4:	04560456 	.word	0x04560456
 8000af8:	04560456 	.word	0x04560456
 8000afc:	045603ea 	.word	0x045603ea
 8000b00:	012b0456 	.word	0x012b0456
 8000b04:	04560456 	.word	0x04560456
 8000b08:	04560456 	.word	0x04560456
 8000b0c:	01540456 	.word	0x01540456
 8000b10:	04560456 	.word	0x04560456
 8000b14:	045602b3 	.word	0x045602b3
 8000b18:	04560456 	.word	0x04560456
 8000b1c:	04560456 	.word	0x04560456
 8000b20:	04560456 	.word	0x04560456
 8000b24:	04560456 	.word	0x04560456
 8000b28:	02f40456 	.word	0x02f40456
 8000b2c:	039c030e 	.word	0x039c030e
 8000b30:	039c039c 	.word	0x039c039c
 8000b34:	030e033e 	.word	0x030e033e
 8000b38:	04560456 	.word	0x04560456
 8000b3c:	04560345 	.word	0x04560345
 8000b40:	00ca034f 	.word	0x00ca034f
 8000b44:	041f0064 	.word	0x041f0064
 8000b48:	04270456 	.word	0x04270456
 8000b4c:	03f10456 	.word	0x03f10456
 8000b50:	04560456 	.word	0x04560456
 8000b54:	03f9      	.short	0x03f9
 8000b56:	9808      	ldr	r0, [sp, #32]
 8000b58:	930a      	str	r3, [sp, #40]	; 0x28
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	9008      	str	r0, [sp, #32]
 8000b5e:	9b03      	ldr	r3, [sp, #12]
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	9303      	str	r3, [sp, #12]
 8000b66:	f898 3000 	ldrb.w	r3, [r8]
 8000b6a:	e792      	b.n	8000a92 <_vfprintf_r+0xea>
 8000b6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000b6e:	46ab      	mov	fp, r5
 8000b70:	2100      	movs	r1, #0
 8000b72:	6804      	ldr	r4, [r0, #0]
 8000b74:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8000b78:	1d07      	adds	r7, r0, #4
 8000b7a:	9803      	ldr	r0, [sp, #12]
 8000b7c:	2330      	movs	r3, #48	; 0x30
 8000b7e:	2278      	movs	r2, #120	; 0x78
 8000b80:	458b      	cmp	fp, r1
 8000b82:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8000b86:	f04f 0500 	mov.w	r5, #0
 8000b8a:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 8000b8e:	f040 0302 	orr.w	r3, r0, #2
 8000b92:	f2c0 83fa 	blt.w	800138a <_vfprintf_r+0x9e2>
 8000b96:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	9303      	str	r3, [sp, #12]
 8000ba0:	ea54 0305 	orrs.w	r3, r4, r5
 8000ba4:	970a      	str	r7, [sp, #40]	; 0x28
 8000ba6:	f000 83cb 	beq.w	8001340 <_vfprintf_r+0x998>
 8000baa:	460f      	mov	r7, r1
 8000bac:	920d      	str	r2, [sp, #52]	; 0x34
 8000bae:	4821      	ldr	r0, [pc, #132]	; (8000c34 <_vfprintf_r+0x28c>)
 8000bb0:	e25c      	b.n	800106c <_vfprintf_r+0x6c4>
 8000bb2:	9904      	ldr	r1, [sp, #16]
 8000bb4:	9806      	ldr	r0, [sp, #24]
 8000bb6:	f001 facd 	bl	8002154 <__swsetup_r>
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	f041 803c 	bne.w	8001c38 <_vfprintf_r+0x1290>
 8000bc0:	9b04      	ldr	r3, [sp, #16]
 8000bc2:	899b      	ldrh	r3, [r3, #12]
 8000bc4:	f003 031a 	and.w	r3, r3, #26
 8000bc8:	2b0a      	cmp	r3, #10
 8000bca:	f47f af1e 	bne.w	8000a0a <_vfprintf_r+0x62>
 8000bce:	9904      	ldr	r1, [sp, #16]
 8000bd0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	f6ff af18 	blt.w	8000a0a <_vfprintf_r+0x62>
 8000bda:	4623      	mov	r3, r4
 8000bdc:	4632      	mov	r2, r6
 8000bde:	9806      	ldr	r0, [sp, #24]
 8000be0:	f001 fa82 	bl	80020e8 <__sbprintf>
 8000be4:	b041      	add	sp, #260	; 0x104
 8000be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bea:	aa23      	add	r2, sp, #140	; 0x8c
 8000bec:	9904      	ldr	r1, [sp, #16]
 8000bee:	9806      	ldr	r0, [sp, #24]
 8000bf0:	f004 fd80 	bl	80056f4 <__sprint_r>
 8000bf4:	b948      	cbnz	r0, 8000c0a <_vfprintf_r+0x262>
 8000bf6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8000bfa:	e736      	b.n	8000a6a <_vfprintf_r+0xc2>
 8000bfc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8000bfe:	b123      	cbz	r3, 8000c0a <_vfprintf_r+0x262>
 8000c00:	9806      	ldr	r0, [sp, #24]
 8000c02:	9904      	ldr	r1, [sp, #16]
 8000c04:	aa23      	add	r2, sp, #140	; 0x8c
 8000c06:	f004 fd75 	bl	80056f4 <__sprint_r>
 8000c0a:	9b04      	ldr	r3, [sp, #16]
 8000c0c:	899b      	ldrh	r3, [r3, #12]
 8000c0e:	0659      	lsls	r1, r3, #25
 8000c10:	f101 8012 	bmi.w	8001c38 <_vfprintf_r+0x1290>
 8000c14:	9807      	ldr	r0, [sp, #28]
 8000c16:	b041      	add	sp, #260	; 0x104
 8000c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c1c:	9806      	ldr	r0, [sp, #24]
 8000c1e:	f002 fcb1 	bl	8003584 <__sinit>
 8000c22:	e6d7      	b.n	80009d4 <_vfprintf_r+0x2c>
 8000c24:	f3af 8000 	nop.w
	...
 8000c30:	0800c724 	.word	0x0800c724
 8000c34:	0801bb04 	.word	0x0801bb04
 8000c38:	930d      	str	r3, [sp, #52]	; 0x34
 8000c3a:	46ab      	mov	fp, r5
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	f041 822b 	bne.w	8002098 <_vfprintf_r+0x16f0>
 8000c42:	9a03      	ldr	r2, [sp, #12]
 8000c44:	f012 0320 	ands.w	r3, r2, #32
 8000c48:	d064      	beq.n	8000d14 <_vfprintf_r+0x36c>
 8000c4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000c4c:	3707      	adds	r7, #7
 8000c4e:	f027 0307 	bic.w	r3, r7, #7
 8000c52:	2700      	movs	r7, #0
 8000c54:	f103 0108 	add.w	r1, r3, #8
 8000c58:	45bb      	cmp	fp, r7
 8000c5a:	910a      	str	r1, [sp, #40]	; 0x28
 8000c5c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000c60:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8000c64:	f2c0 86ba 	blt.w	80019dc <_vfprintf_r+0x1034>
 8000c68:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8000c6c:	9303      	str	r3, [sp, #12]
 8000c6e:	ea54 0305 	orrs.w	r3, r4, r5
 8000c72:	f000 8382 	beq.w	800137a <_vfprintf_r+0x9d2>
 8000c76:	ae30      	add	r6, sp, #192	; 0xc0
 8000c78:	08e2      	lsrs	r2, r4, #3
 8000c7a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8000c7e:	08e9      	lsrs	r1, r5, #3
 8000c80:	f004 0307 	and.w	r3, r4, #7
 8000c84:	460d      	mov	r5, r1
 8000c86:	4614      	mov	r4, r2
 8000c88:	3330      	adds	r3, #48	; 0x30
 8000c8a:	ea54 0205 	orrs.w	r2, r4, r5
 8000c8e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8000c92:	d1f1      	bne.n	8000c78 <_vfprintf_r+0x2d0>
 8000c94:	9a03      	ldr	r2, [sp, #12]
 8000c96:	07d2      	lsls	r2, r2, #31
 8000c98:	f140 8096 	bpl.w	8000dc8 <_vfprintf_r+0x420>
 8000c9c:	2b30      	cmp	r3, #48	; 0x30
 8000c9e:	f000 8093 	beq.w	8000dc8 <_vfprintf_r+0x420>
 8000ca2:	2230      	movs	r2, #48	; 0x30
 8000ca4:	1e73      	subs	r3, r6, #1
 8000ca6:	f806 2c01 	strb.w	r2, [r6, #-1]
 8000caa:	aa30      	add	r2, sp, #192	; 0xc0
 8000cac:	1ad2      	subs	r2, r2, r3
 8000cae:	9209      	str	r2, [sp, #36]	; 0x24
 8000cb0:	461e      	mov	r6, r3
 8000cb2:	e08c      	b.n	8000dce <_vfprintf_r+0x426>
 8000cb4:	f898 3000 	ldrb.w	r3, [r8]
 8000cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8000cba:	f108 0401 	add.w	r4, r8, #1
 8000cbe:	f001 81c9 	beq.w	8002054 <_vfprintf_r+0x16ac>
 8000cc2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8000cc6:	2809      	cmp	r0, #9
 8000cc8:	bf98      	it	ls
 8000cca:	2500      	movls	r5, #0
 8000ccc:	f201 8166 	bhi.w	8001f9c <_vfprintf_r+0x15f4>
 8000cd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000cd4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000cd8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8000cdc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8000ce0:	2809      	cmp	r0, #9
 8000ce2:	d9f5      	bls.n	8000cd0 <_vfprintf_r+0x328>
 8000ce4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8000ce8:	46a0      	mov	r8, r4
 8000cea:	e6d4      	b.n	8000a96 <_vfprintf_r+0xee>
 8000cec:	9b03      	ldr	r3, [sp, #12]
 8000cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf2:	9303      	str	r3, [sp, #12]
 8000cf4:	f898 3000 	ldrb.w	r3, [r8]
 8000cf8:	e6cb      	b.n	8000a92 <_vfprintf_r+0xea>
 8000cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8000cfc:	46ab      	mov	fp, r5
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	f041 81d2 	bne.w	80020a8 <_vfprintf_r+0x1700>
 8000d04:	9b03      	ldr	r3, [sp, #12]
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	9303      	str	r3, [sp, #12]
 8000d0c:	9a03      	ldr	r2, [sp, #12]
 8000d0e:	f012 0320 	ands.w	r3, r2, #32
 8000d12:	d19a      	bne.n	8000c4a <_vfprintf_r+0x2a2>
 8000d14:	9903      	ldr	r1, [sp, #12]
 8000d16:	f011 0210 	ands.w	r2, r1, #16
 8000d1a:	f000 8634 	beq.w	8001986 <_vfprintf_r+0xfde>
 8000d1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000d20:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8000d24:	f1bb 0f00 	cmp.w	fp, #0
 8000d28:	6804      	ldr	r4, [r0, #0]
 8000d2a:	f100 0704 	add.w	r7, r0, #4
 8000d2e:	f04f 0500 	mov.w	r5, #0
 8000d32:	f2c0 8652 	blt.w	80019da <_vfprintf_r+0x1032>
 8000d36:	460a      	mov	r2, r1
 8000d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d3c:	9203      	str	r2, [sp, #12]
 8000d3e:	ea54 0205 	orrs.w	r2, r4, r5
 8000d42:	970a      	str	r7, [sp, #40]	; 0x28
 8000d44:	f000 8319 	beq.w	800137a <_vfprintf_r+0x9d2>
 8000d48:	461f      	mov	r7, r3
 8000d4a:	e794      	b.n	8000c76 <_vfprintf_r+0x2ce>
 8000d4c:	930d      	str	r3, [sp, #52]	; 0x34
 8000d4e:	46ab      	mov	fp, r5
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	f041 8199 	bne.w	8002088 <_vfprintf_r+0x16e0>
 8000d56:	9b03      	ldr	r3, [sp, #12]
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	9303      	str	r3, [sp, #12]
 8000d5e:	9a03      	ldr	r2, [sp, #12]
 8000d60:	f012 0320 	ands.w	r3, r2, #32
 8000d64:	f000 84fa 	beq.w	800175c <_vfprintf_r+0xdb4>
 8000d68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000d6a:	3707      	adds	r7, #7
 8000d6c:	f027 0307 	bic.w	r3, r7, #7
 8000d70:	2700      	movs	r7, #0
 8000d72:	f103 0108 	add.w	r1, r3, #8
 8000d76:	45bb      	cmp	fp, r7
 8000d78:	910a      	str	r1, [sp, #40]	; 0x28
 8000d7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000d7e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8000d82:	f2c0 8523 	blt.w	80017cc <_vfprintf_r+0xe24>
 8000d86:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8000d8a:	9303      	str	r3, [sp, #12]
 8000d8c:	ea54 0305 	orrs.w	r3, r4, r5
 8000d90:	f000 81bc 	beq.w	800110c <_vfprintf_r+0x764>
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	bf08      	it	eq
 8000d98:	2c0a      	cmpeq	r4, #10
 8000d9a:	f0c0 851b 	bcc.w	80017d4 <_vfprintf_r+0xe2c>
 8000d9e:	ae30      	add	r6, sp, #192	; 0xc0
 8000da0:	4620      	mov	r0, r4
 8000da2:	4629      	mov	r1, r5
 8000da4:	220a      	movs	r2, #10
 8000da6:	2300      	movs	r3, #0
 8000da8:	f006 fa52 	bl	8007250 <__aeabi_uldivmod>
 8000dac:	3230      	adds	r2, #48	; 0x30
 8000dae:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8000db2:	4620      	mov	r0, r4
 8000db4:	4629      	mov	r1, r5
 8000db6:	2300      	movs	r3, #0
 8000db8:	220a      	movs	r2, #10
 8000dba:	f006 fa49 	bl	8007250 <__aeabi_uldivmod>
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	ea54 0305 	orrs.w	r3, r4, r5
 8000dc6:	d1eb      	bne.n	8000da0 <_vfprintf_r+0x3f8>
 8000dc8:	ab30      	add	r3, sp, #192	; 0xc0
 8000dca:	1b9b      	subs	r3, r3, r6
 8000dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8000dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dd0:	455b      	cmp	r3, fp
 8000dd2:	bfb8      	it	lt
 8000dd4:	465b      	movlt	r3, fp
 8000dd6:	9305      	str	r3, [sp, #20]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ddc:	b117      	cbz	r7, 8000de4 <_vfprintf_r+0x43c>
 8000dde:	9b05      	ldr	r3, [sp, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	9305      	str	r3, [sp, #20]
 8000de4:	9b03      	ldr	r3, [sp, #12]
 8000de6:	f013 0302 	ands.w	r3, r3, #2
 8000dea:	930b      	str	r3, [sp, #44]	; 0x2c
 8000dec:	d002      	beq.n	8000df4 <_vfprintf_r+0x44c>
 8000dee:	9b05      	ldr	r3, [sp, #20]
 8000df0:	3302      	adds	r3, #2
 8000df2:	9305      	str	r3, [sp, #20]
 8000df4:	9b03      	ldr	r3, [sp, #12]
 8000df6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8000dfa:	930c      	str	r3, [sp, #48]	; 0x30
 8000dfc:	f040 82d2 	bne.w	80013a4 <_vfprintf_r+0x9fc>
 8000e00:	9b08      	ldr	r3, [sp, #32]
 8000e02:	9a05      	ldr	r2, [sp, #20]
 8000e04:	1a9d      	subs	r5, r3, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	f340 82cc 	ble.w	80013a4 <_vfprintf_r+0x9fc>
 8000e0c:	2d10      	cmp	r5, #16
 8000e0e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8000e10:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000e12:	4fa8      	ldr	r7, [pc, #672]	; (80010b4 <_vfprintf_r+0x70c>)
 8000e14:	dd27      	ble.n	8000e66 <_vfprintf_r+0x4be>
 8000e16:	9614      	str	r6, [sp, #80]	; 0x50
 8000e18:	4648      	mov	r0, r9
 8000e1a:	2410      	movs	r4, #16
 8000e1c:	46b9      	mov	r9, r7
 8000e1e:	9e04      	ldr	r6, [sp, #16]
 8000e20:	462f      	mov	r7, r5
 8000e22:	9d06      	ldr	r5, [sp, #24]
 8000e24:	e004      	b.n	8000e30 <_vfprintf_r+0x488>
 8000e26:	3f10      	subs	r7, #16
 8000e28:	2f10      	cmp	r7, #16
 8000e2a:	f100 0008 	add.w	r0, r0, #8
 8000e2e:	dd16      	ble.n	8000e5e <_vfprintf_r+0x4b6>
 8000e30:	3201      	adds	r2, #1
 8000e32:	4ba0      	ldr	r3, [pc, #640]	; (80010b4 <_vfprintf_r+0x70c>)
 8000e34:	9224      	str	r2, [sp, #144]	; 0x90
 8000e36:	3110      	adds	r1, #16
 8000e38:	2a07      	cmp	r2, #7
 8000e3a:	9125      	str	r1, [sp, #148]	; 0x94
 8000e3c:	e880 0018 	stmia.w	r0, {r3, r4}
 8000e40:	ddf1      	ble.n	8000e26 <_vfprintf_r+0x47e>
 8000e42:	aa23      	add	r2, sp, #140	; 0x8c
 8000e44:	4631      	mov	r1, r6
 8000e46:	4628      	mov	r0, r5
 8000e48:	f004 fc54 	bl	80056f4 <__sprint_r>
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	f47f aedc 	bne.w	8000c0a <_vfprintf_r+0x262>
 8000e52:	3f10      	subs	r7, #16
 8000e54:	2f10      	cmp	r7, #16
 8000e56:	9925      	ldr	r1, [sp, #148]	; 0x94
 8000e58:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000e5a:	a830      	add	r0, sp, #192	; 0xc0
 8000e5c:	dce8      	bgt.n	8000e30 <_vfprintf_r+0x488>
 8000e5e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8000e60:	463d      	mov	r5, r7
 8000e62:	464f      	mov	r7, r9
 8000e64:	4681      	mov	r9, r0
 8000e66:	3201      	adds	r2, #1
 8000e68:	186c      	adds	r4, r5, r1
 8000e6a:	2a07      	cmp	r2, #7
 8000e6c:	9425      	str	r4, [sp, #148]	; 0x94
 8000e6e:	9224      	str	r2, [sp, #144]	; 0x90
 8000e70:	f8c9 7000 	str.w	r7, [r9]
 8000e74:	f8c9 5004 	str.w	r5, [r9, #4]
 8000e78:	f300 8428 	bgt.w	80016cc <_vfprintf_r+0xd24>
 8000e7c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8000e80:	f109 0908 	add.w	r9, r9, #8
 8000e84:	b177      	cbz	r7, 8000ea4 <_vfprintf_r+0x4fc>
 8000e86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000e88:	3301      	adds	r3, #1
 8000e8a:	3401      	adds	r4, #1
 8000e8c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 8000e90:	2201      	movs	r2, #1
 8000e92:	2b07      	cmp	r3, #7
 8000e94:	9425      	str	r4, [sp, #148]	; 0x94
 8000e96:	9324      	str	r3, [sp, #144]	; 0x90
 8000e98:	e889 0006 	stmia.w	r9, {r1, r2}
 8000e9c:	f300 83a0 	bgt.w	80015e0 <_vfprintf_r+0xc38>
 8000ea0:	f109 0908 	add.w	r9, r9, #8
 8000ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ea6:	b16b      	cbz	r3, 8000ec4 <_vfprintf_r+0x51c>
 8000ea8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000eaa:	3301      	adds	r3, #1
 8000eac:	3402      	adds	r4, #2
 8000eae:	a91c      	add	r1, sp, #112	; 0x70
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	2b07      	cmp	r3, #7
 8000eb4:	9425      	str	r4, [sp, #148]	; 0x94
 8000eb6:	9324      	str	r3, [sp, #144]	; 0x90
 8000eb8:	e889 0006 	stmia.w	r9, {r1, r2}
 8000ebc:	f300 839c 	bgt.w	80015f8 <_vfprintf_r+0xc50>
 8000ec0:	f109 0908 	add.w	r9, r9, #8
 8000ec4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000ec6:	2b80      	cmp	r3, #128	; 0x80
 8000ec8:	f000 82d0 	beq.w	800146c <_vfprintf_r+0xac4>
 8000ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ece:	ebc3 070b 	rsb	r7, r3, fp
 8000ed2:	2f00      	cmp	r7, #0
 8000ed4:	dd33      	ble.n	8000f3e <_vfprintf_r+0x596>
 8000ed6:	4a78      	ldr	r2, [pc, #480]	; (80010b8 <_vfprintf_r+0x710>)
 8000ed8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000eda:	920b      	str	r2, [sp, #44]	; 0x2c
 8000edc:	2f10      	cmp	r7, #16
 8000ede:	dd22      	ble.n	8000f26 <_vfprintf_r+0x57e>
 8000ee0:	4622      	mov	r2, r4
 8000ee2:	f04f 0b10 	mov.w	fp, #16
 8000ee6:	9d06      	ldr	r5, [sp, #24]
 8000ee8:	9c04      	ldr	r4, [sp, #16]
 8000eea:	e004      	b.n	8000ef6 <_vfprintf_r+0x54e>
 8000eec:	3f10      	subs	r7, #16
 8000eee:	2f10      	cmp	r7, #16
 8000ef0:	f109 0908 	add.w	r9, r9, #8
 8000ef4:	dd16      	ble.n	8000f24 <_vfprintf_r+0x57c>
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	3210      	adds	r2, #16
 8000efa:	2b07      	cmp	r3, #7
 8000efc:	9225      	str	r2, [sp, #148]	; 0x94
 8000efe:	9324      	str	r3, [sp, #144]	; 0x90
 8000f00:	e889 0c00 	stmia.w	r9, {sl, fp}
 8000f04:	ddf2      	ble.n	8000eec <_vfprintf_r+0x544>
 8000f06:	aa23      	add	r2, sp, #140	; 0x8c
 8000f08:	4621      	mov	r1, r4
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	f004 fbf2 	bl	80056f4 <__sprint_r>
 8000f10:	2800      	cmp	r0, #0
 8000f12:	f47f ae7a 	bne.w	8000c0a <_vfprintf_r+0x262>
 8000f16:	3f10      	subs	r7, #16
 8000f18:	2f10      	cmp	r7, #16
 8000f1a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8000f1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000f1e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8000f22:	dce8      	bgt.n	8000ef6 <_vfprintf_r+0x54e>
 8000f24:	4614      	mov	r4, r2
 8000f26:	3301      	adds	r3, #1
 8000f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000f2a:	9324      	str	r3, [sp, #144]	; 0x90
 8000f2c:	443c      	add	r4, r7
 8000f2e:	2b07      	cmp	r3, #7
 8000f30:	9425      	str	r4, [sp, #148]	; 0x94
 8000f32:	e889 0084 	stmia.w	r9, {r2, r7}
 8000f36:	f300 8347 	bgt.w	80015c8 <_vfprintf_r+0xc20>
 8000f3a:	f109 0908 	add.w	r9, r9, #8
 8000f3e:	9b03      	ldr	r3, [sp, #12]
 8000f40:	05dd      	lsls	r5, r3, #23
 8000f42:	f100 8231 	bmi.w	80013a8 <_vfprintf_r+0xa00>
 8000f46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000f4a:	f8c9 6000 	str.w	r6, [r9]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	440c      	add	r4, r1
 8000f52:	2b07      	cmp	r3, #7
 8000f54:	9425      	str	r4, [sp, #148]	; 0x94
 8000f56:	f8c9 1004 	str.w	r1, [r9, #4]
 8000f5a:	9324      	str	r3, [sp, #144]	; 0x90
 8000f5c:	f300 831e 	bgt.w	800159c <_vfprintf_r+0xbf4>
 8000f60:	f109 0908 	add.w	r9, r9, #8
 8000f64:	9b03      	ldr	r3, [sp, #12]
 8000f66:	0758      	lsls	r0, r3, #29
 8000f68:	d53f      	bpl.n	8000fea <_vfprintf_r+0x642>
 8000f6a:	9b08      	ldr	r3, [sp, #32]
 8000f6c:	9a05      	ldr	r2, [sp, #20]
 8000f6e:	1a9d      	subs	r5, r3, r2
 8000f70:	2d00      	cmp	r5, #0
 8000f72:	dd3a      	ble.n	8000fea <_vfprintf_r+0x642>
 8000f74:	2d10      	cmp	r5, #16
 8000f76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000f78:	4f4e      	ldr	r7, [pc, #312]	; (80010b4 <_vfprintf_r+0x70c>)
 8000f7a:	dd23      	ble.n	8000fc4 <_vfprintf_r+0x61c>
 8000f7c:	4622      	mov	r2, r4
 8000f7e:	2610      	movs	r6, #16
 8000f80:	f8dd b018 	ldr.w	fp, [sp, #24]
 8000f84:	9c04      	ldr	r4, [sp, #16]
 8000f86:	e004      	b.n	8000f92 <_vfprintf_r+0x5ea>
 8000f88:	3d10      	subs	r5, #16
 8000f8a:	2d10      	cmp	r5, #16
 8000f8c:	f109 0908 	add.w	r9, r9, #8
 8000f90:	dd17      	ble.n	8000fc2 <_vfprintf_r+0x61a>
 8000f92:	3301      	adds	r3, #1
 8000f94:	4947      	ldr	r1, [pc, #284]	; (80010b4 <_vfprintf_r+0x70c>)
 8000f96:	9324      	str	r3, [sp, #144]	; 0x90
 8000f98:	3210      	adds	r2, #16
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	9225      	str	r2, [sp, #148]	; 0x94
 8000f9e:	e889 0042 	stmia.w	r9, {r1, r6}
 8000fa2:	ddf1      	ble.n	8000f88 <_vfprintf_r+0x5e0>
 8000fa4:	aa23      	add	r2, sp, #140	; 0x8c
 8000fa6:	4621      	mov	r1, r4
 8000fa8:	4658      	mov	r0, fp
 8000faa:	f004 fba3 	bl	80056f4 <__sprint_r>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	f47f ae2b 	bne.w	8000c0a <_vfprintf_r+0x262>
 8000fb4:	3d10      	subs	r5, #16
 8000fb6:	2d10      	cmp	r5, #16
 8000fb8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8000fba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000fbc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8000fc0:	dce7      	bgt.n	8000f92 <_vfprintf_r+0x5ea>
 8000fc2:	4614      	mov	r4, r2
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	442c      	add	r4, r5
 8000fc8:	2b07      	cmp	r3, #7
 8000fca:	9425      	str	r4, [sp, #148]	; 0x94
 8000fcc:	9324      	str	r3, [sp, #144]	; 0x90
 8000fce:	f8c9 7000 	str.w	r7, [r9]
 8000fd2:	f8c9 5004 	str.w	r5, [r9, #4]
 8000fd6:	dd08      	ble.n	8000fea <_vfprintf_r+0x642>
 8000fd8:	aa23      	add	r2, sp, #140	; 0x8c
 8000fda:	9904      	ldr	r1, [sp, #16]
 8000fdc:	9806      	ldr	r0, [sp, #24]
 8000fde:	f004 fb89 	bl	80056f4 <__sprint_r>
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	f47f ae11 	bne.w	8000c0a <_vfprintf_r+0x262>
 8000fe8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8000fea:	9b07      	ldr	r3, [sp, #28]
 8000fec:	9a08      	ldr	r2, [sp, #32]
 8000fee:	9905      	ldr	r1, [sp, #20]
 8000ff0:	428a      	cmp	r2, r1
 8000ff2:	bfac      	ite	ge
 8000ff4:	189b      	addge	r3, r3, r2
 8000ff6:	185b      	addlt	r3, r3, r1
 8000ff8:	9307      	str	r3, [sp, #28]
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	f040 82da 	bne.w	80015b4 <_vfprintf_r+0xc0c>
 8001000:	2300      	movs	r3, #0
 8001002:	9324      	str	r3, [sp, #144]	; 0x90
 8001004:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001008:	e510      	b.n	8000a2c <_vfprintf_r+0x84>
 800100a:	930d      	str	r3, [sp, #52]	; 0x34
 800100c:	46ab      	mov	fp, r5
 800100e:	2a00      	cmp	r2, #0
 8001010:	f041 8036 	bne.w	8002080 <_vfprintf_r+0x16d8>
 8001014:	9b03      	ldr	r3, [sp, #12]
 8001016:	4829      	ldr	r0, [pc, #164]	; (80010bc <_vfprintf_r+0x714>)
 8001018:	069c      	lsls	r4, r3, #26
 800101a:	f140 8146 	bpl.w	80012aa <_vfprintf_r+0x902>
 800101e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001020:	3707      	adds	r7, #7
 8001022:	f027 0307 	bic.w	r3, r7, #7
 8001026:	e9d3 4500 	ldrd	r4, r5, [r3]
 800102a:	f103 0208 	add.w	r2, r3, #8
 800102e:	920a      	str	r2, [sp, #40]	; 0x28
 8001030:	9a03      	ldr	r2, [sp, #12]
 8001032:	f012 0701 	ands.w	r7, r2, #1
 8001036:	f000 82eb 	beq.w	8001610 <_vfprintf_r+0xc68>
 800103a:	ea54 0305 	orrs.w	r3, r4, r5
 800103e:	f000 8580 	beq.w	8001b42 <_vfprintf_r+0x119a>
 8001042:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8001046:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 800104a:	2700      	movs	r7, #0
 800104c:	9a03      	ldr	r2, [sp, #12]
 800104e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8001052:	2330      	movs	r3, #48	; 0x30
 8001054:	45bb      	cmp	fp, r7
 8001056:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800105a:	f042 0302 	orr.w	r3, r2, #2
 800105e:	f2c0 8735 	blt.w	8001ecc <_vfprintf_r+0x1524>
 8001062:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	9303      	str	r3, [sp, #12]
 800106c:	ae30      	add	r6, sp, #192	; 0xc0
 800106e:	0923      	lsrs	r3, r4, #4
 8001070:	f004 010f 	and.w	r1, r4, #15
 8001074:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8001078:	092a      	lsrs	r2, r5, #4
 800107a:	461c      	mov	r4, r3
 800107c:	4615      	mov	r5, r2
 800107e:	5c43      	ldrb	r3, [r0, r1]
 8001080:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8001084:	ea54 0305 	orrs.w	r3, r4, r5
 8001088:	d1f1      	bne.n	800106e <_vfprintf_r+0x6c6>
 800108a:	e69d      	b.n	8000dc8 <_vfprintf_r+0x420>
 800108c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800108e:	930d      	str	r3, [sp, #52]	; 0x34
 8001090:	680a      	ldr	r2, [r1, #0]
 8001092:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8001096:	2300      	movs	r3, #0
 8001098:	460a      	mov	r2, r1
 800109a:	461f      	mov	r7, r3
 800109c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80010a0:	3204      	adds	r2, #4
 80010a2:	2301      	movs	r3, #1
 80010a4:	9305      	str	r3, [sp, #20]
 80010a6:	46bb      	mov	fp, r7
 80010a8:	970f      	str	r7, [sp, #60]	; 0x3c
 80010aa:	920a      	str	r2, [sp, #40]	; 0x28
 80010ac:	9309      	str	r3, [sp, #36]	; 0x24
 80010ae:	ae26      	add	r6, sp, #152	; 0x98
 80010b0:	e698      	b.n	8000de4 <_vfprintf_r+0x43c>
 80010b2:	bf00      	nop
 80010b4:	0800c724 	.word	0x0800c724
 80010b8:	0800c734 	.word	0x0800c734
 80010bc:	0801baf0 	.word	0x0801baf0
 80010c0:	930d      	str	r3, [sp, #52]	; 0x34
 80010c2:	46ab      	mov	fp, r5
 80010c4:	2a00      	cmp	r2, #0
 80010c6:	f040 87e3 	bne.w	8002090 <_vfprintf_r+0x16e8>
 80010ca:	9b03      	ldr	r3, [sp, #12]
 80010cc:	069b      	lsls	r3, r3, #26
 80010ce:	d574      	bpl.n	80011ba <_vfprintf_r+0x812>
 80010d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80010d2:	3707      	adds	r7, #7
 80010d4:	f027 0707 	bic.w	r7, r7, #7
 80010d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010dc:	f107 0108 	add.w	r1, r7, #8
 80010e0:	910a      	str	r1, [sp, #40]	; 0x28
 80010e2:	4614      	mov	r4, r2
 80010e4:	461d      	mov	r5, r3
 80010e6:	2a00      	cmp	r2, #0
 80010e8:	f173 0300 	sbcs.w	r3, r3, #0
 80010ec:	f2c0 843a 	blt.w	8001964 <_vfprintf_r+0xfbc>
 80010f0:	f1bb 0f00 	cmp.w	fp, #0
 80010f4:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 80010f8:	f2c0 8368 	blt.w	80017cc <_vfprintf_r+0xe24>
 80010fc:	9b03      	ldr	r3, [sp, #12]
 80010fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001102:	9303      	str	r3, [sp, #12]
 8001104:	ea54 0305 	orrs.w	r3, r4, r5
 8001108:	f47f ae44 	bne.w	8000d94 <_vfprintf_r+0x3ec>
 800110c:	f1bb 0f00 	cmp.w	fp, #0
 8001110:	f040 8408 	bne.w	8001924 <_vfprintf_r+0xf7c>
 8001114:	f04f 0b00 	mov.w	fp, #0
 8001118:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800111c:	ae30      	add	r6, sp, #192	; 0xc0
 800111e:	e656      	b.n	8000dce <_vfprintf_r+0x426>
 8001120:	9b03      	ldr	r3, [sp, #12]
 8001122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001126:	9303      	str	r3, [sp, #12]
 8001128:	f898 3000 	ldrb.w	r3, [r8]
 800112c:	e4b1      	b.n	8000a92 <_vfprintf_r+0xea>
 800112e:	f898 3000 	ldrb.w	r3, [r8]
 8001132:	2b6c      	cmp	r3, #108	; 0x6c
 8001134:	f000 85d0 	beq.w	8001cd8 <_vfprintf_r+0x1330>
 8001138:	9803      	ldr	r0, [sp, #12]
 800113a:	f040 0010 	orr.w	r0, r0, #16
 800113e:	9003      	str	r0, [sp, #12]
 8001140:	e4a7      	b.n	8000a92 <_vfprintf_r+0xea>
 8001142:	2a00      	cmp	r2, #0
 8001144:	f040 8798 	bne.w	8002078 <_vfprintf_r+0x16d0>
 8001148:	9b03      	ldr	r3, [sp, #12]
 800114a:	069f      	lsls	r7, r3, #26
 800114c:	f140 84e2 	bpl.w	8001b14 <_vfprintf_r+0x116c>
 8001150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001152:	9907      	ldr	r1, [sp, #28]
 8001154:	6813      	ldr	r3, [r2, #0]
 8001156:	17cd      	asrs	r5, r1, #31
 8001158:	4608      	mov	r0, r1
 800115a:	3204      	adds	r2, #4
 800115c:	4629      	mov	r1, r5
 800115e:	920a      	str	r2, [sp, #40]	; 0x28
 8001160:	e9c3 0100 	strd	r0, r1, [r3]
 8001164:	e462      	b.n	8000a2c <_vfprintf_r+0x84>
 8001166:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	9308      	str	r3, [sp, #32]
 800116c:	4618      	mov	r0, r3
 800116e:	2800      	cmp	r0, #0
 8001170:	4623      	mov	r3, r4
 8001172:	f103 0304 	add.w	r3, r3, #4
 8001176:	f6ff acee 	blt.w	8000b56 <_vfprintf_r+0x1ae>
 800117a:	930a      	str	r3, [sp, #40]	; 0x28
 800117c:	f898 3000 	ldrb.w	r3, [r8]
 8001180:	e487      	b.n	8000a92 <_vfprintf_r+0xea>
 8001182:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8001186:	2300      	movs	r3, #0
 8001188:	461c      	mov	r4, r3
 800118a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800118e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001192:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001196:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800119a:	2809      	cmp	r0, #9
 800119c:	d9f5      	bls.n	800118a <_vfprintf_r+0x7e2>
 800119e:	9408      	str	r4, [sp, #32]
 80011a0:	e479      	b.n	8000a96 <_vfprintf_r+0xee>
 80011a2:	930d      	str	r3, [sp, #52]	; 0x34
 80011a4:	46ab      	mov	fp, r5
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	f040 8762 	bne.w	8002070 <_vfprintf_r+0x16c8>
 80011ac:	9b03      	ldr	r3, [sp, #12]
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	9303      	str	r3, [sp, #12]
 80011b4:	9b03      	ldr	r3, [sp, #12]
 80011b6:	069b      	lsls	r3, r3, #26
 80011b8:	d48a      	bmi.n	80010d0 <_vfprintf_r+0x728>
 80011ba:	9b03      	ldr	r3, [sp, #12]
 80011bc:	06df      	lsls	r7, r3, #27
 80011be:	f100 8294 	bmi.w	80016ea <_vfprintf_r+0xd42>
 80011c2:	9b03      	ldr	r3, [sp, #12]
 80011c4:	065e      	lsls	r6, r3, #25
 80011c6:	f140 8290 	bpl.w	80016ea <_vfprintf_r+0xd42>
 80011ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80011cc:	f9b1 4000 	ldrsh.w	r4, [r1]
 80011d0:	3104      	adds	r1, #4
 80011d2:	17e5      	asrs	r5, r4, #31
 80011d4:	4622      	mov	r2, r4
 80011d6:	462b      	mov	r3, r5
 80011d8:	910a      	str	r1, [sp, #40]	; 0x28
 80011da:	e784      	b.n	80010e6 <_vfprintf_r+0x73e>
 80011dc:	930d      	str	r3, [sp, #52]	; 0x34
 80011de:	46ab      	mov	fp, r5
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	f040 8769 	bne.w	80020b8 <_vfprintf_r+0x1710>
 80011e6:	9b03      	ldr	r3, [sp, #12]
 80011e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80011ea:	071d      	lsls	r5, r3, #28
 80011ec:	f107 0707 	add.w	r7, r7, #7
 80011f0:	f140 8485 	bpl.w	8001afe <_vfprintf_r+0x1156>
 80011f4:	f027 0307 	bic.w	r3, r7, #7
 80011f8:	ed93 7b00 	vldr	d7, [r3]
 80011fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001200:	f103 0208 	add.w	r2, r3, #8
 8001204:	920a      	str	r2, [sp, #40]	; 0x28
 8001206:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 800120a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800120e:	9116      	str	r1, [sp, #88]	; 0x58
 8001210:	9317      	str	r3, [sp, #92]	; 0x5c
 8001212:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8001216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800121a:	4620      	mov	r0, r4
 800121c:	4629      	mov	r1, r5
 800121e:	4bb5      	ldr	r3, [pc, #724]	; (80014f4 <_vfprintf_r+0xb4c>)
 8001220:	f005 ffd8 	bl	80071d4 <__aeabi_dcmpun>
 8001224:	2800      	cmp	r0, #0
 8001226:	f040 83eb 	bne.w	8001a00 <_vfprintf_r+0x1058>
 800122a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800122e:	4bb1      	ldr	r3, [pc, #708]	; (80014f4 <_vfprintf_r+0xb4c>)
 8001230:	4620      	mov	r0, r4
 8001232:	4629      	mov	r1, r5
 8001234:	f005 ffb0 	bl	8007198 <__aeabi_dcmple>
 8001238:	2800      	cmp	r0, #0
 800123a:	f040 83e1 	bne.w	8001a00 <_vfprintf_r+0x1058>
 800123e:	2200      	movs	r2, #0
 8001240:	2300      	movs	r3, #0
 8001242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001246:	f005 ff9d 	bl	8007184 <__aeabi_dcmplt>
 800124a:	2800      	cmp	r0, #0
 800124c:	f040 8644 	bne.w	8001ed8 <_vfprintf_r+0x1530>
 8001250:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8001254:	4ea8      	ldr	r6, [pc, #672]	; (80014f8 <_vfprintf_r+0xb50>)
 8001256:	4ba9      	ldr	r3, [pc, #676]	; (80014fc <_vfprintf_r+0xb54>)
 8001258:	9903      	ldr	r1, [sp, #12]
 800125a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800125e:	9103      	str	r1, [sp, #12]
 8001260:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001262:	2203      	movs	r2, #3
 8001264:	f04f 0b00 	mov.w	fp, #0
 8001268:	9205      	str	r2, [sp, #20]
 800126a:	2947      	cmp	r1, #71	; 0x47
 800126c:	bfd8      	it	le
 800126e:	461e      	movle	r6, r3
 8001270:	9209      	str	r2, [sp, #36]	; 0x24
 8001272:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8001276:	e5b1      	b.n	8000ddc <_vfprintf_r+0x434>
 8001278:	9b03      	ldr	r3, [sp, #12]
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	9303      	str	r3, [sp, #12]
 8001280:	f898 3000 	ldrb.w	r3, [r8]
 8001284:	e405      	b.n	8000a92 <_vfprintf_r+0xea>
 8001286:	930d      	str	r3, [sp, #52]	; 0x34
 8001288:	46ab      	mov	fp, r5
 800128a:	2a00      	cmp	r2, #0
 800128c:	f43f ad67 	beq.w	8000d5e <_vfprintf_r+0x3b6>
 8001290:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8001294:	e563      	b.n	8000d5e <_vfprintf_r+0x3b6>
 8001296:	930d      	str	r3, [sp, #52]	; 0x34
 8001298:	46ab      	mov	fp, r5
 800129a:	2a00      	cmp	r2, #0
 800129c:	f040 8708 	bne.w	80020b0 <_vfprintf_r+0x1708>
 80012a0:	9b03      	ldr	r3, [sp, #12]
 80012a2:	4897      	ldr	r0, [pc, #604]	; (8001500 <_vfprintf_r+0xb58>)
 80012a4:	069c      	lsls	r4, r3, #26
 80012a6:	f53f aeba 	bmi.w	800101e <_vfprintf_r+0x676>
 80012aa:	9b03      	ldr	r3, [sp, #12]
 80012ac:	06d9      	lsls	r1, r3, #27
 80012ae:	f140 8398 	bpl.w	80019e2 <_vfprintf_r+0x103a>
 80012b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80012b4:	4613      	mov	r3, r2
 80012b6:	3304      	adds	r3, #4
 80012b8:	6814      	ldr	r4, [r2, #0]
 80012ba:	930a      	str	r3, [sp, #40]	; 0x28
 80012bc:	2500      	movs	r5, #0
 80012be:	e6b7      	b.n	8001030 <_vfprintf_r+0x688>
 80012c0:	f898 3000 	ldrb.w	r3, [r8]
 80012c4:	2900      	cmp	r1, #0
 80012c6:	f47f abe4 	bne.w	8000a92 <_vfprintf_r+0xea>
 80012ca:	2201      	movs	r2, #1
 80012cc:	2120      	movs	r1, #32
 80012ce:	f7ff bbe0 	b.w	8000a92 <_vfprintf_r+0xea>
 80012d2:	9b03      	ldr	r3, [sp, #12]
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	9303      	str	r3, [sp, #12]
 80012da:	f898 3000 	ldrb.w	r3, [r8]
 80012de:	f7ff bbd8 	b.w	8000a92 <_vfprintf_r+0xea>
 80012e2:	9b03      	ldr	r3, [sp, #12]
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	9303      	str	r3, [sp, #12]
 80012ea:	f898 3000 	ldrb.w	r3, [r8]
 80012ee:	f7ff bbd0 	b.w	8000a92 <_vfprintf_r+0xea>
 80012f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80012f4:	930d      	str	r3, [sp, #52]	; 0x34
 80012f6:	6816      	ldr	r6, [r2, #0]
 80012f8:	2400      	movs	r4, #0
 80012fa:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 80012fe:	1d17      	adds	r7, r2, #4
 8001300:	2e00      	cmp	r6, #0
 8001302:	f000 85ac 	beq.w	8001e5e <_vfprintf_r+0x14b6>
 8001306:	2d00      	cmp	r5, #0
 8001308:	f2c0 84fd 	blt.w	8001d06 <_vfprintf_r+0x135e>
 800130c:	462a      	mov	r2, r5
 800130e:	4621      	mov	r1, r4
 8001310:	4630      	mov	r0, r6
 8001312:	f002 ffdd 	bl	80042d0 <memchr>
 8001316:	2800      	cmp	r0, #0
 8001318:	f000 8616 	beq.w	8001f48 <_vfprintf_r+0x15a0>
 800131c:	1b83      	subs	r3, r0, r6
 800131e:	9309      	str	r3, [sp, #36]	; 0x24
 8001320:	46a3      	mov	fp, r4
 8001322:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001326:	970a      	str	r7, [sp, #40]	; 0x28
 8001328:	9305      	str	r3, [sp, #20]
 800132a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800132e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8001332:	e553      	b.n	8000ddc <_vfprintf_r+0x434>
 8001334:	f898 3000 	ldrb.w	r3, [r8]
 8001338:	2201      	movs	r2, #1
 800133a:	212b      	movs	r1, #43	; 0x2b
 800133c:	f7ff bba9 	b.w	8000a92 <_vfprintf_r+0xea>
 8001340:	486f      	ldr	r0, [pc, #444]	; (8001500 <_vfprintf_r+0xb58>)
 8001342:	920d      	str	r2, [sp, #52]	; 0x34
 8001344:	f1bb 0f00 	cmp.w	fp, #0
 8001348:	f040 8173 	bne.w	8001632 <_vfprintf_r+0xc8a>
 800134c:	465f      	mov	r7, fp
 800134e:	e6e1      	b.n	8001114 <_vfprintf_r+0x76c>
 8001350:	930d      	str	r3, [sp, #52]	; 0x34
 8001352:	2a00      	cmp	r2, #0
 8001354:	f040 86a4 	bne.w	80020a0 <_vfprintf_r+0x16f8>
 8001358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800135a:	2a00      	cmp	r2, #0
 800135c:	f43f ac4e 	beq.w	8000bfc <_vfprintf_r+0x254>
 8001360:	2300      	movs	r3, #0
 8001362:	2101      	movs	r1, #1
 8001364:	461f      	mov	r7, r3
 8001366:	9105      	str	r1, [sp, #20]
 8001368:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800136c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8001370:	469b      	mov	fp, r3
 8001372:	930f      	str	r3, [sp, #60]	; 0x3c
 8001374:	9109      	str	r1, [sp, #36]	; 0x24
 8001376:	ae26      	add	r6, sp, #152	; 0x98
 8001378:	e534      	b.n	8000de4 <_vfprintf_r+0x43c>
 800137a:	f1bb 0f00 	cmp.w	fp, #0
 800137e:	f000 85d4 	beq.w	8001f2a <_vfprintf_r+0x1582>
 8001382:	2700      	movs	r7, #0
 8001384:	2400      	movs	r4, #0
 8001386:	2500      	movs	r5, #0
 8001388:	e475      	b.n	8000c76 <_vfprintf_r+0x2ce>
 800138a:	485d      	ldr	r0, [pc, #372]	; (8001500 <_vfprintf_r+0xb58>)
 800138c:	9303      	str	r3, [sp, #12]
 800138e:	920d      	str	r2, [sp, #52]	; 0x34
 8001390:	ea54 0305 	orrs.w	r3, r4, r5
 8001394:	970a      	str	r7, [sp, #40]	; 0x28
 8001396:	f04f 0700 	mov.w	r7, #0
 800139a:	f47f ae67 	bne.w	800106c <_vfprintf_r+0x6c4>
 800139e:	2400      	movs	r4, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e663      	b.n	800106c <_vfprintf_r+0x6c4>
 80013a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80013a6:	e56d      	b.n	8000e84 <_vfprintf_r+0x4dc>
 80013a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80013aa:	2b65      	cmp	r3, #101	; 0x65
 80013ac:	f340 80ae 	ble.w	800150c <_vfprintf_r+0xb64>
 80013b0:	2200      	movs	r2, #0
 80013b2:	2300      	movs	r3, #0
 80013b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80013b8:	f005 feda 	bl	8007170 <__aeabi_dcmpeq>
 80013bc:	2800      	cmp	r0, #0
 80013be:	f000 813a 	beq.w	8001636 <_vfprintf_r+0xc8e>
 80013c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80013c4:	4a4f      	ldr	r2, [pc, #316]	; (8001504 <_vfprintf_r+0xb5c>)
 80013c6:	f8c9 2000 	str.w	r2, [r9]
 80013ca:	3301      	adds	r3, #1
 80013cc:	3401      	adds	r4, #1
 80013ce:	2201      	movs	r2, #1
 80013d0:	2b07      	cmp	r3, #7
 80013d2:	9425      	str	r4, [sp, #148]	; 0x94
 80013d4:	9324      	str	r3, [sp, #144]	; 0x90
 80013d6:	f8c9 2004 	str.w	r2, [r9, #4]
 80013da:	f300 83cc 	bgt.w	8001b76 <_vfprintf_r+0x11ce>
 80013de:	f109 0908 	add.w	r9, r9, #8
 80013e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80013e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80013e6:	4293      	cmp	r3, r2
 80013e8:	db03      	blt.n	80013f2 <_vfprintf_r+0xa4a>
 80013ea:	9b03      	ldr	r3, [sp, #12]
 80013ec:	07d8      	lsls	r0, r3, #31
 80013ee:	f57f adb9 	bpl.w	8000f64 <_vfprintf_r+0x5bc>
 80013f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80013f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80013f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80013f8:	f8c9 2000 	str.w	r2, [r9]
 80013fc:	3301      	adds	r3, #1
 80013fe:	440c      	add	r4, r1
 8001400:	2b07      	cmp	r3, #7
 8001402:	9425      	str	r4, [sp, #148]	; 0x94
 8001404:	f8c9 1004 	str.w	r1, [r9, #4]
 8001408:	9324      	str	r3, [sp, #144]	; 0x90
 800140a:	f300 846f 	bgt.w	8001cec <_vfprintf_r+0x1344>
 800140e:	f109 0908 	add.w	r9, r9, #8
 8001412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001414:	1e5d      	subs	r5, r3, #1
 8001416:	2d00      	cmp	r5, #0
 8001418:	f77f ada4 	ble.w	8000f64 <_vfprintf_r+0x5bc>
 800141c:	4a3a      	ldr	r2, [pc, #232]	; (8001508 <_vfprintf_r+0xb60>)
 800141e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001420:	920b      	str	r2, [sp, #44]	; 0x2c
 8001422:	2d10      	cmp	r5, #16
 8001424:	f340 81b4 	ble.w	8001790 <_vfprintf_r+0xde8>
 8001428:	2610      	movs	r6, #16
 800142a:	9f06      	ldr	r7, [sp, #24]
 800142c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001430:	e005      	b.n	800143e <_vfprintf_r+0xa96>
 8001432:	f109 0908 	add.w	r9, r9, #8
 8001436:	3d10      	subs	r5, #16
 8001438:	2d10      	cmp	r5, #16
 800143a:	f340 81a9 	ble.w	8001790 <_vfprintf_r+0xde8>
 800143e:	3301      	adds	r3, #1
 8001440:	3410      	adds	r4, #16
 8001442:	2b07      	cmp	r3, #7
 8001444:	9425      	str	r4, [sp, #148]	; 0x94
 8001446:	9324      	str	r3, [sp, #144]	; 0x90
 8001448:	f8c9 a000 	str.w	sl, [r9]
 800144c:	f8c9 6004 	str.w	r6, [r9, #4]
 8001450:	ddef      	ble.n	8001432 <_vfprintf_r+0xa8a>
 8001452:	aa23      	add	r2, sp, #140	; 0x8c
 8001454:	4659      	mov	r1, fp
 8001456:	4638      	mov	r0, r7
 8001458:	f004 f94c 	bl	80056f4 <__sprint_r>
 800145c:	2800      	cmp	r0, #0
 800145e:	f47f abd4 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001462:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001464:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001466:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800146a:	e7e4      	b.n	8001436 <_vfprintf_r+0xa8e>
 800146c:	9b08      	ldr	r3, [sp, #32]
 800146e:	9a05      	ldr	r2, [sp, #20]
 8001470:	1a9f      	subs	r7, r3, r2
 8001472:	2f00      	cmp	r7, #0
 8001474:	f77f ad2a 	ble.w	8000ecc <_vfprintf_r+0x524>
 8001478:	4a23      	ldr	r2, [pc, #140]	; (8001508 <_vfprintf_r+0xb60>)
 800147a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800147c:	920b      	str	r2, [sp, #44]	; 0x2c
 800147e:	2f10      	cmp	r7, #16
 8001480:	dd2b      	ble.n	80014da <_vfprintf_r+0xb32>
 8001482:	464a      	mov	r2, r9
 8001484:	4621      	mov	r1, r4
 8001486:	46b9      	mov	r9, r7
 8001488:	2510      	movs	r5, #16
 800148a:	4637      	mov	r7, r6
 800148c:	9c06      	ldr	r4, [sp, #24]
 800148e:	9e04      	ldr	r6, [sp, #16]
 8001490:	e006      	b.n	80014a0 <_vfprintf_r+0xaf8>
 8001492:	f1a9 0910 	sub.w	r9, r9, #16
 8001496:	f1b9 0f10 	cmp.w	r9, #16
 800149a:	f102 0208 	add.w	r2, r2, #8
 800149e:	dd18      	ble.n	80014d2 <_vfprintf_r+0xb2a>
 80014a0:	3301      	adds	r3, #1
 80014a2:	3110      	adds	r1, #16
 80014a4:	2b07      	cmp	r3, #7
 80014a6:	9125      	str	r1, [sp, #148]	; 0x94
 80014a8:	9324      	str	r3, [sp, #144]	; 0x90
 80014aa:	f8c2 a000 	str.w	sl, [r2]
 80014ae:	6055      	str	r5, [r2, #4]
 80014b0:	ddef      	ble.n	8001492 <_vfprintf_r+0xaea>
 80014b2:	aa23      	add	r2, sp, #140	; 0x8c
 80014b4:	4631      	mov	r1, r6
 80014b6:	4620      	mov	r0, r4
 80014b8:	f004 f91c 	bl	80056f4 <__sprint_r>
 80014bc:	2800      	cmp	r0, #0
 80014be:	f47f aba4 	bne.w	8000c0a <_vfprintf_r+0x262>
 80014c2:	f1a9 0910 	sub.w	r9, r9, #16
 80014c6:	f1b9 0f10 	cmp.w	r9, #16
 80014ca:	9925      	ldr	r1, [sp, #148]	; 0x94
 80014cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80014ce:	aa30      	add	r2, sp, #192	; 0xc0
 80014d0:	dce6      	bgt.n	80014a0 <_vfprintf_r+0xaf8>
 80014d2:	463e      	mov	r6, r7
 80014d4:	460c      	mov	r4, r1
 80014d6:	464f      	mov	r7, r9
 80014d8:	4691      	mov	r9, r2
 80014da:	3301      	adds	r3, #1
 80014dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80014de:	9324      	str	r3, [sp, #144]	; 0x90
 80014e0:	443c      	add	r4, r7
 80014e2:	2b07      	cmp	r3, #7
 80014e4:	9425      	str	r4, [sp, #148]	; 0x94
 80014e6:	e889 0084 	stmia.w	r9, {r2, r7}
 80014ea:	f300 822b 	bgt.w	8001944 <_vfprintf_r+0xf9c>
 80014ee:	f109 0908 	add.w	r9, r9, #8
 80014f2:	e4eb      	b.n	8000ecc <_vfprintf_r+0x524>
 80014f4:	7fefffff 	.word	0x7fefffff
 80014f8:	0801bae4 	.word	0x0801bae4
 80014fc:	0801bae0 	.word	0x0801bae0
 8001500:	0801bb04 	.word	0x0801bb04
 8001504:	0801bb20 	.word	0x0801bb20
 8001508:	0800c734 	.word	0x0800c734
 800150c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800150e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8001510:	2b01      	cmp	r3, #1
 8001512:	f340 81d0 	ble.w	80018b6 <_vfprintf_r+0xf0e>
 8001516:	3501      	adds	r5, #1
 8001518:	3401      	adds	r4, #1
 800151a:	2301      	movs	r3, #1
 800151c:	2d07      	cmp	r5, #7
 800151e:	9425      	str	r4, [sp, #148]	; 0x94
 8001520:	9524      	str	r5, [sp, #144]	; 0x90
 8001522:	f8c9 6000 	str.w	r6, [r9]
 8001526:	f8c9 3004 	str.w	r3, [r9, #4]
 800152a:	f300 81e1 	bgt.w	80018f0 <_vfprintf_r+0xf48>
 800152e:	f109 0908 	add.w	r9, r9, #8
 8001532:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001536:	f8c9 3000 	str.w	r3, [r9]
 800153a:	3501      	adds	r5, #1
 800153c:	4414      	add	r4, r2
 800153e:	2d07      	cmp	r5, #7
 8001540:	9425      	str	r4, [sp, #148]	; 0x94
 8001542:	9524      	str	r5, [sp, #144]	; 0x90
 8001544:	f8c9 2004 	str.w	r2, [r9, #4]
 8001548:	f300 81df 	bgt.w	800190a <_vfprintf_r+0xf62>
 800154c:	f109 0908 	add.w	r9, r9, #8
 8001550:	2300      	movs	r3, #0
 8001552:	2200      	movs	r2, #0
 8001554:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001558:	f005 fe0a 	bl	8007170 <__aeabi_dcmpeq>
 800155c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800155e:	2800      	cmp	r0, #0
 8001560:	f040 80cc 	bne.w	80016fc <_vfprintf_r+0xd54>
 8001564:	3b01      	subs	r3, #1
 8001566:	3501      	adds	r5, #1
 8001568:	3601      	adds	r6, #1
 800156a:	441c      	add	r4, r3
 800156c:	2d07      	cmp	r5, #7
 800156e:	9524      	str	r5, [sp, #144]	; 0x90
 8001570:	9425      	str	r4, [sp, #148]	; 0x94
 8001572:	f8c9 6000 	str.w	r6, [r9]
 8001576:	f8c9 3004 	str.w	r3, [r9, #4]
 800157a:	f300 81ac 	bgt.w	80018d6 <_vfprintf_r+0xf2e>
 800157e:	f109 0908 	add.w	r9, r9, #8
 8001582:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001584:	f8c9 2004 	str.w	r2, [r9, #4]
 8001588:	3501      	adds	r5, #1
 800158a:	4414      	add	r4, r2
 800158c:	ab1f      	add	r3, sp, #124	; 0x7c
 800158e:	2d07      	cmp	r5, #7
 8001590:	9425      	str	r4, [sp, #148]	; 0x94
 8001592:	9524      	str	r5, [sp, #144]	; 0x90
 8001594:	f8c9 3000 	str.w	r3, [r9]
 8001598:	f77f ace2 	ble.w	8000f60 <_vfprintf_r+0x5b8>
 800159c:	aa23      	add	r2, sp, #140	; 0x8c
 800159e:	9904      	ldr	r1, [sp, #16]
 80015a0:	9806      	ldr	r0, [sp, #24]
 80015a2:	f004 f8a7 	bl	80056f4 <__sprint_r>
 80015a6:	2800      	cmp	r0, #0
 80015a8:	f47f ab2f 	bne.w	8000c0a <_vfprintf_r+0x262>
 80015ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80015ae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80015b2:	e4d7      	b.n	8000f64 <_vfprintf_r+0x5bc>
 80015b4:	aa23      	add	r2, sp, #140	; 0x8c
 80015b6:	9904      	ldr	r1, [sp, #16]
 80015b8:	9806      	ldr	r0, [sp, #24]
 80015ba:	f004 f89b 	bl	80056f4 <__sprint_r>
 80015be:	2800      	cmp	r0, #0
 80015c0:	f43f ad1e 	beq.w	8001000 <_vfprintf_r+0x658>
 80015c4:	f7ff bb21 	b.w	8000c0a <_vfprintf_r+0x262>
 80015c8:	aa23      	add	r2, sp, #140	; 0x8c
 80015ca:	9904      	ldr	r1, [sp, #16]
 80015cc:	9806      	ldr	r0, [sp, #24]
 80015ce:	f004 f891 	bl	80056f4 <__sprint_r>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	f47f ab19 	bne.w	8000c0a <_vfprintf_r+0x262>
 80015d8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80015da:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80015de:	e4ae      	b.n	8000f3e <_vfprintf_r+0x596>
 80015e0:	aa23      	add	r2, sp, #140	; 0x8c
 80015e2:	9904      	ldr	r1, [sp, #16]
 80015e4:	9806      	ldr	r0, [sp, #24]
 80015e6:	f004 f885 	bl	80056f4 <__sprint_r>
 80015ea:	2800      	cmp	r0, #0
 80015ec:	f47f ab0d 	bne.w	8000c0a <_vfprintf_r+0x262>
 80015f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80015f2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80015f6:	e455      	b.n	8000ea4 <_vfprintf_r+0x4fc>
 80015f8:	aa23      	add	r2, sp, #140	; 0x8c
 80015fa:	9904      	ldr	r1, [sp, #16]
 80015fc:	9806      	ldr	r0, [sp, #24]
 80015fe:	f004 f879 	bl	80056f4 <__sprint_r>
 8001602:	2800      	cmp	r0, #0
 8001604:	f47f ab01 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001608:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800160a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800160e:	e459      	b.n	8000ec4 <_vfprintf_r+0x51c>
 8001610:	f1bb 0f00 	cmp.w	fp, #0
 8001614:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8001618:	f2c0 830b 	blt.w	8001c32 <_vfprintf_r+0x128a>
 800161c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8001620:	9303      	str	r3, [sp, #12]
 8001622:	ea54 0305 	orrs.w	r3, r4, r5
 8001626:	f47f ad21 	bne.w	800106c <_vfprintf_r+0x6c4>
 800162a:	f1bb 0f00 	cmp.w	fp, #0
 800162e:	f43f ae8d 	beq.w	800134c <_vfprintf_r+0x9a4>
 8001632:	2700      	movs	r7, #0
 8001634:	e6b3      	b.n	800139e <_vfprintf_r+0x9f6>
 8001636:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001638:	2d00      	cmp	r5, #0
 800163a:	f340 82a8 	ble.w	8001b8e <_vfprintf_r+0x11e6>
 800163e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001642:	4293      	cmp	r3, r2
 8001644:	bfa8      	it	ge
 8001646:	4613      	movge	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	461d      	mov	r5, r3
 800164c:	dd0d      	ble.n	800166a <_vfprintf_r+0xcc2>
 800164e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001650:	f8c9 6000 	str.w	r6, [r9]
 8001654:	3301      	adds	r3, #1
 8001656:	442c      	add	r4, r5
 8001658:	2b07      	cmp	r3, #7
 800165a:	9425      	str	r4, [sp, #148]	; 0x94
 800165c:	f8c9 5004 	str.w	r5, [r9, #4]
 8001660:	9324      	str	r3, [sp, #144]	; 0x90
 8001662:	f300 8382 	bgt.w	8001d6a <_vfprintf_r+0x13c2>
 8001666:	f109 0908 	add.w	r9, r9, #8
 800166a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800166c:	2d00      	cmp	r5, #0
 800166e:	bfa8      	it	ge
 8001670:	1b5b      	subge	r3, r3, r5
 8001672:	2b00      	cmp	r3, #0
 8001674:	461d      	mov	r5, r3
 8001676:	f340 80be 	ble.w	80017f6 <_vfprintf_r+0xe4e>
 800167a:	4ab9      	ldr	r2, [pc, #740]	; (8001960 <_vfprintf_r+0xfb8>)
 800167c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800167e:	920b      	str	r2, [sp, #44]	; 0x2c
 8001680:	2d10      	cmp	r5, #16
 8001682:	f340 826b 	ble.w	8001b5c <_vfprintf_r+0x11b4>
 8001686:	4622      	mov	r2, r4
 8001688:	2710      	movs	r7, #16
 800168a:	f8dd b018 	ldr.w	fp, [sp, #24]
 800168e:	9c04      	ldr	r4, [sp, #16]
 8001690:	e005      	b.n	800169e <_vfprintf_r+0xcf6>
 8001692:	f109 0908 	add.w	r9, r9, #8
 8001696:	3d10      	subs	r5, #16
 8001698:	2d10      	cmp	r5, #16
 800169a:	f340 825e 	ble.w	8001b5a <_vfprintf_r+0x11b2>
 800169e:	3301      	adds	r3, #1
 80016a0:	3210      	adds	r2, #16
 80016a2:	2b07      	cmp	r3, #7
 80016a4:	9225      	str	r2, [sp, #148]	; 0x94
 80016a6:	9324      	str	r3, [sp, #144]	; 0x90
 80016a8:	f8c9 a000 	str.w	sl, [r9]
 80016ac:	f8c9 7004 	str.w	r7, [r9, #4]
 80016b0:	ddef      	ble.n	8001692 <_vfprintf_r+0xcea>
 80016b2:	aa23      	add	r2, sp, #140	; 0x8c
 80016b4:	4621      	mov	r1, r4
 80016b6:	4658      	mov	r0, fp
 80016b8:	f004 f81c 	bl	80056f4 <__sprint_r>
 80016bc:	2800      	cmp	r0, #0
 80016be:	f47f aaa4 	bne.w	8000c0a <_vfprintf_r+0x262>
 80016c2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80016c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80016c6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80016ca:	e7e4      	b.n	8001696 <_vfprintf_r+0xcee>
 80016cc:	aa23      	add	r2, sp, #140	; 0x8c
 80016ce:	9904      	ldr	r1, [sp, #16]
 80016d0:	9806      	ldr	r0, [sp, #24]
 80016d2:	f004 f80f 	bl	80056f4 <__sprint_r>
 80016d6:	2800      	cmp	r0, #0
 80016d8:	f47f aa97 	bne.w	8000c0a <_vfprintf_r+0x262>
 80016dc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 80016e0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80016e2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80016e6:	f7ff bbcd 	b.w	8000e84 <_vfprintf_r+0x4dc>
 80016ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80016ec:	6814      	ldr	r4, [r2, #0]
 80016ee:	4613      	mov	r3, r2
 80016f0:	3304      	adds	r3, #4
 80016f2:	17e5      	asrs	r5, r4, #31
 80016f4:	930a      	str	r3, [sp, #40]	; 0x28
 80016f6:	4622      	mov	r2, r4
 80016f8:	462b      	mov	r3, r5
 80016fa:	e4f4      	b.n	80010e6 <_vfprintf_r+0x73e>
 80016fc:	1e5e      	subs	r6, r3, #1
 80016fe:	2e00      	cmp	r6, #0
 8001700:	f77f af3f 	ble.w	8001582 <_vfprintf_r+0xbda>
 8001704:	4b96      	ldr	r3, [pc, #600]	; (8001960 <_vfprintf_r+0xfb8>)
 8001706:	930b      	str	r3, [sp, #44]	; 0x2c
 8001708:	2e10      	cmp	r6, #16
 800170a:	f340 8110 	ble.w	800192e <_vfprintf_r+0xf86>
 800170e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8001712:	2710      	movs	r7, #16
 8001714:	46b0      	mov	r8, r6
 8001716:	f8dd b018 	ldr.w	fp, [sp, #24]
 800171a:	9e04      	ldr	r6, [sp, #16]
 800171c:	e007      	b.n	800172e <_vfprintf_r+0xd86>
 800171e:	f109 0908 	add.w	r9, r9, #8
 8001722:	f1a8 0810 	sub.w	r8, r8, #16
 8001726:	f1b8 0f10 	cmp.w	r8, #16
 800172a:	f340 80fd 	ble.w	8001928 <_vfprintf_r+0xf80>
 800172e:	3501      	adds	r5, #1
 8001730:	3410      	adds	r4, #16
 8001732:	2d07      	cmp	r5, #7
 8001734:	9425      	str	r4, [sp, #148]	; 0x94
 8001736:	9524      	str	r5, [sp, #144]	; 0x90
 8001738:	f8c9 a000 	str.w	sl, [r9]
 800173c:	f8c9 7004 	str.w	r7, [r9, #4]
 8001740:	dded      	ble.n	800171e <_vfprintf_r+0xd76>
 8001742:	aa23      	add	r2, sp, #140	; 0x8c
 8001744:	4631      	mov	r1, r6
 8001746:	4658      	mov	r0, fp
 8001748:	f003 ffd4 	bl	80056f4 <__sprint_r>
 800174c:	2800      	cmp	r0, #0
 800174e:	f47f aa5c 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001752:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001754:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8001756:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800175a:	e7e2      	b.n	8001722 <_vfprintf_r+0xd7a>
 800175c:	9903      	ldr	r1, [sp, #12]
 800175e:	f011 0210 	ands.w	r2, r1, #16
 8001762:	d020      	beq.n	80017a6 <_vfprintf_r+0xdfe>
 8001764:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001766:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800176a:	f1bb 0f00 	cmp.w	fp, #0
 800176e:	6804      	ldr	r4, [r0, #0]
 8001770:	f100 0704 	add.w	r7, r0, #4
 8001774:	f04f 0500 	mov.w	r5, #0
 8001778:	db26      	blt.n	80017c8 <_vfprintf_r+0xe20>
 800177a:	460a      	mov	r2, r1
 800177c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001780:	9203      	str	r2, [sp, #12]
 8001782:	ea54 0205 	orrs.w	r2, r4, r5
 8001786:	970a      	str	r7, [sp, #40]	; 0x28
 8001788:	461f      	mov	r7, r3
 800178a:	f47f ab03 	bne.w	8000d94 <_vfprintf_r+0x3ec>
 800178e:	e4bd      	b.n	800110c <_vfprintf_r+0x764>
 8001790:	3301      	adds	r3, #1
 8001792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001794:	9324      	str	r3, [sp, #144]	; 0x90
 8001796:	442c      	add	r4, r5
 8001798:	2b07      	cmp	r3, #7
 800179a:	9425      	str	r4, [sp, #148]	; 0x94
 800179c:	e889 0024 	stmia.w	r9, {r2, r5}
 80017a0:	f77f abde 	ble.w	8000f60 <_vfprintf_r+0x5b8>
 80017a4:	e6fa      	b.n	800159c <_vfprintf_r+0xbf4>
 80017a6:	9903      	ldr	r1, [sp, #12]
 80017a8:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80017ac:	f040 8248 	bne.w	8001c40 <_vfprintf_r+0x1298>
 80017b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80017b2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80017b6:	f1bb 0f00 	cmp.w	fp, #0
 80017ba:	680c      	ldr	r4, [r1, #0]
 80017bc:	f101 0704 	add.w	r7, r1, #4
 80017c0:	f04f 0500 	mov.w	r5, #0
 80017c4:	f280 811a 	bge.w	80019fc <_vfprintf_r+0x1054>
 80017c8:	970a      	str	r7, [sp, #40]	; 0x28
 80017ca:	461f      	mov	r7, r3
 80017cc:	ea54 0305 	orrs.w	r3, r4, r5
 80017d0:	f47f aae0 	bne.w	8000d94 <_vfprintf_r+0x3ec>
 80017d4:	ae40      	add	r6, sp, #256	; 0x100
 80017d6:	3430      	adds	r4, #48	; 0x30
 80017d8:	f806 4d41 	strb.w	r4, [r6, #-65]!
 80017dc:	f7ff baf4 	b.w	8000dc8 <_vfprintf_r+0x420>
 80017e0:	aa23      	add	r2, sp, #140	; 0x8c
 80017e2:	9904      	ldr	r1, [sp, #16]
 80017e4:	9806      	ldr	r0, [sp, #24]
 80017e6:	f003 ff85 	bl	80056f4 <__sprint_r>
 80017ea:	2800      	cmp	r0, #0
 80017ec:	f47f aa0d 	bne.w	8000c0a <_vfprintf_r+0x262>
 80017f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80017f2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80017f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80017f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80017fa:	4432      	add	r2, r6
 80017fc:	4617      	mov	r7, r2
 80017fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001800:	4293      	cmp	r3, r2
 8001802:	db47      	blt.n	8001894 <_vfprintf_r+0xeec>
 8001804:	9a03      	ldr	r2, [sp, #12]
 8001806:	07d2      	lsls	r2, r2, #31
 8001808:	d444      	bmi.n	8001894 <_vfprintf_r+0xeec>
 800180a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800180c:	440e      	add	r6, r1
 800180e:	1bf5      	subs	r5, r6, r7
 8001810:	1acb      	subs	r3, r1, r3
 8001812:	429d      	cmp	r5, r3
 8001814:	bfa8      	it	ge
 8001816:	461d      	movge	r5, r3
 8001818:	2d00      	cmp	r5, #0
 800181a:	462e      	mov	r6, r5
 800181c:	dd0d      	ble.n	800183a <_vfprintf_r+0xe92>
 800181e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001820:	f8c9 7000 	str.w	r7, [r9]
 8001824:	3201      	adds	r2, #1
 8001826:	442c      	add	r4, r5
 8001828:	2a07      	cmp	r2, #7
 800182a:	9425      	str	r4, [sp, #148]	; 0x94
 800182c:	f8c9 5004 	str.w	r5, [r9, #4]
 8001830:	9224      	str	r2, [sp, #144]	; 0x90
 8001832:	f300 832b 	bgt.w	8001e8c <_vfprintf_r+0x14e4>
 8001836:	f109 0908 	add.w	r9, r9, #8
 800183a:	2e00      	cmp	r6, #0
 800183c:	bfac      	ite	ge
 800183e:	1b9d      	subge	r5, r3, r6
 8001840:	461d      	movlt	r5, r3
 8001842:	2d00      	cmp	r5, #0
 8001844:	f77f ab8e 	ble.w	8000f64 <_vfprintf_r+0x5bc>
 8001848:	4a45      	ldr	r2, [pc, #276]	; (8001960 <_vfprintf_r+0xfb8>)
 800184a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800184c:	920b      	str	r2, [sp, #44]	; 0x2c
 800184e:	2d10      	cmp	r5, #16
 8001850:	dd9e      	ble.n	8001790 <_vfprintf_r+0xde8>
 8001852:	2610      	movs	r6, #16
 8001854:	9f06      	ldr	r7, [sp, #24]
 8001856:	f8dd b010 	ldr.w	fp, [sp, #16]
 800185a:	e004      	b.n	8001866 <_vfprintf_r+0xebe>
 800185c:	f109 0908 	add.w	r9, r9, #8
 8001860:	3d10      	subs	r5, #16
 8001862:	2d10      	cmp	r5, #16
 8001864:	dd94      	ble.n	8001790 <_vfprintf_r+0xde8>
 8001866:	3301      	adds	r3, #1
 8001868:	3410      	adds	r4, #16
 800186a:	2b07      	cmp	r3, #7
 800186c:	9425      	str	r4, [sp, #148]	; 0x94
 800186e:	9324      	str	r3, [sp, #144]	; 0x90
 8001870:	f8c9 a000 	str.w	sl, [r9]
 8001874:	f8c9 6004 	str.w	r6, [r9, #4]
 8001878:	ddf0      	ble.n	800185c <_vfprintf_r+0xeb4>
 800187a:	aa23      	add	r2, sp, #140	; 0x8c
 800187c:	4659      	mov	r1, fp
 800187e:	4638      	mov	r0, r7
 8001880:	f003 ff38 	bl	80056f4 <__sprint_r>
 8001884:	2800      	cmp	r0, #0
 8001886:	f47f a9c0 	bne.w	8000c0a <_vfprintf_r+0x262>
 800188a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800188c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800188e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001892:	e7e5      	b.n	8001860 <_vfprintf_r+0xeb8>
 8001894:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001896:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001898:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800189a:	f8c9 1000 	str.w	r1, [r9]
 800189e:	3201      	adds	r2, #1
 80018a0:	4404      	add	r4, r0
 80018a2:	2a07      	cmp	r2, #7
 80018a4:	9425      	str	r4, [sp, #148]	; 0x94
 80018a6:	f8c9 0004 	str.w	r0, [r9, #4]
 80018aa:	9224      	str	r2, [sp, #144]	; 0x90
 80018ac:	f300 82ca 	bgt.w	8001e44 <_vfprintf_r+0x149c>
 80018b0:	f109 0908 	add.w	r9, r9, #8
 80018b4:	e7a9      	b.n	800180a <_vfprintf_r+0xe62>
 80018b6:	9b03      	ldr	r3, [sp, #12]
 80018b8:	07df      	lsls	r7, r3, #31
 80018ba:	f53f ae2c 	bmi.w	8001516 <_vfprintf_r+0xb6e>
 80018be:	3501      	adds	r5, #1
 80018c0:	3401      	adds	r4, #1
 80018c2:	2301      	movs	r3, #1
 80018c4:	2d07      	cmp	r5, #7
 80018c6:	9425      	str	r4, [sp, #148]	; 0x94
 80018c8:	9524      	str	r5, [sp, #144]	; 0x90
 80018ca:	f8c9 6000 	str.w	r6, [r9]
 80018ce:	f8c9 3004 	str.w	r3, [r9, #4]
 80018d2:	f77f ae54 	ble.w	800157e <_vfprintf_r+0xbd6>
 80018d6:	aa23      	add	r2, sp, #140	; 0x8c
 80018d8:	9904      	ldr	r1, [sp, #16]
 80018da:	9806      	ldr	r0, [sp, #24]
 80018dc:	f003 ff0a 	bl	80056f4 <__sprint_r>
 80018e0:	2800      	cmp	r0, #0
 80018e2:	f47f a992 	bne.w	8000c0a <_vfprintf_r+0x262>
 80018e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80018e8:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80018ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80018ee:	e648      	b.n	8001582 <_vfprintf_r+0xbda>
 80018f0:	aa23      	add	r2, sp, #140	; 0x8c
 80018f2:	9904      	ldr	r1, [sp, #16]
 80018f4:	9806      	ldr	r0, [sp, #24]
 80018f6:	f003 fefd 	bl	80056f4 <__sprint_r>
 80018fa:	2800      	cmp	r0, #0
 80018fc:	f47f a985 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001900:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001902:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8001904:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001908:	e613      	b.n	8001532 <_vfprintf_r+0xb8a>
 800190a:	aa23      	add	r2, sp, #140	; 0x8c
 800190c:	9904      	ldr	r1, [sp, #16]
 800190e:	9806      	ldr	r0, [sp, #24]
 8001910:	f003 fef0 	bl	80056f4 <__sprint_r>
 8001914:	2800      	cmp	r0, #0
 8001916:	f47f a978 	bne.w	8000c0a <_vfprintf_r+0x262>
 800191a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800191c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800191e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001922:	e615      	b.n	8001550 <_vfprintf_r+0xba8>
 8001924:	2400      	movs	r4, #0
 8001926:	e755      	b.n	80017d4 <_vfprintf_r+0xe2c>
 8001928:	4646      	mov	r6, r8
 800192a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800192e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001930:	3501      	adds	r5, #1
 8001932:	4434      	add	r4, r6
 8001934:	2d07      	cmp	r5, #7
 8001936:	9425      	str	r4, [sp, #148]	; 0x94
 8001938:	9524      	str	r5, [sp, #144]	; 0x90
 800193a:	e889 0048 	stmia.w	r9, {r3, r6}
 800193e:	f77f ae1e 	ble.w	800157e <_vfprintf_r+0xbd6>
 8001942:	e7c8      	b.n	80018d6 <_vfprintf_r+0xf2e>
 8001944:	aa23      	add	r2, sp, #140	; 0x8c
 8001946:	9904      	ldr	r1, [sp, #16]
 8001948:	9806      	ldr	r0, [sp, #24]
 800194a:	f003 fed3 	bl	80056f4 <__sprint_r>
 800194e:	2800      	cmp	r0, #0
 8001950:	f47f a95b 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001954:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001956:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800195a:	f7ff bab7 	b.w	8000ecc <_vfprintf_r+0x524>
 800195e:	bf00      	nop
 8001960:	0800c734 	.word	0x0800c734
 8001964:	4264      	negs	r4, r4
 8001966:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800196a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800196e:	f1bb 0f00 	cmp.w	fp, #0
 8001972:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8001976:	f6ff aa0d 	blt.w	8000d94 <_vfprintf_r+0x3ec>
 800197a:	9b03      	ldr	r3, [sp, #12]
 800197c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001980:	9303      	str	r3, [sp, #12]
 8001982:	f7ff ba07 	b.w	8000d94 <_vfprintf_r+0x3ec>
 8001986:	9903      	ldr	r1, [sp, #12]
 8001988:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800198c:	d017      	beq.n	80019be <_vfprintf_r+0x1016>
 800198e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001990:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8001994:	4603      	mov	r3, r0
 8001996:	f1bb 0f00 	cmp.w	fp, #0
 800199a:	f103 0304 	add.w	r3, r3, #4
 800199e:	8804      	ldrh	r4, [r0, #0]
 80019a0:	f04f 0500 	mov.w	r5, #0
 80019a4:	f2c0 8314 	blt.w	8001fd0 <_vfprintf_r+0x1628>
 80019a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80019ac:	9103      	str	r1, [sp, #12]
 80019ae:	ea54 0105 	orrs.w	r1, r4, r5
 80019b2:	930a      	str	r3, [sp, #40]	; 0x28
 80019b4:	f43f ace1 	beq.w	800137a <_vfprintf_r+0x9d2>
 80019b8:	4617      	mov	r7, r2
 80019ba:	f7ff b95c 	b.w	8000c76 <_vfprintf_r+0x2ce>
 80019be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80019c0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80019c4:	f1bb 0f00 	cmp.w	fp, #0
 80019c8:	680c      	ldr	r4, [r1, #0]
 80019ca:	f101 0704 	add.w	r7, r1, #4
 80019ce:	f04f 0500 	mov.w	r5, #0
 80019d2:	db02      	blt.n	80019da <_vfprintf_r+0x1032>
 80019d4:	9a03      	ldr	r2, [sp, #12]
 80019d6:	f7ff b9af 	b.w	8000d38 <_vfprintf_r+0x390>
 80019da:	970a      	str	r7, [sp, #40]	; 0x28
 80019dc:	2700      	movs	r7, #0
 80019de:	f7ff b94a 	b.w	8000c76 <_vfprintf_r+0x2ce>
 80019e2:	9b03      	ldr	r3, [sp, #12]
 80019e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80019e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80019ea:	4613      	mov	r3, r2
 80019ec:	f000 8140 	beq.w	8001c70 <_vfprintf_r+0x12c8>
 80019f0:	3304      	adds	r3, #4
 80019f2:	8814      	ldrh	r4, [r2, #0]
 80019f4:	930a      	str	r3, [sp, #40]	; 0x28
 80019f6:	2500      	movs	r5, #0
 80019f8:	f7ff bb1a 	b.w	8001030 <_vfprintf_r+0x688>
 80019fc:	9a03      	ldr	r2, [sp, #12]
 80019fe:	e6bd      	b.n	800177c <_vfprintf_r+0xdd4>
 8001a00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	f005 fbe4 	bl	80071d4 <__aeabi_dcmpun>
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	f040 82e1 	bne.w	8001fd4 <_vfprintf_r+0x162c>
 8001a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001a14:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8001a18:	f023 0720 	bic.w	r7, r3, #32
 8001a1c:	f000 8259 	beq.w	8001ed2 <_vfprintf_r+0x152a>
 8001a20:	2f47      	cmp	r7, #71	; 0x47
 8001a22:	f000 8153 	beq.w	8001ccc <_vfprintf_r+0x1324>
 8001a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001a28:	9a03      	ldr	r2, [sp, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a30:	920b      	str	r2, [sp, #44]	; 0x2c
 8001a32:	f2c0 8256 	blt.w	8001ee2 <_vfprintf_r+0x153a>
 8001a36:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8001a3a:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9305      	str	r3, [sp, #20]
 8001a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001a44:	2b66      	cmp	r3, #102	; 0x66
 8001a46:	f000 8230 	beq.w	8001eaa <_vfprintf_r+0x1502>
 8001a4a:	2b46      	cmp	r3, #70	; 0x46
 8001a4c:	f000 8123 	beq.w	8001c96 <_vfprintf_r+0x12ee>
 8001a50:	2f45      	cmp	r7, #69	; 0x45
 8001a52:	bf0c      	ite	eq
 8001a54:	f10b 0501 	addeq.w	r5, fp, #1
 8001a58:	465d      	movne	r5, fp
 8001a5a:	aa21      	add	r2, sp, #132	; 0x84
 8001a5c:	ab1e      	add	r3, sp, #120	; 0x78
 8001a5e:	9201      	str	r2, [sp, #4]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	462a      	mov	r2, r5
 8001a64:	ab1d      	add	r3, sp, #116	; 0x74
 8001a66:	2102      	movs	r1, #2
 8001a68:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 8001a6c:	9806      	ldr	r0, [sp, #24]
 8001a6e:	f000 fcbb 	bl	80023e8 <_dtoa_r>
 8001a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001a74:	2b67      	cmp	r3, #103	; 0x67
 8001a76:	4606      	mov	r6, r0
 8001a78:	f040 8271 	bne.w	8001f5e <_vfprintf_r+0x15b6>
 8001a7c:	9b03      	ldr	r3, [sp, #12]
 8001a7e:	07da      	lsls	r2, r3, #31
 8001a80:	f140 8290 	bpl.w	8001fa4 <_vfprintf_r+0x15fc>
 8001a84:	1974      	adds	r4, r6, r5
 8001a86:	2200      	movs	r2, #0
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8001a8e:	f005 fb6f 	bl	8007170 <__aeabi_dcmpeq>
 8001a92:	2800      	cmp	r0, #0
 8001a94:	f040 8175 	bne.w	8001d82 <_vfprintf_r+0x13da>
 8001a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001a9a:	429c      	cmp	r4, r3
 8001a9c:	d906      	bls.n	8001aac <_vfprintf_r+0x1104>
 8001a9e:	2130      	movs	r1, #48	; 0x30
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	9221      	str	r2, [sp, #132]	; 0x84
 8001aa4:	7019      	strb	r1, [r3, #0]
 8001aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001aa8:	429c      	cmp	r4, r3
 8001aaa:	d8f9      	bhi.n	8001aa0 <_vfprintf_r+0x10f8>
 8001aac:	1b9b      	subs	r3, r3, r6
 8001aae:	2f47      	cmp	r7, #71	; 0x47
 8001ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8001ab2:	f000 8153 	beq.w	8001d5c <_vfprintf_r+0x13b4>
 8001ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ab8:	2b65      	cmp	r3, #101	; 0x65
 8001aba:	f340 825f 	ble.w	8001f7c <_vfprintf_r+0x15d4>
 8001abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ac0:	2b66      	cmp	r3, #102	; 0x66
 8001ac2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8001ac6:	f000 8222 	beq.w	8001f0e <_vfprintf_r+0x1566>
 8001aca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001acc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001ace:	428a      	cmp	r2, r1
 8001ad0:	f2c0 8210 	blt.w	8001ef4 <_vfprintf_r+0x154c>
 8001ad4:	9b03      	ldr	r3, [sp, #12]
 8001ad6:	07db      	lsls	r3, r3, #31
 8001ad8:	f100 8266 	bmi.w	8001fa8 <_vfprintf_r+0x1600>
 8001adc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8001ae2:	2267      	movs	r2, #103	; 0x67
 8001ae4:	920d      	str	r2, [sp, #52]	; 0x34
 8001ae6:	9a05      	ldr	r2, [sp, #20]
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	f040 8114 	bne.w	8001d16 <_vfprintf_r+0x136e>
 8001aee:	9305      	str	r3, [sp, #20]
 8001af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001af2:	9303      	str	r3, [sp, #12]
 8001af4:	4693      	mov	fp, r2
 8001af6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8001afa:	f7ff b96f 	b.w	8000ddc <_vfprintf_r+0x434>
 8001afe:	f027 0707 	bic.w	r7, r7, #7
 8001b02:	ed97 7b00 	vldr	d7, [r7]
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8001b10:	f7ff bb79 	b.w	8001206 <_vfprintf_r+0x85e>
 8001b14:	9b03      	ldr	r3, [sp, #12]
 8001b16:	06de      	lsls	r6, r3, #27
 8001b18:	d40b      	bmi.n	8001b32 <_vfprintf_r+0x118a>
 8001b1a:	9b03      	ldr	r3, [sp, #12]
 8001b1c:	065d      	lsls	r5, r3, #25
 8001b1e:	d508      	bpl.n	8001b32 <_vfprintf_r+0x118a>
 8001b20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b22:	6813      	ldr	r3, [r2, #0]
 8001b24:	3204      	adds	r2, #4
 8001b26:	920a      	str	r2, [sp, #40]	; 0x28
 8001b28:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8001b2c:	801a      	strh	r2, [r3, #0]
 8001b2e:	f7fe bf7d 	b.w	8000a2c <_vfprintf_r+0x84>
 8001b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b34:	6813      	ldr	r3, [r2, #0]
 8001b36:	3204      	adds	r2, #4
 8001b38:	920a      	str	r2, [sp, #40]	; 0x28
 8001b3a:	9a07      	ldr	r2, [sp, #28]
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f7fe bf75 	b.w	8000a2c <_vfprintf_r+0x84>
 8001b42:	2700      	movs	r7, #0
 8001b44:	45bb      	cmp	fp, r7
 8001b46:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8001b4a:	f6ff ac28 	blt.w	800139e <_vfprintf_r+0x9f6>
 8001b4e:	9b03      	ldr	r3, [sp, #12]
 8001b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b54:	9303      	str	r3, [sp, #12]
 8001b56:	f7ff bbf5 	b.w	8001344 <_vfprintf_r+0x99c>
 8001b5a:	4614      	mov	r4, r2
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001b60:	9324      	str	r3, [sp, #144]	; 0x90
 8001b62:	442c      	add	r4, r5
 8001b64:	2b07      	cmp	r3, #7
 8001b66:	9425      	str	r4, [sp, #148]	; 0x94
 8001b68:	e889 0024 	stmia.w	r9, {r2, r5}
 8001b6c:	f73f ae38 	bgt.w	80017e0 <_vfprintf_r+0xe38>
 8001b70:	f109 0908 	add.w	r9, r9, #8
 8001b74:	e63f      	b.n	80017f6 <_vfprintf_r+0xe4e>
 8001b76:	aa23      	add	r2, sp, #140	; 0x8c
 8001b78:	9904      	ldr	r1, [sp, #16]
 8001b7a:	9806      	ldr	r0, [sp, #24]
 8001b7c:	f003 fdba 	bl	80056f4 <__sprint_r>
 8001b80:	2800      	cmp	r0, #0
 8001b82:	f47f a842 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001b86:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001b88:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001b8c:	e429      	b.n	80013e2 <_vfprintf_r+0xa3a>
 8001b8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001b90:	4aba      	ldr	r2, [pc, #744]	; (8001e7c <_vfprintf_r+0x14d4>)
 8001b92:	f8c9 2000 	str.w	r2, [r9]
 8001b96:	3301      	adds	r3, #1
 8001b98:	3401      	adds	r4, #1
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	9425      	str	r4, [sp, #148]	; 0x94
 8001ba0:	9324      	str	r3, [sp, #144]	; 0x90
 8001ba2:	f8c9 2004 	str.w	r2, [r9, #4]
 8001ba6:	dc69      	bgt.n	8001c7c <_vfprintf_r+0x12d4>
 8001ba8:	f109 0908 	add.w	r9, r9, #8
 8001bac:	b92d      	cbnz	r5, 8001bba <_vfprintf_r+0x1212>
 8001bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001bb0:	b91b      	cbnz	r3, 8001bba <_vfprintf_r+0x1212>
 8001bb2:	9b03      	ldr	r3, [sp, #12]
 8001bb4:	07d9      	lsls	r1, r3, #31
 8001bb6:	f57f a9d5 	bpl.w	8000f64 <_vfprintf_r+0x5bc>
 8001bba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001bbc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001bbe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001bc0:	f8c9 2000 	str.w	r2, [r9]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	440c      	add	r4, r1
 8001bc8:	2b07      	cmp	r3, #7
 8001bca:	9425      	str	r4, [sp, #148]	; 0x94
 8001bcc:	f8c9 1004 	str.w	r1, [r9, #4]
 8001bd0:	9324      	str	r3, [sp, #144]	; 0x90
 8001bd2:	f300 81d5 	bgt.w	8001f80 <_vfprintf_r+0x15d8>
 8001bd6:	f109 0908 	add.w	r9, r9, #8
 8001bda:	426d      	negs	r5, r5
 8001bdc:	2d00      	cmp	r5, #0
 8001bde:	f340 80b0 	ble.w	8001d42 <_vfprintf_r+0x139a>
 8001be2:	4aa7      	ldr	r2, [pc, #668]	; (8001e80 <_vfprintf_r+0x14d8>)
 8001be4:	920b      	str	r2, [sp, #44]	; 0x2c
 8001be6:	2d10      	cmp	r5, #16
 8001be8:	f340 811f 	ble.w	8001e2a <_vfprintf_r+0x1482>
 8001bec:	4622      	mov	r2, r4
 8001bee:	2710      	movs	r7, #16
 8001bf0:	f8dd b018 	ldr.w	fp, [sp, #24]
 8001bf4:	9c04      	ldr	r4, [sp, #16]
 8001bf6:	e005      	b.n	8001c04 <_vfprintf_r+0x125c>
 8001bf8:	f109 0908 	add.w	r9, r9, #8
 8001bfc:	3d10      	subs	r5, #16
 8001bfe:	2d10      	cmp	r5, #16
 8001c00:	f340 8112 	ble.w	8001e28 <_vfprintf_r+0x1480>
 8001c04:	3301      	adds	r3, #1
 8001c06:	3210      	adds	r2, #16
 8001c08:	2b07      	cmp	r3, #7
 8001c0a:	9225      	str	r2, [sp, #148]	; 0x94
 8001c0c:	9324      	str	r3, [sp, #144]	; 0x90
 8001c0e:	f8c9 a000 	str.w	sl, [r9]
 8001c12:	f8c9 7004 	str.w	r7, [r9, #4]
 8001c16:	ddef      	ble.n	8001bf8 <_vfprintf_r+0x1250>
 8001c18:	aa23      	add	r2, sp, #140	; 0x8c
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	4658      	mov	r0, fp
 8001c1e:	f003 fd69 	bl	80056f4 <__sprint_r>
 8001c22:	2800      	cmp	r0, #0
 8001c24:	f47e aff1 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001c28:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001c2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001c2c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001c30:	e7e4      	b.n	8001bfc <_vfprintf_r+0x1254>
 8001c32:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001c34:	f7ff bbac 	b.w	8001390 <_vfprintf_r+0x9e8>
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c3c:	f7fe bfeb 	b.w	8000c16 <_vfprintf_r+0x26e>
 8001c40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001c42:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8001c46:	4603      	mov	r3, r0
 8001c48:	f1bb 0f00 	cmp.w	fp, #0
 8001c4c:	f103 0304 	add.w	r3, r3, #4
 8001c50:	8804      	ldrh	r4, [r0, #0]
 8001c52:	f04f 0500 	mov.w	r5, #0
 8001c56:	f2c0 81b0 	blt.w	8001fba <_vfprintf_r+0x1612>
 8001c5a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001c5e:	9103      	str	r1, [sp, #12]
 8001c60:	ea54 0105 	orrs.w	r1, r4, r5
 8001c64:	930a      	str	r3, [sp, #40]	; 0x28
 8001c66:	4617      	mov	r7, r2
 8001c68:	f47f a894 	bne.w	8000d94 <_vfprintf_r+0x3ec>
 8001c6c:	f7ff ba4e 	b.w	800110c <_vfprintf_r+0x764>
 8001c70:	3304      	adds	r3, #4
 8001c72:	6814      	ldr	r4, [r2, #0]
 8001c74:	930a      	str	r3, [sp, #40]	; 0x28
 8001c76:	2500      	movs	r5, #0
 8001c78:	f7ff b9da 	b.w	8001030 <_vfprintf_r+0x688>
 8001c7c:	aa23      	add	r2, sp, #140	; 0x8c
 8001c7e:	9904      	ldr	r1, [sp, #16]
 8001c80:	9806      	ldr	r0, [sp, #24]
 8001c82:	f003 fd37 	bl	80056f4 <__sprint_r>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	f47e afbf 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001c8c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001c8e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001c90:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001c94:	e78a      	b.n	8001bac <_vfprintf_r+0x1204>
 8001c96:	aa21      	add	r2, sp, #132	; 0x84
 8001c98:	ab1e      	add	r3, sp, #120	; 0x78
 8001c9a:	9201      	str	r2, [sp, #4]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	465a      	mov	r2, fp
 8001ca0:	ab1d      	add	r3, sp, #116	; 0x74
 8001ca2:	2103      	movs	r1, #3
 8001ca4:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 8001ca8:	9806      	ldr	r0, [sp, #24]
 8001caa:	f000 fb9d 	bl	80023e8 <_dtoa_r>
 8001cae:	465d      	mov	r5, fp
 8001cb0:	4606      	mov	r6, r0
 8001cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001cb4:	2b46      	cmp	r3, #70	; 0x46
 8001cb6:	eb06 0405 	add.w	r4, r6, r5
 8001cba:	f47f aee4 	bne.w	8001a86 <_vfprintf_r+0x10de>
 8001cbe:	7833      	ldrb	r3, [r6, #0]
 8001cc0:	2b30      	cmp	r3, #48	; 0x30
 8001cc2:	f000 8196 	beq.w	8001ff2 <_vfprintf_r+0x164a>
 8001cc6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001cc8:	442c      	add	r4, r5
 8001cca:	e6dc      	b.n	8001a86 <_vfprintf_r+0x10de>
 8001ccc:	f1bb 0f00 	cmp.w	fp, #0
 8001cd0:	bf08      	it	eq
 8001cd2:	f04f 0b01 	moveq.w	fp, #1
 8001cd6:	e6a6      	b.n	8001a26 <_vfprintf_r+0x107e>
 8001cd8:	9b03      	ldr	r3, [sp, #12]
 8001cda:	f043 0320 	orr.w	r3, r3, #32
 8001cde:	9303      	str	r3, [sp, #12]
 8001ce0:	f108 0801 	add.w	r8, r8, #1
 8001ce4:	f898 3000 	ldrb.w	r3, [r8]
 8001ce8:	f7fe bed3 	b.w	8000a92 <_vfprintf_r+0xea>
 8001cec:	aa23      	add	r2, sp, #140	; 0x8c
 8001cee:	9904      	ldr	r1, [sp, #16]
 8001cf0:	9806      	ldr	r0, [sp, #24]
 8001cf2:	f003 fcff 	bl	80056f4 <__sprint_r>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	f47e af87 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001cfc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001cfe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001d02:	f7ff bb86 	b.w	8001412 <_vfprintf_r+0xa6a>
 8001d06:	4630      	mov	r0, r6
 8001d08:	f7fe fcfa 	bl	8000700 <strlen>
 8001d0c:	46a3      	mov	fp, r4
 8001d0e:	4603      	mov	r3, r0
 8001d10:	9009      	str	r0, [sp, #36]	; 0x24
 8001d12:	f7ff bb06 	b.w	8001322 <_vfprintf_r+0x97a>
 8001d16:	272d      	movs	r7, #45	; 0x2d
 8001d18:	9305      	str	r3, [sp, #20]
 8001d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001d1c:	9303      	str	r3, [sp, #12]
 8001d1e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8001d22:	f04f 0b00 	mov.w	fp, #0
 8001d26:	f7ff b85a 	b.w	8000dde <_vfprintf_r+0x436>
 8001d2a:	aa23      	add	r2, sp, #140	; 0x8c
 8001d2c:	9904      	ldr	r1, [sp, #16]
 8001d2e:	9806      	ldr	r0, [sp, #24]
 8001d30:	f003 fce0 	bl	80056f4 <__sprint_r>
 8001d34:	2800      	cmp	r0, #0
 8001d36:	f47e af68 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001d3a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001d3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001d3e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001d42:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001d44:	f8c9 6000 	str.w	r6, [r9]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	440c      	add	r4, r1
 8001d4c:	2b07      	cmp	r3, #7
 8001d4e:	9425      	str	r4, [sp, #148]	; 0x94
 8001d50:	9324      	str	r3, [sp, #144]	; 0x90
 8001d52:	f8c9 1004 	str.w	r1, [r9, #4]
 8001d56:	f77f a903 	ble.w	8000f60 <_vfprintf_r+0x5b8>
 8001d5a:	e41f      	b.n	800159c <_vfprintf_r+0xbf4>
 8001d5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001d5e:	1cd8      	adds	r0, r3, #3
 8001d60:	db11      	blt.n	8001d86 <_vfprintf_r+0x13de>
 8001d62:	459b      	cmp	fp, r3
 8001d64:	db0f      	blt.n	8001d86 <_vfprintf_r+0x13de>
 8001d66:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d68:	e6af      	b.n	8001aca <_vfprintf_r+0x1122>
 8001d6a:	aa23      	add	r2, sp, #140	; 0x8c
 8001d6c:	9904      	ldr	r1, [sp, #16]
 8001d6e:	9806      	ldr	r0, [sp, #24]
 8001d70:	f003 fcc0 	bl	80056f4 <__sprint_r>
 8001d74:	2800      	cmp	r0, #0
 8001d76:	f47e af48 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001d7a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001d7c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001d80:	e473      	b.n	800166a <_vfprintf_r+0xcc2>
 8001d82:	4623      	mov	r3, r4
 8001d84:	e692      	b.n	8001aac <_vfprintf_r+0x1104>
 8001d86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001d88:	3a02      	subs	r2, #2
 8001d8a:	920d      	str	r2, [sp, #52]	; 0x34
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8001d94:	931d      	str	r3, [sp, #116]	; 0x74
 8001d96:	bfb8      	it	lt
 8001d98:	425b      	neglt	r3, r3
 8001d9a:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
 8001d9e:	bfb4      	ite	lt
 8001da0:	222d      	movlt	r2, #45	; 0x2d
 8001da2:	222b      	movge	r2, #43	; 0x2b
 8001da4:	2b09      	cmp	r3, #9
 8001da6:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 8001daa:	f340 8109 	ble.w	8001fc0 <_vfprintf_r+0x1618>
 8001dae:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 8001db2:	4604      	mov	r4, r0
 8001db4:	4a33      	ldr	r2, [pc, #204]	; (8001e84 <_vfprintf_r+0x14dc>)
 8001db6:	fb82 2103 	smull	r2, r1, r2, r3
 8001dba:	17da      	asrs	r2, r3, #31
 8001dbc:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8001dc0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001dc4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8001dc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001dcc:	2a09      	cmp	r2, #9
 8001dce:	4613      	mov	r3, r2
 8001dd0:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8001dd4:	dcee      	bgt.n	8001db4 <_vfprintf_r+0x140c>
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	3330      	adds	r3, #48	; 0x30
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8001de0:	4288      	cmp	r0, r1
 8001de2:	f240 816d 	bls.w	80020c0 <_vfprintf_r+0x1718>
 8001de6:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
 8001dea:	4623      	mov	r3, r4
 8001dec:	e001      	b.n	8001df2 <_vfprintf_r+0x144a>
 8001dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001df2:	f801 2b01 	strb.w	r2, [r1], #1
 8001df6:	4298      	cmp	r0, r3
 8001df8:	d1f9      	bne.n	8001dee <_vfprintf_r+0x1446>
 8001dfa:	1c43      	adds	r3, r0, #1
 8001dfc:	1b1b      	subs	r3, r3, r4
 8001dfe:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 8001e02:	4413      	add	r3, r2
 8001e04:	aa1f      	add	r2, sp, #124	; 0x7c
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001e0a:	9315      	str	r3, [sp, #84]	; 0x54
 8001e0c:	2a01      	cmp	r2, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	9309      	str	r3, [sp, #36]	; 0x24
 8001e12:	f340 80fc 	ble.w	800200e <_vfprintf_r+0x1666>
 8001e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001e1a:	4413      	add	r3, r2
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8001e20:	920f      	str	r2, [sp, #60]	; 0x3c
 8001e22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001e26:	e65e      	b.n	8001ae6 <_vfprintf_r+0x113e>
 8001e28:	4614      	mov	r4, r2
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001e2e:	9324      	str	r3, [sp, #144]	; 0x90
 8001e30:	442c      	add	r4, r5
 8001e32:	2b07      	cmp	r3, #7
 8001e34:	9425      	str	r4, [sp, #148]	; 0x94
 8001e36:	e889 0024 	stmia.w	r9, {r2, r5}
 8001e3a:	f73f af76 	bgt.w	8001d2a <_vfprintf_r+0x1382>
 8001e3e:	f109 0908 	add.w	r9, r9, #8
 8001e42:	e77e      	b.n	8001d42 <_vfprintf_r+0x139a>
 8001e44:	aa23      	add	r2, sp, #140	; 0x8c
 8001e46:	9904      	ldr	r1, [sp, #16]
 8001e48:	9806      	ldr	r0, [sp, #24]
 8001e4a:	f003 fc53 	bl	80056f4 <__sprint_r>
 8001e4e:	2800      	cmp	r0, #0
 8001e50:	f47e aedb 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001e54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001e56:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001e58:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001e5c:	e4d5      	b.n	800180a <_vfprintf_r+0xe62>
 8001e5e:	2d06      	cmp	r5, #6
 8001e60:	462b      	mov	r3, r5
 8001e62:	bf28      	it	cs
 8001e64:	2306      	movcs	r3, #6
 8001e66:	9309      	str	r3, [sp, #36]	; 0x24
 8001e68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001e6c:	46b3      	mov	fp, r6
 8001e6e:	970a      	str	r7, [sp, #40]	; 0x28
 8001e70:	960f      	str	r6, [sp, #60]	; 0x3c
 8001e72:	4637      	mov	r7, r6
 8001e74:	9305      	str	r3, [sp, #20]
 8001e76:	4e04      	ldr	r6, [pc, #16]	; (8001e88 <_vfprintf_r+0x14e0>)
 8001e78:	f7fe bfb0 	b.w	8000ddc <_vfprintf_r+0x434>
 8001e7c:	0801bb20 	.word	0x0801bb20
 8001e80:	0800c734 	.word	0x0800c734
 8001e84:	66666667 	.word	0x66666667
 8001e88:	0801bb18 	.word	0x0801bb18
 8001e8c:	aa23      	add	r2, sp, #140	; 0x8c
 8001e8e:	9904      	ldr	r1, [sp, #16]
 8001e90:	9806      	ldr	r0, [sp, #24]
 8001e92:	f003 fc2f 	bl	80056f4 <__sprint_r>
 8001e96:	2800      	cmp	r0, #0
 8001e98:	f47e aeb7 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001e9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001e9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001ea0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001ea8:	e4c7      	b.n	800183a <_vfprintf_r+0xe92>
 8001eaa:	aa21      	add	r2, sp, #132	; 0x84
 8001eac:	ab1e      	add	r3, sp, #120	; 0x78
 8001eae:	9201      	str	r2, [sp, #4]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	465a      	mov	r2, fp
 8001eb4:	ab1d      	add	r3, sp, #116	; 0x74
 8001eb6:	2103      	movs	r1, #3
 8001eb8:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 8001ebc:	9806      	ldr	r0, [sp, #24]
 8001ebe:	f000 fa93 	bl	80023e8 <_dtoa_r>
 8001ec2:	465d      	mov	r5, fp
 8001ec4:	4606      	mov	r6, r0
 8001ec6:	eb00 040b 	add.w	r4, r0, fp
 8001eca:	e6f8      	b.n	8001cbe <_vfprintf_r+0x1316>
 8001ecc:	9303      	str	r3, [sp, #12]
 8001ece:	f7ff b8cd 	b.w	800106c <_vfprintf_r+0x6c4>
 8001ed2:	f04f 0b06 	mov.w	fp, #6
 8001ed6:	e5a6      	b.n	8001a26 <_vfprintf_r+0x107e>
 8001ed8:	272d      	movs	r7, #45	; 0x2d
 8001eda:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8001ede:	f7ff b9b9 	b.w	8001254 <_vfprintf_r+0x8ac>
 8001ee2:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8001ee6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8001eea:	9319      	str	r3, [sp, #100]	; 0x64
 8001eec:	232d      	movs	r3, #45	; 0x2d
 8001eee:	9118      	str	r1, [sp, #96]	; 0x60
 8001ef0:	9305      	str	r3, [sp, #20]
 8001ef2:	e5a6      	b.n	8001a42 <_vfprintf_r+0x109a>
 8001ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ef8:	4413      	add	r3, r2
 8001efa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001efc:	9309      	str	r3, [sp, #36]	; 0x24
 8001efe:	2a00      	cmp	r2, #0
 8001f00:	f340 808f 	ble.w	8002022 <_vfprintf_r+0x167a>
 8001f04:	2267      	movs	r2, #103	; 0x67
 8001f06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001f0a:	920d      	str	r2, [sp, #52]	; 0x34
 8001f0c:	e5eb      	b.n	8001ae6 <_vfprintf_r+0x113e>
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f340 808f 	ble.w	8002032 <_vfprintf_r+0x168a>
 8001f14:	f1bb 0f00 	cmp.w	fp, #0
 8001f18:	d162      	bne.n	8001fe0 <_vfprintf_r+0x1638>
 8001f1a:	9a03      	ldr	r2, [sp, #12]
 8001f1c:	07d1      	lsls	r1, r2, #31
 8001f1e:	d45f      	bmi.n	8001fe0 <_vfprintf_r+0x1638>
 8001f20:	461a      	mov	r2, r3
 8001f22:	9209      	str	r2, [sp, #36]	; 0x24
 8001f24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001f28:	e5dd      	b.n	8001ae6 <_vfprintf_r+0x113e>
 8001f2a:	9b03      	ldr	r3, [sp, #12]
 8001f2c:	07db      	lsls	r3, r3, #31
 8001f2e:	465f      	mov	r7, fp
 8001f30:	d505      	bpl.n	8001f3e <_vfprintf_r+0x1596>
 8001f32:	ae40      	add	r6, sp, #256	; 0x100
 8001f34:	2330      	movs	r3, #48	; 0x30
 8001f36:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8001f3a:	f7fe bf45 	b.w	8000dc8 <_vfprintf_r+0x420>
 8001f3e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8001f42:	ae30      	add	r6, sp, #192	; 0xc0
 8001f44:	f7fe bf43 	b.w	8000dce <_vfprintf_r+0x426>
 8001f48:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8001f4c:	970a      	str	r7, [sp, #40]	; 0x28
 8001f4e:	9305      	str	r3, [sp, #20]
 8001f50:	9509      	str	r5, [sp, #36]	; 0x24
 8001f52:	4683      	mov	fp, r0
 8001f54:	900f      	str	r0, [sp, #60]	; 0x3c
 8001f56:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8001f5a:	f7fe bf3f 	b.w	8000ddc <_vfprintf_r+0x434>
 8001f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f60:	2b47      	cmp	r3, #71	; 0x47
 8001f62:	f47f ad8f 	bne.w	8001a84 <_vfprintf_r+0x10dc>
 8001f66:	9b03      	ldr	r3, [sp, #12]
 8001f68:	07dc      	lsls	r4, r3, #31
 8001f6a:	f53f aea2 	bmi.w	8001cb2 <_vfprintf_r+0x130a>
 8001f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001f70:	2f47      	cmp	r7, #71	; 0x47
 8001f72:	eba3 0306 	sub.w	r3, r3, r6
 8001f76:	930e      	str	r3, [sp, #56]	; 0x38
 8001f78:	f43f aef0 	beq.w	8001d5c <_vfprintf_r+0x13b4>
 8001f7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001f7e:	e705      	b.n	8001d8c <_vfprintf_r+0x13e4>
 8001f80:	aa23      	add	r2, sp, #140	; 0x8c
 8001f82:	9904      	ldr	r1, [sp, #16]
 8001f84:	9806      	ldr	r0, [sp, #24]
 8001f86:	f003 fbb5 	bl	80056f4 <__sprint_r>
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	f47e ae3d 	bne.w	8000c0a <_vfprintf_r+0x262>
 8001f90:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001f92:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001f94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001f96:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001f9a:	e61e      	b.n	8001bda <_vfprintf_r+0x1232>
 8001f9c:	46a0      	mov	r8, r4
 8001f9e:	2500      	movs	r5, #0
 8001fa0:	f7fe bd79 	b.w	8000a96 <_vfprintf_r+0xee>
 8001fa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001fa6:	e581      	b.n	8001aac <_vfprintf_r+0x1104>
 8001fa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001fac:	4413      	add	r3, r2
 8001fae:	2267      	movs	r2, #103	; 0x67
 8001fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8001fb2:	920d      	str	r2, [sp, #52]	; 0x34
 8001fb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001fb8:	e595      	b.n	8001ae6 <_vfprintf_r+0x113e>
 8001fba:	930a      	str	r3, [sp, #40]	; 0x28
 8001fbc:	4617      	mov	r7, r2
 8001fbe:	e405      	b.n	80017cc <_vfprintf_r+0xe24>
 8001fc0:	3330      	adds	r3, #48	; 0x30
 8001fc2:	2230      	movs	r2, #48	; 0x30
 8001fc4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8001fc8:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 8001fcc:	ab20      	add	r3, sp, #128	; 0x80
 8001fce:	e719      	b.n	8001e04 <_vfprintf_r+0x145c>
 8001fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8001fd2:	e503      	b.n	80019dc <_vfprintf_r+0x1034>
 8001fd4:	4e3c      	ldr	r6, [pc, #240]	; (80020c8 <_vfprintf_r+0x1720>)
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <_vfprintf_r+0x1724>)
 8001fd8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8001fdc:	f7ff b93c 	b.w	8001258 <_vfprintf_r+0x8b0>
 8001fe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001fe2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001fe4:	189d      	adds	r5, r3, r2
 8001fe6:	eb05 030b 	add.w	r3, r5, fp
 8001fea:	9309      	str	r3, [sp, #36]	; 0x24
 8001fec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ff0:	e579      	b.n	8001ae6 <_vfprintf_r+0x113e>
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8001ffa:	f005 f8b9 	bl	8007170 <__aeabi_dcmpeq>
 8001ffe:	2800      	cmp	r0, #0
 8002000:	f47f ae61 	bne.w	8001cc6 <_vfprintf_r+0x131e>
 8002004:	f1c5 0501 	rsb	r5, r5, #1
 8002008:	951d      	str	r5, [sp, #116]	; 0x74
 800200a:	442c      	add	r4, r5
 800200c:	e53b      	b.n	8001a86 <_vfprintf_r+0x10de>
 800200e:	9b03      	ldr	r3, [sp, #12]
 8002010:	f013 0301 	ands.w	r3, r3, #1
 8002014:	f47f aeff 	bne.w	8001e16 <_vfprintf_r+0x146e>
 8002018:	930f      	str	r3, [sp, #60]	; 0x3c
 800201a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800201c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002020:	e561      	b.n	8001ae6 <_vfprintf_r+0x113e>
 8002022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002026:	f1c3 0301 	rsb	r3, r3, #1
 800202a:	441a      	add	r2, r3
 800202c:	4613      	mov	r3, r2
 800202e:	9209      	str	r2, [sp, #36]	; 0x24
 8002030:	e768      	b.n	8001f04 <_vfprintf_r+0x155c>
 8002032:	f1bb 0f00 	cmp.w	fp, #0
 8002036:	d102      	bne.n	800203e <_vfprintf_r+0x1696>
 8002038:	9b03      	ldr	r3, [sp, #12]
 800203a:	07da      	lsls	r2, r3, #31
 800203c:	d507      	bpl.n	800204e <_vfprintf_r+0x16a6>
 800203e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002040:	1c5d      	adds	r5, r3, #1
 8002042:	eb05 030b 	add.w	r3, r5, fp
 8002046:	9309      	str	r3, [sp, #36]	; 0x24
 8002048:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800204c:	e54b      	b.n	8001ae6 <_vfprintf_r+0x113e>
 800204e:	2301      	movs	r3, #1
 8002050:	9309      	str	r3, [sp, #36]	; 0x24
 8002052:	e548      	b.n	8001ae6 <_vfprintf_r+0x113e>
 8002054:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002056:	f898 3001 	ldrb.w	r3, [r8, #1]
 800205a:	6805      	ldr	r5, [r0, #0]
 800205c:	3004      	adds	r0, #4
 800205e:	2d00      	cmp	r5, #0
 8002060:	900a      	str	r0, [sp, #40]	; 0x28
 8002062:	46a0      	mov	r8, r4
 8002064:	f6be ad15 	bge.w	8000a92 <_vfprintf_r+0xea>
 8002068:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800206c:	f7fe bd11 	b.w	8000a92 <_vfprintf_r+0xea>
 8002070:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002074:	f7ff b89a 	b.w	80011ac <_vfprintf_r+0x804>
 8002078:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800207c:	f7ff b864 	b.w	8001148 <_vfprintf_r+0x7a0>
 8002080:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002084:	f7fe bfc6 	b.w	8001014 <_vfprintf_r+0x66c>
 8002088:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800208c:	f7fe be63 	b.w	8000d56 <_vfprintf_r+0x3ae>
 8002090:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002094:	f7ff b819 	b.w	80010ca <_vfprintf_r+0x722>
 8002098:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800209c:	f7fe bdd1 	b.w	8000c42 <_vfprintf_r+0x29a>
 80020a0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80020a4:	f7ff b958 	b.w	8001358 <_vfprintf_r+0x9b0>
 80020a8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80020ac:	f7fe be2a 	b.w	8000d04 <_vfprintf_r+0x35c>
 80020b0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80020b4:	f7ff b8f4 	b.w	80012a0 <_vfprintf_r+0x8f8>
 80020b8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80020bc:	f7ff b893 	b.w	80011e6 <_vfprintf_r+0x83e>
 80020c0:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 80020c4:	e69e      	b.n	8001e04 <_vfprintf_r+0x145c>
 80020c6:	bf00      	nop
 80020c8:	0801baec 	.word	0x0801baec
 80020cc:	0801bae8 	.word	0x0801bae8

080020d0 <vfprintf>:
 80020d0:	b410      	push	{r4}
 80020d2:	4c04      	ldr	r4, [pc, #16]	; (80020e4 <vfprintf+0x14>)
 80020d4:	4613      	mov	r3, r2
 80020d6:	460a      	mov	r2, r1
 80020d8:	4601      	mov	r1, r0
 80020da:	6820      	ldr	r0, [r4, #0]
 80020dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020e0:	f7fe bc62 	b.w	80009a8 <_vfprintf_r>
 80020e4:	20000008 	.word	0x20000008

080020e8 <__sbprintf>:
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	460c      	mov	r4, r1
 80020ec:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80020f0:	8989      	ldrh	r1, [r1, #12]
 80020f2:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80020f4:	89e5      	ldrh	r5, [r4, #14]
 80020f6:	9619      	str	r6, [sp, #100]	; 0x64
 80020f8:	f021 0102 	bic.w	r1, r1, #2
 80020fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80020fe:	f8ad 500e 	strh.w	r5, [sp, #14]
 8002102:	2500      	movs	r5, #0
 8002104:	69e7      	ldr	r7, [r4, #28]
 8002106:	f8ad 100c 	strh.w	r1, [sp, #12]
 800210a:	9609      	str	r6, [sp, #36]	; 0x24
 800210c:	9506      	str	r5, [sp, #24]
 800210e:	ae1a      	add	r6, sp, #104	; 0x68
 8002110:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002114:	4669      	mov	r1, sp
 8002116:	9600      	str	r6, [sp, #0]
 8002118:	9604      	str	r6, [sp, #16]
 800211a:	9502      	str	r5, [sp, #8]
 800211c:	9505      	str	r5, [sp, #20]
 800211e:	9707      	str	r7, [sp, #28]
 8002120:	4606      	mov	r6, r0
 8002122:	f7fe fc41 	bl	80009a8 <_vfprintf_r>
 8002126:	1e05      	subs	r5, r0, #0
 8002128:	db07      	blt.n	800213a <__sbprintf+0x52>
 800212a:	4630      	mov	r0, r6
 800212c:	4669      	mov	r1, sp
 800212e:	f001 f919 	bl	8003364 <_fflush_r>
 8002132:	2800      	cmp	r0, #0
 8002134:	bf18      	it	ne
 8002136:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800213a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800213e:	065b      	lsls	r3, r3, #25
 8002140:	d503      	bpl.n	800214a <__sbprintf+0x62>
 8002142:	89a3      	ldrh	r3, [r4, #12]
 8002144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002148:	81a3      	strh	r3, [r4, #12]
 800214a:	4628      	mov	r0, r5
 800214c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8002150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002152:	bf00      	nop

08002154 <__swsetup_r>:
 8002154:	b538      	push	{r3, r4, r5, lr}
 8002156:	4b30      	ldr	r3, [pc, #192]	; (8002218 <__swsetup_r+0xc4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4605      	mov	r5, r0
 800215c:	460c      	mov	r4, r1
 800215e:	b113      	cbz	r3, 8002166 <__swsetup_r+0x12>
 8002160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002162:	2a00      	cmp	r2, #0
 8002164:	d038      	beq.n	80021d8 <__swsetup_r+0x84>
 8002166:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800216a:	b293      	uxth	r3, r2
 800216c:	0718      	lsls	r0, r3, #28
 800216e:	d50c      	bpl.n	800218a <__swsetup_r+0x36>
 8002170:	6920      	ldr	r0, [r4, #16]
 8002172:	b1a8      	cbz	r0, 80021a0 <__swsetup_r+0x4c>
 8002174:	f013 0201 	ands.w	r2, r3, #1
 8002178:	d01e      	beq.n	80021b8 <__swsetup_r+0x64>
 800217a:	6963      	ldr	r3, [r4, #20]
 800217c:	2200      	movs	r2, #0
 800217e:	425b      	negs	r3, r3
 8002180:	61a3      	str	r3, [r4, #24]
 8002182:	60a2      	str	r2, [r4, #8]
 8002184:	b1f0      	cbz	r0, 80021c4 <__swsetup_r+0x70>
 8002186:	2000      	movs	r0, #0
 8002188:	bd38      	pop	{r3, r4, r5, pc}
 800218a:	06d9      	lsls	r1, r3, #27
 800218c:	d53c      	bpl.n	8002208 <__swsetup_r+0xb4>
 800218e:	0758      	lsls	r0, r3, #29
 8002190:	d426      	bmi.n	80021e0 <__swsetup_r+0x8c>
 8002192:	6920      	ldr	r0, [r4, #16]
 8002194:	f042 0308 	orr.w	r3, r2, #8
 8002198:	81a3      	strh	r3, [r4, #12]
 800219a:	b29b      	uxth	r3, r3
 800219c:	2800      	cmp	r0, #0
 800219e:	d1e9      	bne.n	8002174 <__swsetup_r+0x20>
 80021a0:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80021a4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80021a8:	d0e4      	beq.n	8002174 <__swsetup_r+0x20>
 80021aa:	4628      	mov	r0, r5
 80021ac:	4621      	mov	r1, r4
 80021ae:	f001 fd81 	bl	8003cb4 <__smakebuf_r>
 80021b2:	89a3      	ldrh	r3, [r4, #12]
 80021b4:	6920      	ldr	r0, [r4, #16]
 80021b6:	e7dd      	b.n	8002174 <__swsetup_r+0x20>
 80021b8:	0799      	lsls	r1, r3, #30
 80021ba:	bf58      	it	pl
 80021bc:	6962      	ldrpl	r2, [r4, #20]
 80021be:	60a2      	str	r2, [r4, #8]
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d1e0      	bne.n	8002186 <__swsetup_r+0x32>
 80021c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021c8:	061a      	lsls	r2, r3, #24
 80021ca:	d5dd      	bpl.n	8002188 <__swsetup_r+0x34>
 80021cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d0:	81a3      	strh	r3, [r4, #12]
 80021d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	4618      	mov	r0, r3
 80021da:	f001 f9d3 	bl	8003584 <__sinit>
 80021de:	e7c2      	b.n	8002166 <__swsetup_r+0x12>
 80021e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80021e2:	b151      	cbz	r1, 80021fa <__swsetup_r+0xa6>
 80021e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80021e8:	4299      	cmp	r1, r3
 80021ea:	d004      	beq.n	80021f6 <__swsetup_r+0xa2>
 80021ec:	4628      	mov	r0, r5
 80021ee:	f001 fa37 	bl	8003660 <_free_r>
 80021f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80021f6:	2300      	movs	r3, #0
 80021f8:	6323      	str	r3, [r4, #48]	; 0x30
 80021fa:	2300      	movs	r3, #0
 80021fc:	6920      	ldr	r0, [r4, #16]
 80021fe:	6063      	str	r3, [r4, #4]
 8002200:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8002204:	6020      	str	r0, [r4, #0]
 8002206:	e7c5      	b.n	8002194 <__swsetup_r+0x40>
 8002208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800220c:	2309      	movs	r3, #9
 800220e:	602b      	str	r3, [r5, #0]
 8002210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002214:	81a2      	strh	r2, [r4, #12]
 8002216:	bd38      	pop	{r3, r4, r5, pc}
 8002218:	20000008 	.word	0x20000008

0800221c <__register_exitproc>:
 800221c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002220:	4c25      	ldr	r4, [pc, #148]	; (80022b8 <__register_exitproc+0x9c>)
 8002222:	6825      	ldr	r5, [r4, #0]
 8002224:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8002228:	4606      	mov	r6, r0
 800222a:	4688      	mov	r8, r1
 800222c:	4692      	mov	sl, r2
 800222e:	4699      	mov	r9, r3
 8002230:	b3c4      	cbz	r4, 80022a4 <__register_exitproc+0x88>
 8002232:	6860      	ldr	r0, [r4, #4]
 8002234:	281f      	cmp	r0, #31
 8002236:	dc17      	bgt.n	8002268 <__register_exitproc+0x4c>
 8002238:	1c43      	adds	r3, r0, #1
 800223a:	b176      	cbz	r6, 800225a <__register_exitproc+0x3e>
 800223c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002240:	2201      	movs	r2, #1
 8002242:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8002246:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 800224a:	4082      	lsls	r2, r0
 800224c:	4311      	orrs	r1, r2
 800224e:	2e02      	cmp	r6, #2
 8002250:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 8002254:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8002258:	d01e      	beq.n	8002298 <__register_exitproc+0x7c>
 800225a:	3002      	adds	r0, #2
 800225c:	6063      	str	r3, [r4, #4]
 800225e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8002262:	2000      	movs	r0, #0
 8002264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <__register_exitproc+0xa0>)
 800226a:	b303      	cbz	r3, 80022ae <__register_exitproc+0x92>
 800226c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002270:	f001 fd64 	bl	8003d3c <malloc>
 8002274:	4604      	mov	r4, r0
 8002276:	b1d0      	cbz	r0, 80022ae <__register_exitproc+0x92>
 8002278:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800227c:	2700      	movs	r7, #0
 800227e:	e880 0088 	stmia.w	r0, {r3, r7}
 8002282:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8002286:	4638      	mov	r0, r7
 8002288:	2301      	movs	r3, #1
 800228a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800228e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8002292:	2e00      	cmp	r6, #0
 8002294:	d0e1      	beq.n	800225a <__register_exitproc+0x3e>
 8002296:	e7d1      	b.n	800223c <__register_exitproc+0x20>
 8002298:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800229c:	430a      	orrs	r2, r1
 800229e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80022a2:	e7da      	b.n	800225a <__register_exitproc+0x3e>
 80022a4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80022a8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80022ac:	e7c1      	b.n	8002232 <__register_exitproc+0x16>
 80022ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022b6:	bf00      	nop
 80022b8:	0800c720 	.word	0x0800c720
 80022bc:	08003d3d 	.word	0x08003d3d

080022c0 <quorem>:
 80022c0:	6902      	ldr	r2, [r0, #16]
 80022c2:	690b      	ldr	r3, [r1, #16]
 80022c4:	4293      	cmp	r3, r2
 80022c6:	f300 808d 	bgt.w	80023e4 <quorem+0x124>
 80022ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80022d2:	f101 0714 	add.w	r7, r1, #20
 80022d6:	f100 0b14 	add.w	fp, r0, #20
 80022da:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 80022de:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 80022e2:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80022e6:	b083      	sub	sp, #12
 80022e8:	3201      	adds	r2, #1
 80022ea:	fbb3 f9f2 	udiv	r9, r3, r2
 80022ee:	eb0b 0304 	add.w	r3, fp, r4
 80022f2:	9400      	str	r4, [sp, #0]
 80022f4:	eb07 0a04 	add.w	sl, r7, r4
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	f1b9 0f00 	cmp.w	r9, #0
 80022fe:	d039      	beq.n	8002374 <quorem+0xb4>
 8002300:	2500      	movs	r5, #0
 8002302:	46bc      	mov	ip, r7
 8002304:	46de      	mov	lr, fp
 8002306:	462b      	mov	r3, r5
 8002308:	f85c 6b04 	ldr.w	r6, [ip], #4
 800230c:	f8de 2000 	ldr.w	r2, [lr]
 8002310:	b2b4      	uxth	r4, r6
 8002312:	fb09 5504 	mla	r5, r9, r4, r5
 8002316:	0c36      	lsrs	r6, r6, #16
 8002318:	0c2c      	lsrs	r4, r5, #16
 800231a:	fb09 4406 	mla	r4, r9, r6, r4
 800231e:	b2ad      	uxth	r5, r5
 8002320:	1b5b      	subs	r3, r3, r5
 8002322:	b2a6      	uxth	r6, r4
 8002324:	fa13 f382 	uxtah	r3, r3, r2
 8002328:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 800232c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8002330:	b29b      	uxth	r3, r3
 8002332:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002336:	45e2      	cmp	sl, ip
 8002338:	f84e 3b04 	str.w	r3, [lr], #4
 800233c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8002340:	ea4f 4326 	mov.w	r3, r6, asr #16
 8002344:	d2e0      	bcs.n	8002308 <quorem+0x48>
 8002346:	9b00      	ldr	r3, [sp, #0]
 8002348:	f85b 3003 	ldr.w	r3, [fp, r3]
 800234c:	b993      	cbnz	r3, 8002374 <quorem+0xb4>
 800234e:	9c01      	ldr	r4, [sp, #4]
 8002350:	1f23      	subs	r3, r4, #4
 8002352:	459b      	cmp	fp, r3
 8002354:	d20c      	bcs.n	8002370 <quorem+0xb0>
 8002356:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800235a:	b94b      	cbnz	r3, 8002370 <quorem+0xb0>
 800235c:	f1a4 0308 	sub.w	r3, r4, #8
 8002360:	e002      	b.n	8002368 <quorem+0xa8>
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	3b04      	subs	r3, #4
 8002366:	b91a      	cbnz	r2, 8002370 <quorem+0xb0>
 8002368:	459b      	cmp	fp, r3
 800236a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800236e:	d3f8      	bcc.n	8002362 <quorem+0xa2>
 8002370:	f8c0 8010 	str.w	r8, [r0, #16]
 8002374:	4604      	mov	r4, r0
 8002376:	f002 fb51 	bl	8004a1c <__mcmp>
 800237a:	2800      	cmp	r0, #0
 800237c:	db2e      	blt.n	80023dc <quorem+0x11c>
 800237e:	f109 0901 	add.w	r9, r9, #1
 8002382:	465d      	mov	r5, fp
 8002384:	2300      	movs	r3, #0
 8002386:	f857 1b04 	ldr.w	r1, [r7], #4
 800238a:	6828      	ldr	r0, [r5, #0]
 800238c:	b28a      	uxth	r2, r1
 800238e:	1a9a      	subs	r2, r3, r2
 8002390:	0c09      	lsrs	r1, r1, #16
 8002392:	fa12 f280 	uxtah	r2, r2, r0
 8002396:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800239a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800239e:	b291      	uxth	r1, r2
 80023a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80023a4:	45ba      	cmp	sl, r7
 80023a6:	f845 1b04 	str.w	r1, [r5], #4
 80023aa:	ea4f 4323 	mov.w	r3, r3, asr #16
 80023ae:	d2ea      	bcs.n	8002386 <quorem+0xc6>
 80023b0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80023b4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80023b8:	b982      	cbnz	r2, 80023dc <quorem+0x11c>
 80023ba:	1f1a      	subs	r2, r3, #4
 80023bc:	4593      	cmp	fp, r2
 80023be:	d20b      	bcs.n	80023d8 <quorem+0x118>
 80023c0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80023c4:	b942      	cbnz	r2, 80023d8 <quorem+0x118>
 80023c6:	3b08      	subs	r3, #8
 80023c8:	e002      	b.n	80023d0 <quorem+0x110>
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	3b04      	subs	r3, #4
 80023ce:	b91a      	cbnz	r2, 80023d8 <quorem+0x118>
 80023d0:	459b      	cmp	fp, r3
 80023d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80023d6:	d3f8      	bcc.n	80023ca <quorem+0x10a>
 80023d8:	f8c4 8010 	str.w	r8, [r4, #16]
 80023dc:	4648      	mov	r0, r9
 80023de:	b003      	add	sp, #12
 80023e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023e4:	2000      	movs	r0, #0
 80023e6:	4770      	bx	lr

080023e8 <_dtoa_r>:
 80023e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ec:	ec57 6b10 	vmov	r6, r7, d0
 80023f0:	b09b      	sub	sp, #108	; 0x6c
 80023f2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80023f4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80023f6:	9100      	str	r1, [sp, #0]
 80023f8:	4681      	mov	r9, r0
 80023fa:	9205      	str	r2, [sp, #20]
 80023fc:	9303      	str	r3, [sp, #12]
 80023fe:	ee10 aa10 	vmov	sl, s0
 8002402:	46bb      	mov	fp, r7
 8002404:	b154      	cbz	r4, 800241c <_dtoa_r+0x34>
 8002406:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002408:	6062      	str	r2, [r4, #4]
 800240a:	2301      	movs	r3, #1
 800240c:	4093      	lsls	r3, r2
 800240e:	60a3      	str	r3, [r4, #8]
 8002410:	4621      	mov	r1, r4
 8002412:	f002 f8d5 	bl	80045c0 <_Bfree>
 8002416:	2300      	movs	r3, #0
 8002418:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800241c:	f1bb 0f00 	cmp.w	fp, #0
 8002420:	465c      	mov	r4, fp
 8002422:	db34      	blt.n	800248e <_dtoa_r+0xa6>
 8002424:	2300      	movs	r3, #0
 8002426:	602b      	str	r3, [r5, #0]
 8002428:	4ba1      	ldr	r3, [pc, #644]	; (80026b0 <_dtoa_r+0x2c8>)
 800242a:	461a      	mov	r2, r3
 800242c:	4023      	ands	r3, r4
 800242e:	4293      	cmp	r3, r2
 8002430:	d016      	beq.n	8002460 <_dtoa_r+0x78>
 8002432:	2200      	movs	r2, #0
 8002434:	2300      	movs	r3, #0
 8002436:	4650      	mov	r0, sl
 8002438:	4659      	mov	r1, fp
 800243a:	f004 fe99 	bl	8007170 <__aeabi_dcmpeq>
 800243e:	4656      	mov	r6, sl
 8002440:	465f      	mov	r7, fp
 8002442:	4680      	mov	r8, r0
 8002444:	b348      	cbz	r0, 800249a <_dtoa_r+0xb2>
 8002446:	9a03      	ldr	r2, [sp, #12]
 8002448:	2301      	movs	r3, #1
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80be 	beq.w	80025d0 <_dtoa_r+0x1e8>
 8002454:	4897      	ldr	r0, [pc, #604]	; (80026b4 <_dtoa_r+0x2cc>)
 8002456:	6018      	str	r0, [r3, #0]
 8002458:	3801      	subs	r0, #1
 800245a:	b01b      	add	sp, #108	; 0x6c
 800245c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002460:	9a03      	ldr	r2, [sp, #12]
 8002462:	f242 730f 	movw	r3, #9999	; 0x270f
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	f1ba 0f00 	cmp.w	sl, #0
 800246c:	f000 809a 	beq.w	80025a4 <_dtoa_r+0x1bc>
 8002470:	4891      	ldr	r0, [pc, #580]	; (80026b8 <_dtoa_r+0x2d0>)
 8002472:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <_dtoa_r+0x72>
 8002478:	78c3      	ldrb	r3, [r0, #3]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80aa 	beq.w	80025d4 <_dtoa_r+0x1ec>
 8002480:	f100 0308 	add.w	r3, r0, #8
 8002484:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	b01b      	add	sp, #108	; 0x6c
 800248a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800248e:	2301      	movs	r3, #1
 8002490:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 8002494:	602b      	str	r3, [r5, #0]
 8002496:	46a3      	mov	fp, r4
 8002498:	e7c6      	b.n	8002428 <_dtoa_r+0x40>
 800249a:	aa18      	add	r2, sp, #96	; 0x60
 800249c:	a919      	add	r1, sp, #100	; 0x64
 800249e:	ec47 6b10 	vmov	d0, r6, r7
 80024a2:	4648      	mov	r0, r9
 80024a4:	f002 fbf8 	bl	8004c98 <__d2b>
 80024a8:	0d25      	lsrs	r5, r4, #20
 80024aa:	900a      	str	r0, [sp, #40]	; 0x28
 80024ac:	f040 8083 	bne.w	80025b6 <_dtoa_r+0x1ce>
 80024b0:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80024b2:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80024b4:	442e      	add	r6, r5
 80024b6:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	f340 8288 	ble.w	80029d0 <_dtoa_r+0x5e8>
 80024c0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80024c4:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80024c8:	409c      	lsls	r4, r3
 80024ca:	fa2a f000 	lsr.w	r0, sl, r0
 80024ce:	4320      	orrs	r0, r4
 80024d0:	f004 fb70 	bl	8006bb4 <__aeabi_ui2d>
 80024d4:	2301      	movs	r3, #1
 80024d6:	1e74      	subs	r4, r6, #1
 80024d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80024dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80024de:	2200      	movs	r2, #0
 80024e0:	4b76      	ldr	r3, [pc, #472]	; (80026bc <_dtoa_r+0x2d4>)
 80024e2:	f004 fa29 	bl	8006938 <__aeabi_dsub>
 80024e6:	a36c      	add	r3, pc, #432	; (adr r3, 8002698 <_dtoa_r+0x2b0>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f004 fbd8 	bl	8006ca0 <__aeabi_dmul>
 80024f0:	a36b      	add	r3, pc, #428	; (adr r3, 80026a0 <_dtoa_r+0x2b8>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f004 fa21 	bl	800693c <__adddf3>
 80024fa:	4606      	mov	r6, r0
 80024fc:	4620      	mov	r0, r4
 80024fe:	460f      	mov	r7, r1
 8002500:	f004 fb68 	bl	8006bd4 <__aeabi_i2d>
 8002504:	a368      	add	r3, pc, #416	; (adr r3, 80026a8 <_dtoa_r+0x2c0>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f004 fbc9 	bl	8006ca0 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4630      	mov	r0, r6
 8002514:	4639      	mov	r1, r7
 8002516:	f004 fa11 	bl	800693c <__adddf3>
 800251a:	4606      	mov	r6, r0
 800251c:	460f      	mov	r7, r1
 800251e:	f004 fe6f 	bl	8007200 <__aeabi_d2iz>
 8002522:	2200      	movs	r2, #0
 8002524:	9004      	str	r0, [sp, #16]
 8002526:	2300      	movs	r3, #0
 8002528:	4630      	mov	r0, r6
 800252a:	4639      	mov	r1, r7
 800252c:	f004 fe2a 	bl	8007184 <__aeabi_dcmplt>
 8002530:	2800      	cmp	r0, #0
 8002532:	f040 8228 	bne.w	8002986 <_dtoa_r+0x59e>
 8002536:	9e04      	ldr	r6, [sp, #16]
 8002538:	2e16      	cmp	r6, #22
 800253a:	f200 8221 	bhi.w	8002980 <_dtoa_r+0x598>
 800253e:	4b60      	ldr	r3, [pc, #384]	; (80026c0 <_dtoa_r+0x2d8>)
 8002540:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002544:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002548:	4652      	mov	r2, sl
 800254a:	465b      	mov	r3, fp
 800254c:	f004 fe38 	bl	80071c0 <__aeabi_dcmpgt>
 8002550:	2800      	cmp	r0, #0
 8002552:	f000 8242 	beq.w	80029da <_dtoa_r+0x5f2>
 8002556:	1e73      	subs	r3, r6, #1
 8002558:	9304      	str	r3, [sp, #16]
 800255a:	2300      	movs	r3, #0
 800255c:	930d      	str	r3, [sp, #52]	; 0x34
 800255e:	1b2d      	subs	r5, r5, r4
 8002560:	f1b5 0801 	subs.w	r8, r5, #1
 8002564:	f100 822a 	bmi.w	80029bc <_dtoa_r+0x5d4>
 8002568:	2300      	movs	r3, #0
 800256a:	9307      	str	r3, [sp, #28]
 800256c:	9b04      	ldr	r3, [sp, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f2c0 821b 	blt.w	80029aa <_dtoa_r+0x5c2>
 8002574:	4498      	add	r8, r3
 8002576:	930c      	str	r3, [sp, #48]	; 0x30
 8002578:	2300      	movs	r3, #0
 800257a:	9306      	str	r3, [sp, #24]
 800257c:	9b00      	ldr	r3, [sp, #0]
 800257e:	2b09      	cmp	r3, #9
 8002580:	d82a      	bhi.n	80025d8 <_dtoa_r+0x1f0>
 8002582:	2b05      	cmp	r3, #5
 8002584:	f340 8644 	ble.w	8003210 <_dtoa_r+0xe28>
 8002588:	3b04      	subs	r3, #4
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2600      	movs	r6, #0
 800258e:	9b00      	ldr	r3, [sp, #0]
 8002590:	3b02      	subs	r3, #2
 8002592:	2b03      	cmp	r3, #3
 8002594:	f200 8623 	bhi.w	80031de <_dtoa_r+0xdf6>
 8002598:	e8df f013 	tbh	[pc, r3, lsl #1]
 800259c:	0224032b 	.word	0x0224032b
 80025a0:	04500336 	.word	0x04500336
 80025a4:	4b44      	ldr	r3, [pc, #272]	; (80026b8 <_dtoa_r+0x2d0>)
 80025a6:	4a47      	ldr	r2, [pc, #284]	; (80026c4 <_dtoa_r+0x2dc>)
 80025a8:	f3c4 0013 	ubfx	r0, r4, #0, #20
 80025ac:	2800      	cmp	r0, #0
 80025ae:	bf14      	ite	ne
 80025b0:	4618      	movne	r0, r3
 80025b2:	4610      	moveq	r0, r2
 80025b4:	e75d      	b.n	8002472 <_dtoa_r+0x8a>
 80025b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80025ba:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80025be:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80025c2:	4650      	mov	r0, sl
 80025c4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80025c8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80025cc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80025ce:	e786      	b.n	80024de <_dtoa_r+0xf6>
 80025d0:	483d      	ldr	r0, [pc, #244]	; (80026c8 <_dtoa_r+0x2e0>)
 80025d2:	e742      	b.n	800245a <_dtoa_r+0x72>
 80025d4:	1cc3      	adds	r3, r0, #3
 80025d6:	e755      	b.n	8002484 <_dtoa_r+0x9c>
 80025d8:	2100      	movs	r1, #0
 80025da:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80025de:	4648      	mov	r0, r9
 80025e0:	460c      	mov	r4, r1
 80025e2:	9100      	str	r1, [sp, #0]
 80025e4:	f001 ffc6 	bl	8004574 <_Balloc>
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ec:	9308      	str	r3, [sp, #32]
 80025ee:	930e      	str	r3, [sp, #56]	; 0x38
 80025f0:	2301      	movs	r3, #1
 80025f2:	9009      	str	r0, [sp, #36]	; 0x24
 80025f4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 80025f8:	9405      	str	r4, [sp, #20]
 80025fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80025fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f2c0 80d0 	blt.w	80027a4 <_dtoa_r+0x3bc>
 8002604:	9a04      	ldr	r2, [sp, #16]
 8002606:	2a0e      	cmp	r2, #14
 8002608:	f300 80cc 	bgt.w	80027a4 <_dtoa_r+0x3bc>
 800260c:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <_dtoa_r+0x2d8>)
 800260e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002612:	ed93 7b00 	vldr	d7, [r3]
 8002616:	9b05      	ldr	r3, [sp, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	ed8d 7b00 	vstr	d7, [sp]
 800261e:	f2c0 82fe 	blt.w	8002c1e <_dtoa_r+0x836>
 8002622:	4656      	mov	r6, sl
 8002624:	465f      	mov	r7, fp
 8002626:	e9dd ab00 	ldrd	sl, fp, [sp]
 800262a:	4630      	mov	r0, r6
 800262c:	4652      	mov	r2, sl
 800262e:	465b      	mov	r3, fp
 8002630:	4639      	mov	r1, r7
 8002632:	f004 fc5f 	bl	8006ef4 <__aeabi_ddiv>
 8002636:	f004 fde3 	bl	8007200 <__aeabi_d2iz>
 800263a:	4604      	mov	r4, r0
 800263c:	f004 faca 	bl	8006bd4 <__aeabi_i2d>
 8002640:	4652      	mov	r2, sl
 8002642:	465b      	mov	r3, fp
 8002644:	f004 fb2c 	bl	8006ca0 <__aeabi_dmul>
 8002648:	460b      	mov	r3, r1
 800264a:	4602      	mov	r2, r0
 800264c:	4639      	mov	r1, r7
 800264e:	4630      	mov	r0, r6
 8002650:	f004 f972 	bl	8006938 <__aeabi_dsub>
 8002654:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002656:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800265a:	702b      	strb	r3, [r5, #0]
 800265c:	9b08      	ldr	r3, [sp, #32]
 800265e:	2b01      	cmp	r3, #1
 8002660:	4606      	mov	r6, r0
 8002662:	460f      	mov	r7, r1
 8002664:	f105 0501 	add.w	r5, r5, #1
 8002668:	d061      	beq.n	800272e <_dtoa_r+0x346>
 800266a:	2200      	movs	r2, #0
 800266c:	4b17      	ldr	r3, [pc, #92]	; (80026cc <_dtoa_r+0x2e4>)
 800266e:	f004 fb17 	bl	8006ca0 <__aeabi_dmul>
 8002672:	2200      	movs	r2, #0
 8002674:	2300      	movs	r3, #0
 8002676:	4606      	mov	r6, r0
 8002678:	460f      	mov	r7, r1
 800267a:	f004 fd79 	bl	8007170 <__aeabi_dcmpeq>
 800267e:	2800      	cmp	r0, #0
 8002680:	d17d      	bne.n	800277e <_dtoa_r+0x396>
 8002682:	f8cd 9014 	str.w	r9, [sp, #20]
 8002686:	f8dd a020 	ldr.w	sl, [sp, #32]
 800268a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800268e:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002692:	e028      	b.n	80026e6 <_dtoa_r+0x2fe>
 8002694:	f3af 8000 	nop.w
 8002698:	636f4361 	.word	0x636f4361
 800269c:	3fd287a7 	.word	0x3fd287a7
 80026a0:	8b60c8b3 	.word	0x8b60c8b3
 80026a4:	3fc68a28 	.word	0x3fc68a28
 80026a8:	509f79fb 	.word	0x509f79fb
 80026ac:	3fd34413 	.word	0x3fd34413
 80026b0:	7ff00000 	.word	0x7ff00000
 80026b4:	0801bb21 	.word	0x0801bb21
 80026b8:	0801bb30 	.word	0x0801bb30
 80026bc:	3ff80000 	.word	0x3ff80000
 80026c0:	0800c758 	.word	0x0800c758
 80026c4:	0801bb24 	.word	0x0801bb24
 80026c8:	0801bb20 	.word	0x0801bb20
 80026cc:	40240000 	.word	0x40240000
 80026d0:	f004 fae6 	bl	8006ca0 <__aeabi_dmul>
 80026d4:	2200      	movs	r2, #0
 80026d6:	2300      	movs	r3, #0
 80026d8:	4606      	mov	r6, r0
 80026da:	460f      	mov	r7, r1
 80026dc:	f004 fd48 	bl	8007170 <__aeabi_dcmpeq>
 80026e0:	2800      	cmp	r0, #0
 80026e2:	f040 83ae 	bne.w	8002e42 <_dtoa_r+0xa5a>
 80026e6:	4642      	mov	r2, r8
 80026e8:	464b      	mov	r3, r9
 80026ea:	4630      	mov	r0, r6
 80026ec:	4639      	mov	r1, r7
 80026ee:	f004 fc01 	bl	8006ef4 <__aeabi_ddiv>
 80026f2:	f004 fd85 	bl	8007200 <__aeabi_d2iz>
 80026f6:	4604      	mov	r4, r0
 80026f8:	f004 fa6c 	bl	8006bd4 <__aeabi_i2d>
 80026fc:	4642      	mov	r2, r8
 80026fe:	464b      	mov	r3, r9
 8002700:	f004 face 	bl	8006ca0 <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4630      	mov	r0, r6
 800270a:	4639      	mov	r1, r7
 800270c:	f004 f914 	bl	8006938 <__aeabi_dsub>
 8002710:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002714:	f805 eb01 	strb.w	lr, [r5], #1
 8002718:	ebcb 0e05 	rsb	lr, fp, r5
 800271c:	45d6      	cmp	lr, sl
 800271e:	4606      	mov	r6, r0
 8002720:	460f      	mov	r7, r1
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	4bae      	ldr	r3, [pc, #696]	; (80029e0 <_dtoa_r+0x5f8>)
 8002728:	d1d2      	bne.n	80026d0 <_dtoa_r+0x2e8>
 800272a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800272e:	4632      	mov	r2, r6
 8002730:	463b      	mov	r3, r7
 8002732:	4630      	mov	r0, r6
 8002734:	4639      	mov	r1, r7
 8002736:	f004 f901 	bl	800693c <__adddf3>
 800273a:	4606      	mov	r6, r0
 800273c:	460f      	mov	r7, r1
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002746:	f004 fd1d 	bl	8007184 <__aeabi_dcmplt>
 800274a:	b940      	cbnz	r0, 800275e <_dtoa_r+0x376>
 800274c:	4632      	mov	r2, r6
 800274e:	463b      	mov	r3, r7
 8002750:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002754:	f004 fd0c 	bl	8007170 <__aeabi_dcmpeq>
 8002758:	b188      	cbz	r0, 800277e <_dtoa_r+0x396>
 800275a:	07e3      	lsls	r3, r4, #31
 800275c:	d50f      	bpl.n	800277e <_dtoa_r+0x396>
 800275e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8002762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002764:	1e6b      	subs	r3, r5, #1
 8002766:	e004      	b.n	8002772 <_dtoa_r+0x38a>
 8002768:	429a      	cmp	r2, r3
 800276a:	f000 83fc 	beq.w	8002f66 <_dtoa_r+0xb7e>
 800276e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002772:	2c39      	cmp	r4, #57	; 0x39
 8002774:	f103 0501 	add.w	r5, r3, #1
 8002778:	d0f6      	beq.n	8002768 <_dtoa_r+0x380>
 800277a:	3401      	adds	r4, #1
 800277c:	701c      	strb	r4, [r3, #0]
 800277e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002780:	4648      	mov	r0, r9
 8002782:	f001 ff1d 	bl	80045c0 <_Bfree>
 8002786:	2200      	movs	r2, #0
 8002788:	9b04      	ldr	r3, [sp, #16]
 800278a:	702a      	strb	r2, [r5, #0]
 800278c:	9a03      	ldr	r2, [sp, #12]
 800278e:	3301      	adds	r3, #1
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 839b 	beq.w	8002ed0 <_dtoa_r+0xae8>
 800279a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800279c:	601d      	str	r5, [r3, #0]
 800279e:	b01b      	add	sp, #108	; 0x6c
 80027a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027a6:	2a00      	cmp	r2, #0
 80027a8:	f000 810e 	beq.w	80029c8 <_dtoa_r+0x5e0>
 80027ac:	9a00      	ldr	r2, [sp, #0]
 80027ae:	2a01      	cmp	r2, #1
 80027b0:	f340 8257 	ble.w	8002c62 <_dtoa_r+0x87a>
 80027b4:	9b08      	ldr	r3, [sp, #32]
 80027b6:	9a06      	ldr	r2, [sp, #24]
 80027b8:	1e5f      	subs	r7, r3, #1
 80027ba:	42ba      	cmp	r2, r7
 80027bc:	f2c0 838b 	blt.w	8002ed6 <_dtoa_r+0xaee>
 80027c0:	1bd7      	subs	r7, r2, r7
 80027c2:	9b08      	ldr	r3, [sp, #32]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f2c0 8480 	blt.w	80030ca <_dtoa_r+0xce2>
 80027ca:	9d07      	ldr	r5, [sp, #28]
 80027cc:	9b08      	ldr	r3, [sp, #32]
 80027ce:	9a07      	ldr	r2, [sp, #28]
 80027d0:	2101      	movs	r1, #1
 80027d2:	441a      	add	r2, r3
 80027d4:	4648      	mov	r0, r9
 80027d6:	9207      	str	r2, [sp, #28]
 80027d8:	4498      	add	r8, r3
 80027da:	f001 ffd5 	bl	8004788 <__i2b>
 80027de:	4606      	mov	r6, r0
 80027e0:	b165      	cbz	r5, 80027fc <_dtoa_r+0x414>
 80027e2:	f1b8 0f00 	cmp.w	r8, #0
 80027e6:	dd09      	ble.n	80027fc <_dtoa_r+0x414>
 80027e8:	4545      	cmp	r5, r8
 80027ea:	9a07      	ldr	r2, [sp, #28]
 80027ec:	462b      	mov	r3, r5
 80027ee:	bfa8      	it	ge
 80027f0:	4643      	movge	r3, r8
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	9207      	str	r2, [sp, #28]
 80027f6:	1aed      	subs	r5, r5, r3
 80027f8:	ebc3 0808 	rsb	r8, r3, r8
 80027fc:	9b06      	ldr	r3, [sp, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f340 82f5 	ble.w	8002dee <_dtoa_r+0xa06>
 8002804:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002806:	2a00      	cmp	r2, #0
 8002808:	f000 8202 	beq.w	8002c10 <_dtoa_r+0x828>
 800280c:	2f00      	cmp	r7, #0
 800280e:	f000 81ff 	beq.w	8002c10 <_dtoa_r+0x828>
 8002812:	4631      	mov	r1, r6
 8002814:	463a      	mov	r2, r7
 8002816:	4648      	mov	r0, r9
 8002818:	f002 f858 	bl	80048cc <__pow5mult>
 800281c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800281e:	4601      	mov	r1, r0
 8002820:	4606      	mov	r6, r0
 8002822:	4648      	mov	r0, r9
 8002824:	f001 ffba 	bl	800479c <__multiply>
 8002828:	990a      	ldr	r1, [sp, #40]	; 0x28
 800282a:	4604      	mov	r4, r0
 800282c:	4648      	mov	r0, r9
 800282e:	f001 fec7 	bl	80045c0 <_Bfree>
 8002832:	9b06      	ldr	r3, [sp, #24]
 8002834:	1bdb      	subs	r3, r3, r7
 8002836:	9306      	str	r3, [sp, #24]
 8002838:	f040 81e9 	bne.w	8002c0e <_dtoa_r+0x826>
 800283c:	2101      	movs	r1, #1
 800283e:	4648      	mov	r0, r9
 8002840:	f001 ffa2 	bl	8004788 <__i2b>
 8002844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002846:	9006      	str	r0, [sp, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8215 	beq.w	8002c78 <_dtoa_r+0x890>
 800284e:	4601      	mov	r1, r0
 8002850:	461a      	mov	r2, r3
 8002852:	4648      	mov	r0, r9
 8002854:	f002 f83a 	bl	80048cc <__pow5mult>
 8002858:	9b00      	ldr	r3, [sp, #0]
 800285a:	9006      	str	r0, [sp, #24]
 800285c:	2b01      	cmp	r3, #1
 800285e:	f340 82f3 	ble.w	8002e48 <_dtoa_r+0xa60>
 8002862:	2700      	movs	r7, #0
 8002864:	9a06      	ldr	r2, [sp, #24]
 8002866:	6913      	ldr	r3, [r2, #16]
 8002868:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800286c:	6918      	ldr	r0, [r3, #16]
 800286e:	f001 ff3d 	bl	80046ec <__hi0bits>
 8002872:	f1c0 0020 	rsb	r0, r0, #32
 8002876:	4440      	add	r0, r8
 8002878:	f010 001f 	ands.w	r0, r0, #31
 800287c:	f000 81fa 	beq.w	8002c74 <_dtoa_r+0x88c>
 8002880:	f1c0 0320 	rsb	r3, r0, #32
 8002884:	2b04      	cmp	r3, #4
 8002886:	f340 84bd 	ble.w	8003204 <_dtoa_r+0xe1c>
 800288a:	f1c0 001c 	rsb	r0, r0, #28
 800288e:	9b07      	ldr	r3, [sp, #28]
 8002890:	4403      	add	r3, r0
 8002892:	9307      	str	r3, [sp, #28]
 8002894:	4405      	add	r5, r0
 8002896:	4480      	add	r8, r0
 8002898:	9b07      	ldr	r3, [sp, #28]
 800289a:	2b00      	cmp	r3, #0
 800289c:	dd05      	ble.n	80028aa <_dtoa_r+0x4c2>
 800289e:	4621      	mov	r1, r4
 80028a0:	461a      	mov	r2, r3
 80028a2:	4648      	mov	r0, r9
 80028a4:	f002 f862 	bl	800496c <__lshift>
 80028a8:	4604      	mov	r4, r0
 80028aa:	f1b8 0f00 	cmp.w	r8, #0
 80028ae:	dd05      	ble.n	80028bc <_dtoa_r+0x4d4>
 80028b0:	4642      	mov	r2, r8
 80028b2:	9906      	ldr	r1, [sp, #24]
 80028b4:	4648      	mov	r0, r9
 80028b6:	f002 f859 	bl	800496c <__lshift>
 80028ba:	9006      	str	r0, [sp, #24]
 80028bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 827a 	bne.w	8002db8 <_dtoa_r+0x9d0>
 80028c4:	9b08      	ldr	r3, [sp, #32]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f340 8293 	ble.w	8002df2 <_dtoa_r+0xa0a>
 80028cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 81f4 	bne.w	8002cbc <_dtoa_r+0x8d4>
 80028d4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80028d8:	9f08      	ldr	r7, [sp, #32]
 80028da:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80028de:	465d      	mov	r5, fp
 80028e0:	e002      	b.n	80028e8 <_dtoa_r+0x500>
 80028e2:	f001 fe77 	bl	80045d4 <__multadd>
 80028e6:	4604      	mov	r4, r0
 80028e8:	4641      	mov	r1, r8
 80028ea:	4620      	mov	r0, r4
 80028ec:	f7ff fce8 	bl	80022c0 <quorem>
 80028f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80028f4:	f805 ab01 	strb.w	sl, [r5], #1
 80028f8:	ebcb 0305 	rsb	r3, fp, r5
 80028fc:	42bb      	cmp	r3, r7
 80028fe:	f04f 020a 	mov.w	r2, #10
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	4621      	mov	r1, r4
 8002908:	4648      	mov	r0, r9
 800290a:	dbea      	blt.n	80028e2 <_dtoa_r+0x4fa>
 800290c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800290e:	9a08      	ldr	r2, [sp, #32]
 8002910:	2a01      	cmp	r2, #1
 8002912:	bfac      	ite	ge
 8002914:	189b      	addge	r3, r3, r2
 8002916:	3301      	addlt	r3, #1
 8002918:	461d      	mov	r5, r3
 800291a:	f04f 0b00 	mov.w	fp, #0
 800291e:	4621      	mov	r1, r4
 8002920:	2201      	movs	r2, #1
 8002922:	4648      	mov	r0, r9
 8002924:	f002 f822 	bl	800496c <__lshift>
 8002928:	9906      	ldr	r1, [sp, #24]
 800292a:	900a      	str	r0, [sp, #40]	; 0x28
 800292c:	f002 f876 	bl	8004a1c <__mcmp>
 8002930:	2800      	cmp	r0, #0
 8002932:	f340 8305 	ble.w	8002f40 <_dtoa_r+0xb58>
 8002936:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800293a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800293c:	1e6b      	subs	r3, r5, #1
 800293e:	e004      	b.n	800294a <_dtoa_r+0x562>
 8002940:	428b      	cmp	r3, r1
 8002942:	f000 8274 	beq.w	8002e2e <_dtoa_r+0xa46>
 8002946:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800294a:	2a39      	cmp	r2, #57	; 0x39
 800294c:	f103 0501 	add.w	r5, r3, #1
 8002950:	d0f6      	beq.n	8002940 <_dtoa_r+0x558>
 8002952:	3201      	adds	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	9906      	ldr	r1, [sp, #24]
 8002958:	4648      	mov	r0, r9
 800295a:	f001 fe31 	bl	80045c0 <_Bfree>
 800295e:	2e00      	cmp	r6, #0
 8002960:	f43f af0d 	beq.w	800277e <_dtoa_r+0x396>
 8002964:	f1bb 0f00 	cmp.w	fp, #0
 8002968:	d005      	beq.n	8002976 <_dtoa_r+0x58e>
 800296a:	45b3      	cmp	fp, r6
 800296c:	d003      	beq.n	8002976 <_dtoa_r+0x58e>
 800296e:	4659      	mov	r1, fp
 8002970:	4648      	mov	r0, r9
 8002972:	f001 fe25 	bl	80045c0 <_Bfree>
 8002976:	4631      	mov	r1, r6
 8002978:	4648      	mov	r0, r9
 800297a:	f001 fe21 	bl	80045c0 <_Bfree>
 800297e:	e6fe      	b.n	800277e <_dtoa_r+0x396>
 8002980:	2301      	movs	r3, #1
 8002982:	930d      	str	r3, [sp, #52]	; 0x34
 8002984:	e5eb      	b.n	800255e <_dtoa_r+0x176>
 8002986:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800298a:	4640      	mov	r0, r8
 800298c:	f004 f922 	bl	8006bd4 <__aeabi_i2d>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4630      	mov	r0, r6
 8002996:	4639      	mov	r1, r7
 8002998:	f004 fbea 	bl	8007170 <__aeabi_dcmpeq>
 800299c:	2800      	cmp	r0, #0
 800299e:	f47f adca 	bne.w	8002536 <_dtoa_r+0x14e>
 80029a2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80029a6:	9304      	str	r3, [sp, #16]
 80029a8:	e5c5      	b.n	8002536 <_dtoa_r+0x14e>
 80029aa:	9a07      	ldr	r2, [sp, #28]
 80029ac:	9b04      	ldr	r3, [sp, #16]
 80029ae:	1ad2      	subs	r2, r2, r3
 80029b0:	425b      	negs	r3, r3
 80029b2:	9306      	str	r3, [sp, #24]
 80029b4:	2300      	movs	r3, #0
 80029b6:	9207      	str	r2, [sp, #28]
 80029b8:	930c      	str	r3, [sp, #48]	; 0x30
 80029ba:	e5df      	b.n	800257c <_dtoa_r+0x194>
 80029bc:	f1c8 0300 	rsb	r3, r8, #0
 80029c0:	9307      	str	r3, [sp, #28]
 80029c2:	f04f 0800 	mov.w	r8, #0
 80029c6:	e5d1      	b.n	800256c <_dtoa_r+0x184>
 80029c8:	9f06      	ldr	r7, [sp, #24]
 80029ca:	9d07      	ldr	r5, [sp, #28]
 80029cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80029ce:	e707      	b.n	80027e0 <_dtoa_r+0x3f8>
 80029d0:	f1c3 0420 	rsb	r4, r3, #32
 80029d4:	fa0a f004 	lsl.w	r0, sl, r4
 80029d8:	e57a      	b.n	80024d0 <_dtoa_r+0xe8>
 80029da:	900d      	str	r0, [sp, #52]	; 0x34
 80029dc:	e5bf      	b.n	800255e <_dtoa_r+0x176>
 80029de:	bf00      	nop
 80029e0:	40240000 	.word	0x40240000
 80029e4:	2300      	movs	r3, #0
 80029e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80029e8:	9b04      	ldr	r3, [sp, #16]
 80029ea:	9a05      	ldr	r2, [sp, #20]
 80029ec:	4413      	add	r3, r2
 80029ee:	930e      	str	r3, [sp, #56]	; 0x38
 80029f0:	3301      	adds	r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	9308      	str	r3, [sp, #32]
 80029f6:	f340 827d 	ble.w	8002ef4 <_dtoa_r+0xb0c>
 80029fa:	9c08      	ldr	r4, [sp, #32]
 80029fc:	4625      	mov	r5, r4
 80029fe:	2100      	movs	r1, #0
 8002a00:	2d17      	cmp	r5, #23
 8002a02:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8002a06:	d90b      	bls.n	8002a20 <_dtoa_r+0x638>
 8002a08:	2201      	movs	r2, #1
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	f103 0014 	add.w	r0, r3, #20
 8002a12:	42a8      	cmp	r0, r5
 8002a14:	4611      	mov	r1, r2
 8002a16:	f102 0201 	add.w	r2, r2, #1
 8002a1a:	d9f7      	bls.n	8002a0c <_dtoa_r+0x624>
 8002a1c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8002a20:	4648      	mov	r0, r9
 8002a22:	f001 fda7 	bl	8004574 <_Balloc>
 8002a26:	2c0e      	cmp	r4, #14
 8002a28:	9009      	str	r0, [sp, #36]	; 0x24
 8002a2a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8002a2e:	f63f ade5 	bhi.w	80025fc <_dtoa_r+0x214>
 8002a32:	2e00      	cmp	r6, #0
 8002a34:	f43f ade2 	beq.w	80025fc <_dtoa_r+0x214>
 8002a38:	9904      	ldr	r1, [sp, #16]
 8002a3a:	2900      	cmp	r1, #0
 8002a3c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8002a40:	f340 829a 	ble.w	8002f78 <_dtoa_r+0xb90>
 8002a44:	4b90      	ldr	r3, [pc, #576]	; (8002c88 <_dtoa_r+0x8a0>)
 8002a46:	f001 020f 	and.w	r2, r1, #15
 8002a4a:	110e      	asrs	r6, r1, #4
 8002a4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a50:	06f0      	lsls	r0, r6, #27
 8002a52:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a56:	f140 8246 	bpl.w	8002ee6 <_dtoa_r+0xafe>
 8002a5a:	4b8c      	ldr	r3, [pc, #560]	; (8002c8c <_dtoa_r+0x8a4>)
 8002a5c:	4650      	mov	r0, sl
 8002a5e:	4659      	mov	r1, fp
 8002a60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002a64:	f004 fa46 	bl	8006ef4 <__aeabi_ddiv>
 8002a68:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8002a6c:	f006 060f 	and.w	r6, r6, #15
 8002a70:	f04f 0a03 	mov.w	sl, #3
 8002a74:	b186      	cbz	r6, 8002a98 <_dtoa_r+0x6b0>
 8002a76:	4f85      	ldr	r7, [pc, #532]	; (8002c8c <_dtoa_r+0x8a4>)
 8002a78:	07f1      	lsls	r1, r6, #31
 8002a7a:	d509      	bpl.n	8002a90 <_dtoa_r+0x6a8>
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a84:	f004 f90c 	bl	8006ca0 <__aeabi_dmul>
 8002a88:	f10a 0a01 	add.w	sl, sl, #1
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	460d      	mov	r5, r1
 8002a90:	1076      	asrs	r6, r6, #1
 8002a92:	f107 0708 	add.w	r7, r7, #8
 8002a96:	d1ef      	bne.n	8002a78 <_dtoa_r+0x690>
 8002a98:	4622      	mov	r2, r4
 8002a9a:	462b      	mov	r3, r5
 8002a9c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002aa0:	f004 fa28 	bl	8006ef4 <__aeabi_ddiv>
 8002aa4:	4606      	mov	r6, r0
 8002aa6:	460f      	mov	r7, r1
 8002aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002aaa:	b143      	cbz	r3, 8002abe <_dtoa_r+0x6d6>
 8002aac:	2200      	movs	r2, #0
 8002aae:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <_dtoa_r+0x8a8>)
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	4639      	mov	r1, r7
 8002ab4:	f004 fb66 	bl	8007184 <__aeabi_dcmplt>
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	f040 831a 	bne.w	80030f2 <_dtoa_r+0xd0a>
 8002abe:	4650      	mov	r0, sl
 8002ac0:	f004 f888 	bl	8006bd4 <__aeabi_i2d>
 8002ac4:	4632      	mov	r2, r6
 8002ac6:	463b      	mov	r3, r7
 8002ac8:	f004 f8ea 	bl	8006ca0 <__aeabi_dmul>
 8002acc:	4b71      	ldr	r3, [pc, #452]	; (8002c94 <_dtoa_r+0x8ac>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f003 ff34 	bl	800693c <__adddf3>
 8002ad4:	9b08      	ldr	r3, [sp, #32]
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 81db 	beq.w	8002e98 <_dtoa_r+0xab0>
 8002ae2:	9b04      	ldr	r3, [sp, #16]
 8002ae4:	9316      	str	r3, [sp, #88]	; 0x58
 8002ae6:	9b08      	ldr	r3, [sp, #32]
 8002ae8:	9312      	str	r3, [sp, #72]	; 0x48
 8002aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8294 	beq.w	800301a <_dtoa_r+0xc32>
 8002af2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002af4:	4b64      	ldr	r3, [pc, #400]	; (8002c88 <_dtoa_r+0x8a0>)
 8002af6:	4968      	ldr	r1, [pc, #416]	; (8002c98 <_dtoa_r+0x8b0>)
 8002af8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002afc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002b00:	2000      	movs	r0, #0
 8002b02:	f004 f9f7 	bl	8006ef4 <__aeabi_ddiv>
 8002b06:	4622      	mov	r2, r4
 8002b08:	462b      	mov	r3, r5
 8002b0a:	f003 ff15 	bl	8006938 <__aeabi_dsub>
 8002b0e:	4682      	mov	sl, r0
 8002b10:	468b      	mov	fp, r1
 8002b12:	4630      	mov	r0, r6
 8002b14:	4639      	mov	r1, r7
 8002b16:	f004 fb73 	bl	8007200 <__aeabi_d2iz>
 8002b1a:	4604      	mov	r4, r0
 8002b1c:	f004 f85a 	bl	8006bd4 <__aeabi_i2d>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4630      	mov	r0, r6
 8002b26:	4639      	mov	r1, r7
 8002b28:	f003 ff06 	bl	8006938 <__aeabi_dsub>
 8002b2c:	3430      	adds	r4, #48	; 0x30
 8002b2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002b30:	b2e4      	uxtb	r4, r4
 8002b32:	4606      	mov	r6, r0
 8002b34:	460f      	mov	r7, r1
 8002b36:	702c      	strb	r4, [r5, #0]
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4650      	mov	r0, sl
 8002b3e:	4659      	mov	r1, fp
 8002b40:	3501      	adds	r5, #1
 8002b42:	f004 fb3d 	bl	80071c0 <__aeabi_dcmpgt>
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d150      	bne.n	8002bec <_dtoa_r+0x804>
 8002b4a:	4632      	mov	r2, r6
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	2000      	movs	r0, #0
 8002b50:	494f      	ldr	r1, [pc, #316]	; (8002c90 <_dtoa_r+0x8a8>)
 8002b52:	f003 fef1 	bl	8006938 <__aeabi_dsub>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4650      	mov	r0, sl
 8002b5c:	4659      	mov	r1, fp
 8002b5e:	f004 fb2f 	bl	80071c0 <__aeabi_dcmpgt>
 8002b62:	2800      	cmp	r0, #0
 8002b64:	f040 8308 	bne.w	8003178 <_dtoa_r+0xd90>
 8002b68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002b6a:	2a01      	cmp	r2, #1
 8002b6c:	f340 81f7 	ble.w	8002f5e <_dtoa_r+0xb76>
 8002b70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b74:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8002b78:	4413      	add	r3, r2
 8002b7a:	4698      	mov	r8, r3
 8002b7c:	e00d      	b.n	8002b9a <_dtoa_r+0x7b2>
 8002b7e:	2000      	movs	r0, #0
 8002b80:	4943      	ldr	r1, [pc, #268]	; (8002c90 <_dtoa_r+0x8a8>)
 8002b82:	f003 fed9 	bl	8006938 <__aeabi_dsub>
 8002b86:	4652      	mov	r2, sl
 8002b88:	465b      	mov	r3, fp
 8002b8a:	f004 fafb 	bl	8007184 <__aeabi_dcmplt>
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	f040 82f2 	bne.w	8003178 <_dtoa_r+0xd90>
 8002b94:	4545      	cmp	r5, r8
 8002b96:	f000 81e0 	beq.w	8002f5a <_dtoa_r+0xb72>
 8002b9a:	4650      	mov	r0, sl
 8002b9c:	4659      	mov	r1, fp
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <_dtoa_r+0x8b4>)
 8002ba2:	f004 f87d 	bl	8006ca0 <__aeabi_dmul>
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <_dtoa_r+0x8b4>)
 8002baa:	4682      	mov	sl, r0
 8002bac:	468b      	mov	fp, r1
 8002bae:	4630      	mov	r0, r6
 8002bb0:	4639      	mov	r1, r7
 8002bb2:	f004 f875 	bl	8006ca0 <__aeabi_dmul>
 8002bb6:	460f      	mov	r7, r1
 8002bb8:	4606      	mov	r6, r0
 8002bba:	f004 fb21 	bl	8007200 <__aeabi_d2iz>
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	f004 f808 	bl	8006bd4 <__aeabi_i2d>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4630      	mov	r0, r6
 8002bca:	4639      	mov	r1, r7
 8002bcc:	f003 feb4 	bl	8006938 <__aeabi_dsub>
 8002bd0:	3430      	adds	r4, #48	; 0x30
 8002bd2:	b2e4      	uxtb	r4, r4
 8002bd4:	4652      	mov	r2, sl
 8002bd6:	465b      	mov	r3, fp
 8002bd8:	f805 4b01 	strb.w	r4, [r5], #1
 8002bdc:	4606      	mov	r6, r0
 8002bde:	460f      	mov	r7, r1
 8002be0:	f004 fad0 	bl	8007184 <__aeabi_dcmplt>
 8002be4:	4632      	mov	r2, r6
 8002be6:	463b      	mov	r3, r7
 8002be8:	2800      	cmp	r0, #0
 8002bea:	d0c8      	beq.n	8002b7e <_dtoa_r+0x796>
 8002bec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002bee:	9304      	str	r3, [sp, #16]
 8002bf0:	e5c5      	b.n	800277e <_dtoa_r+0x396>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bf6:	9b05      	ldr	r3, [sp, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f340 8180 	ble.w	8002efe <_dtoa_r+0xb16>
 8002bfe:	461d      	mov	r5, r3
 8002c00:	461c      	mov	r4, r3
 8002c02:	930e      	str	r3, [sp, #56]	; 0x38
 8002c04:	9308      	str	r3, [sp, #32]
 8002c06:	e6fa      	b.n	80029fe <_dtoa_r+0x616>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c0c:	e7f3      	b.n	8002bf6 <_dtoa_r+0x80e>
 8002c0e:	940a      	str	r4, [sp, #40]	; 0x28
 8002c10:	9a06      	ldr	r2, [sp, #24]
 8002c12:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002c14:	4648      	mov	r0, r9
 8002c16:	f001 fe59 	bl	80048cc <__pow5mult>
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	e60e      	b.n	800283c <_dtoa_r+0x454>
 8002c1e:	9b08      	ldr	r3, [sp, #32]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f73f acfe 	bgt.w	8002622 <_dtoa_r+0x23a>
 8002c26:	f040 814f 	bne.w	8002ec8 <_dtoa_r+0xae0>
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <_dtoa_r+0x8b8>)
 8002c2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002c32:	f004 f835 	bl	8006ca0 <__aeabi_dmul>
 8002c36:	465b      	mov	r3, fp
 8002c38:	4652      	mov	r2, sl
 8002c3a:	f004 fab7 	bl	80071ac <__aeabi_dcmpge>
 8002c3e:	9b08      	ldr	r3, [sp, #32]
 8002c40:	9306      	str	r3, [sp, #24]
 8002c42:	461e      	mov	r6, r3
 8002c44:	2800      	cmp	r0, #0
 8002c46:	f000 80ea 	beq.w	8002e1e <_dtoa_r+0xa36>
 8002c4a:	9b05      	ldr	r3, [sp, #20]
 8002c4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	9304      	str	r3, [sp, #16]
 8002c52:	9906      	ldr	r1, [sp, #24]
 8002c54:	4648      	mov	r0, r9
 8002c56:	f001 fcb3 	bl	80045c0 <_Bfree>
 8002c5a:	2e00      	cmp	r6, #0
 8002c5c:	f43f ad8f 	beq.w	800277e <_dtoa_r+0x396>
 8002c60:	e689      	b.n	8002976 <_dtoa_r+0x58e>
 8002c62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002c64:	2a00      	cmp	r2, #0
 8002c66:	f000 8238 	beq.w	80030da <_dtoa_r+0xcf2>
 8002c6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002c6e:	9f06      	ldr	r7, [sp, #24]
 8002c70:	9d07      	ldr	r5, [sp, #28]
 8002c72:	e5ac      	b.n	80027ce <_dtoa_r+0x3e6>
 8002c74:	201c      	movs	r0, #28
 8002c76:	e60a      	b.n	800288e <_dtoa_r+0x4a6>
 8002c78:	9b00      	ldr	r3, [sp, #0]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	f340 8280 	ble.w	8003180 <_dtoa_r+0xd98>
 8002c80:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002c82:	2001      	movs	r0, #1
 8002c84:	e5f7      	b.n	8002876 <_dtoa_r+0x48e>
 8002c86:	bf00      	nop
 8002c88:	0800c758 	.word	0x0800c758
 8002c8c:	0800c848 	.word	0x0800c848
 8002c90:	3ff00000 	.word	0x3ff00000
 8002c94:	401c0000 	.word	0x401c0000
 8002c98:	3fe00000 	.word	0x3fe00000
 8002c9c:	40240000 	.word	0x40240000
 8002ca0:	40140000 	.word	0x40140000
 8002ca4:	4631      	mov	r1, r6
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	220a      	movs	r2, #10
 8002caa:	4648      	mov	r0, r9
 8002cac:	f001 fc92 	bl	80045d4 <__multadd>
 8002cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	4606      	mov	r6, r0
 8002cb6:	f340 828d 	ble.w	80031d4 <_dtoa_r+0xdec>
 8002cba:	9308      	str	r3, [sp, #32]
 8002cbc:	2d00      	cmp	r5, #0
 8002cbe:	dd05      	ble.n	8002ccc <_dtoa_r+0x8e4>
 8002cc0:	4631      	mov	r1, r6
 8002cc2:	462a      	mov	r2, r5
 8002cc4:	4648      	mov	r0, r9
 8002cc6:	f001 fe51 	bl	800496c <__lshift>
 8002cca:	4606      	mov	r6, r0
 8002ccc:	2f00      	cmp	r7, #0
 8002cce:	f040 817c 	bne.w	8002fca <_dtoa_r+0xbe2>
 8002cd2:	46b0      	mov	r8, r6
 8002cd4:	9b08      	ldr	r3, [sp, #32]
 8002cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	18d3      	adds	r3, r2, r3
 8002cdc:	9308      	str	r3, [sp, #32]
 8002cde:	f00a 0301 	and.w	r3, sl, #1
 8002ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8002ce4:	4617      	mov	r7, r2
 8002ce6:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002cea:	4620      	mov	r0, r4
 8002cec:	4659      	mov	r1, fp
 8002cee:	f7ff fae7 	bl	80022c0 <quorem>
 8002cf2:	4631      	mov	r1, r6
 8002cf4:	4605      	mov	r5, r0
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f001 fe90 	bl	8004a1c <__mcmp>
 8002cfc:	4642      	mov	r2, r8
 8002cfe:	4659      	mov	r1, fp
 8002d00:	4682      	mov	sl, r0
 8002d02:	4648      	mov	r0, r9
 8002d04:	f001 feac 	bl	8004a60 <__mdiff>
 8002d08:	68c2      	ldr	r2, [r0, #12]
 8002d0a:	4683      	mov	fp, r0
 8002d0c:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8002d10:	2a00      	cmp	r2, #0
 8002d12:	d149      	bne.n	8002da8 <_dtoa_r+0x9c0>
 8002d14:	4601      	mov	r1, r0
 8002d16:	4620      	mov	r0, r4
 8002d18:	9307      	str	r3, [sp, #28]
 8002d1a:	f001 fe7f 	bl	8004a1c <__mcmp>
 8002d1e:	4659      	mov	r1, fp
 8002d20:	9005      	str	r0, [sp, #20]
 8002d22:	4648      	mov	r0, r9
 8002d24:	f001 fc4c 	bl	80045c0 <_Bfree>
 8002d28:	9a05      	ldr	r2, [sp, #20]
 8002d2a:	9b07      	ldr	r3, [sp, #28]
 8002d2c:	b92a      	cbnz	r2, 8002d3a <_dtoa_r+0x952>
 8002d2e:	9900      	ldr	r1, [sp, #0]
 8002d30:	b919      	cbnz	r1, 8002d3a <_dtoa_r+0x952>
 8002d32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d34:	2900      	cmp	r1, #0
 8002d36:	f000 8235 	beq.w	80031a4 <_dtoa_r+0xdbc>
 8002d3a:	f1ba 0f00 	cmp.w	sl, #0
 8002d3e:	f2c0 80e3 	blt.w	8002f08 <_dtoa_r+0xb20>
 8002d42:	d105      	bne.n	8002d50 <_dtoa_r+0x968>
 8002d44:	9900      	ldr	r1, [sp, #0]
 8002d46:	b919      	cbnz	r1, 8002d50 <_dtoa_r+0x968>
 8002d48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d4a:	2900      	cmp	r1, #0
 8002d4c:	f000 80dc 	beq.w	8002f08 <_dtoa_r+0xb20>
 8002d50:	2a00      	cmp	r2, #0
 8002d52:	f300 814e 	bgt.w	8002ff2 <_dtoa_r+0xc0a>
 8002d56:	9a08      	ldr	r2, [sp, #32]
 8002d58:	703b      	strb	r3, [r7, #0]
 8002d5a:	f107 0a01 	add.w	sl, r7, #1
 8002d5e:	4297      	cmp	r7, r2
 8002d60:	4655      	mov	r5, sl
 8002d62:	f000 8152 	beq.w	800300a <_dtoa_r+0xc22>
 8002d66:	4621      	mov	r1, r4
 8002d68:	2300      	movs	r3, #0
 8002d6a:	220a      	movs	r2, #10
 8002d6c:	4648      	mov	r0, r9
 8002d6e:	f001 fc31 	bl	80045d4 <__multadd>
 8002d72:	4546      	cmp	r6, r8
 8002d74:	4604      	mov	r4, r0
 8002d76:	4631      	mov	r1, r6
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	f04f 020a 	mov.w	r2, #10
 8002d80:	4648      	mov	r0, r9
 8002d82:	d00b      	beq.n	8002d9c <_dtoa_r+0x9b4>
 8002d84:	f001 fc26 	bl	80045d4 <__multadd>
 8002d88:	4641      	mov	r1, r8
 8002d8a:	4606      	mov	r6, r0
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	220a      	movs	r2, #10
 8002d90:	4648      	mov	r0, r9
 8002d92:	f001 fc1f 	bl	80045d4 <__multadd>
 8002d96:	4657      	mov	r7, sl
 8002d98:	4680      	mov	r8, r0
 8002d9a:	e7a4      	b.n	8002ce6 <_dtoa_r+0x8fe>
 8002d9c:	f001 fc1a 	bl	80045d4 <__multadd>
 8002da0:	4657      	mov	r7, sl
 8002da2:	4606      	mov	r6, r0
 8002da4:	4680      	mov	r8, r0
 8002da6:	e79e      	b.n	8002ce6 <_dtoa_r+0x8fe>
 8002da8:	4601      	mov	r1, r0
 8002daa:	4648      	mov	r0, r9
 8002dac:	9305      	str	r3, [sp, #20]
 8002dae:	f001 fc07 	bl	80045c0 <_Bfree>
 8002db2:	2201      	movs	r2, #1
 8002db4:	9b05      	ldr	r3, [sp, #20]
 8002db6:	e7c0      	b.n	8002d3a <_dtoa_r+0x952>
 8002db8:	9906      	ldr	r1, [sp, #24]
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f001 fe2e 	bl	8004a1c <__mcmp>
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	f6bf ad7f 	bge.w	80028c4 <_dtoa_r+0x4dc>
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	9c04      	ldr	r4, [sp, #16]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	3c01      	subs	r4, #1
 8002dce:	220a      	movs	r2, #10
 8002dd0:	4648      	mov	r0, r9
 8002dd2:	9404      	str	r4, [sp, #16]
 8002dd4:	f001 fbfe 	bl	80045d4 <__multadd>
 8002dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002dda:	4604      	mov	r4, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f47f af61 	bne.w	8002ca4 <_dtoa_r+0x8bc>
 8002de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f340 81ed 	ble.w	80031c4 <_dtoa_r+0xddc>
 8002dea:	9308      	str	r3, [sp, #32]
 8002dec:	e572      	b.n	80028d4 <_dtoa_r+0x4ec>
 8002dee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002df0:	e524      	b.n	800283c <_dtoa_r+0x454>
 8002df2:	9b00      	ldr	r3, [sp, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	f77f ad69 	ble.w	80028cc <_dtoa_r+0x4e4>
 8002dfa:	9b08      	ldr	r3, [sp, #32]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 819d 	bne.w	800313c <_dtoa_r+0xd54>
 8002e02:	9906      	ldr	r1, [sp, #24]
 8002e04:	2205      	movs	r2, #5
 8002e06:	4648      	mov	r0, r9
 8002e08:	f001 fbe4 	bl	80045d4 <__multadd>
 8002e0c:	4601      	mov	r1, r0
 8002e0e:	9006      	str	r0, [sp, #24]
 8002e10:	4620      	mov	r0, r4
 8002e12:	f001 fe03 	bl	8004a1c <__mcmp>
 8002e16:	2800      	cmp	r0, #0
 8002e18:	940a      	str	r4, [sp, #40]	; 0x28
 8002e1a:	f77f af16 	ble.w	8002c4a <_dtoa_r+0x862>
 8002e1e:	9a04      	ldr	r2, [sp, #16]
 8002e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e22:	2331      	movs	r3, #49	; 0x31
 8002e24:	3201      	adds	r2, #1
 8002e26:	9204      	str	r2, [sp, #16]
 8002e28:	700b      	strb	r3, [r1, #0]
 8002e2a:	1c4d      	adds	r5, r1, #1
 8002e2c:	e711      	b.n	8002c52 <_dtoa_r+0x86a>
 8002e2e:	9a04      	ldr	r2, [sp, #16]
 8002e30:	3201      	adds	r2, #1
 8002e32:	9204      	str	r2, [sp, #16]
 8002e34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e36:	2331      	movs	r3, #49	; 0x31
 8002e38:	7013      	strb	r3, [r2, #0]
 8002e3a:	e58c      	b.n	8002956 <_dtoa_r+0x56e>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e40:	e5d2      	b.n	80029e8 <_dtoa_r+0x600>
 8002e42:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002e46:	e49a      	b.n	800277e <_dtoa_r+0x396>
 8002e48:	f1ba 0f00 	cmp.w	sl, #0
 8002e4c:	f47f ad09 	bne.w	8002862 <_dtoa_r+0x47a>
 8002e50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 813e 	bne.w	80030d6 <_dtoa_r+0xcee>
 8002e5a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8002e5e:	0d3f      	lsrs	r7, r7, #20
 8002e60:	053f      	lsls	r7, r7, #20
 8002e62:	b12f      	cbz	r7, 8002e70 <_dtoa_r+0xa88>
 8002e64:	9b07      	ldr	r3, [sp, #28]
 8002e66:	3301      	adds	r3, #1
 8002e68:	9307      	str	r3, [sp, #28]
 8002e6a:	f108 0801 	add.w	r8, r8, #1
 8002e6e:	2701      	movs	r7, #1
 8002e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e72:	2001      	movs	r0, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f43f acfe 	beq.w	8002876 <_dtoa_r+0x48e>
 8002e7a:	e4f3      	b.n	8002864 <_dtoa_r+0x47c>
 8002e7c:	4650      	mov	r0, sl
 8002e7e:	f003 fea9 	bl	8006bd4 <__aeabi_i2d>
 8002e82:	4632      	mov	r2, r6
 8002e84:	463b      	mov	r3, r7
 8002e86:	f003 ff0b 	bl	8006ca0 <__aeabi_dmul>
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	4bbf      	ldr	r3, [pc, #764]	; (800318c <_dtoa_r+0xda4>)
 8002e8e:	f003 fd55 	bl	800693c <__adddf3>
 8002e92:	4604      	mov	r4, r0
 8002e94:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8002e98:	4630      	mov	r0, r6
 8002e9a:	4639      	mov	r1, r7
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4bbc      	ldr	r3, [pc, #752]	; (8003190 <_dtoa_r+0xda8>)
 8002ea0:	f003 fd4a 	bl	8006938 <__aeabi_dsub>
 8002ea4:	4622      	mov	r2, r4
 8002ea6:	462b      	mov	r3, r5
 8002ea8:	4606      	mov	r6, r0
 8002eaa:	460f      	mov	r7, r1
 8002eac:	f004 f988 	bl	80071c0 <__aeabi_dcmpgt>
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	f040 80ae 	bne.w	8003012 <_dtoa_r+0xc2a>
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	4639      	mov	r1, r7
 8002ec0:	f004 f960 	bl	8007184 <__aeabi_dcmplt>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d04a      	beq.n	8002f5e <_dtoa_r+0xb76>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9306      	str	r3, [sp, #24]
 8002ecc:	461e      	mov	r6, r3
 8002ece:	e6bc      	b.n	8002c4a <_dtoa_r+0x862>
 8002ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ed2:	f7ff bac2 	b.w	800245a <_dtoa_r+0x72>
 8002ed6:	9b06      	ldr	r3, [sp, #24]
 8002ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002eda:	9706      	str	r7, [sp, #24]
 8002edc:	1afb      	subs	r3, r7, r3
 8002ede:	441a      	add	r2, r3
 8002ee0:	920c      	str	r2, [sp, #48]	; 0x30
 8002ee2:	2700      	movs	r7, #0
 8002ee4:	e46d      	b.n	80027c2 <_dtoa_r+0x3da>
 8002ee6:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8002eea:	f04f 0a02 	mov.w	sl, #2
 8002eee:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002ef2:	e5bf      	b.n	8002a74 <_dtoa_r+0x68c>
 8002ef4:	461c      	mov	r4, r3
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8002efc:	e590      	b.n	8002a20 <_dtoa_r+0x638>
 8002efe:	2401      	movs	r4, #1
 8002f00:	940e      	str	r4, [sp, #56]	; 0x38
 8002f02:	9408      	str	r4, [sp, #32]
 8002f04:	9405      	str	r4, [sp, #20]
 8002f06:	e7f6      	b.n	8002ef6 <_dtoa_r+0xb0e>
 8002f08:	2a00      	cmp	r2, #0
 8002f0a:	469a      	mov	sl, r3
 8002f0c:	dd11      	ble.n	8002f32 <_dtoa_r+0xb4a>
 8002f0e:	4621      	mov	r1, r4
 8002f10:	2201      	movs	r2, #1
 8002f12:	4648      	mov	r0, r9
 8002f14:	f001 fd2a 	bl	800496c <__lshift>
 8002f18:	9906      	ldr	r1, [sp, #24]
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	f001 fd7e 	bl	8004a1c <__mcmp>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	f340 8148 	ble.w	80031b6 <_dtoa_r+0xdce>
 8002f26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8002f2a:	f000 8109 	beq.w	8003140 <_dtoa_r+0xd58>
 8002f2e:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 8002f32:	46b3      	mov	fp, r6
 8002f34:	f887 a000 	strb.w	sl, [r7]
 8002f38:	1c7d      	adds	r5, r7, #1
 8002f3a:	4646      	mov	r6, r8
 8002f3c:	940a      	str	r4, [sp, #40]	; 0x28
 8002f3e:	e50a      	b.n	8002956 <_dtoa_r+0x56e>
 8002f40:	d104      	bne.n	8002f4c <_dtoa_r+0xb64>
 8002f42:	f01a 0f01 	tst.w	sl, #1
 8002f46:	d001      	beq.n	8002f4c <_dtoa_r+0xb64>
 8002f48:	e4f5      	b.n	8002936 <_dtoa_r+0x54e>
 8002f4a:	4615      	mov	r5, r2
 8002f4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002f50:	2b30      	cmp	r3, #48	; 0x30
 8002f52:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8002f56:	d0f8      	beq.n	8002f4a <_dtoa_r+0xb62>
 8002f58:	e4fd      	b.n	8002956 <_dtoa_r+0x56e>
 8002f5a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8002f5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8002f62:	f7ff bb4b 	b.w	80025fc <_dtoa_r+0x214>
 8002f66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f68:	2230      	movs	r2, #48	; 0x30
 8002f6a:	700a      	strb	r2, [r1, #0]
 8002f6c:	9a04      	ldr	r2, [sp, #16]
 8002f6e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8002f72:	3201      	adds	r2, #1
 8002f74:	9204      	str	r2, [sp, #16]
 8002f76:	e400      	b.n	800277a <_dtoa_r+0x392>
 8002f78:	9b04      	ldr	r3, [sp, #16]
 8002f7a:	425c      	negs	r4, r3
 8002f7c:	2c00      	cmp	r4, #0
 8002f7e:	f000 80b3 	beq.w	80030e8 <_dtoa_r+0xd00>
 8002f82:	4b84      	ldr	r3, [pc, #528]	; (8003194 <_dtoa_r+0xdac>)
 8002f84:	f004 020f 	and.w	r2, r4, #15
 8002f88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002f94:	f003 fe84 	bl	8006ca0 <__aeabi_dmul>
 8002f98:	1124      	asrs	r4, r4, #4
 8002f9a:	4606      	mov	r6, r0
 8002f9c:	460f      	mov	r7, r1
 8002f9e:	f000 8116 	beq.w	80031ce <_dtoa_r+0xde6>
 8002fa2:	4d7d      	ldr	r5, [pc, #500]	; (8003198 <_dtoa_r+0xdb0>)
 8002fa4:	f04f 0a02 	mov.w	sl, #2
 8002fa8:	07e2      	lsls	r2, r4, #31
 8002faa:	d509      	bpl.n	8002fc0 <_dtoa_r+0xbd8>
 8002fac:	4630      	mov	r0, r6
 8002fae:	4639      	mov	r1, r7
 8002fb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002fb4:	f003 fe74 	bl	8006ca0 <__aeabi_dmul>
 8002fb8:	f10a 0a01 	add.w	sl, sl, #1
 8002fbc:	4606      	mov	r6, r0
 8002fbe:	460f      	mov	r7, r1
 8002fc0:	1064      	asrs	r4, r4, #1
 8002fc2:	f105 0508 	add.w	r5, r5, #8
 8002fc6:	d1ef      	bne.n	8002fa8 <_dtoa_r+0xbc0>
 8002fc8:	e56e      	b.n	8002aa8 <_dtoa_r+0x6c0>
 8002fca:	6871      	ldr	r1, [r6, #4]
 8002fcc:	4648      	mov	r0, r9
 8002fce:	f001 fad1 	bl	8004574 <_Balloc>
 8002fd2:	6933      	ldr	r3, [r6, #16]
 8002fd4:	1c9a      	adds	r2, r3, #2
 8002fd6:	4605      	mov	r5, r0
 8002fd8:	0092      	lsls	r2, r2, #2
 8002fda:	f106 010c 	add.w	r1, r6, #12
 8002fde:	300c      	adds	r0, #12
 8002fe0:	f001 f9c6 	bl	8004370 <memcpy>
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4648      	mov	r0, r9
 8002fea:	f001 fcbf 	bl	800496c <__lshift>
 8002fee:	4680      	mov	r8, r0
 8002ff0:	e670      	b.n	8002cd4 <_dtoa_r+0x8ec>
 8002ff2:	2b39      	cmp	r3, #57	; 0x39
 8002ff4:	f000 80a4 	beq.w	8003140 <_dtoa_r+0xd58>
 8002ff8:	f103 0a01 	add.w	sl, r3, #1
 8002ffc:	46b3      	mov	fp, r6
 8002ffe:	f887 a000 	strb.w	sl, [r7]
 8003002:	1c7d      	adds	r5, r7, #1
 8003004:	4646      	mov	r6, r8
 8003006:	940a      	str	r4, [sp, #40]	; 0x28
 8003008:	e4a5      	b.n	8002956 <_dtoa_r+0x56e>
 800300a:	46b3      	mov	fp, r6
 800300c:	469a      	mov	sl, r3
 800300e:	4646      	mov	r6, r8
 8003010:	e485      	b.n	800291e <_dtoa_r+0x536>
 8003012:	2300      	movs	r3, #0
 8003014:	9306      	str	r3, [sp, #24]
 8003016:	461e      	mov	r6, r3
 8003018:	e701      	b.n	8002e1e <_dtoa_r+0xa36>
 800301a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800301c:	495d      	ldr	r1, [pc, #372]	; (8003194 <_dtoa_r+0xdac>)
 800301e:	1e5a      	subs	r2, r3, #1
 8003020:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003024:	462b      	mov	r3, r5
 8003026:	9217      	str	r2, [sp, #92]	; 0x5c
 8003028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800302c:	4622      	mov	r2, r4
 800302e:	f003 fe37 	bl	8006ca0 <__aeabi_dmul>
 8003032:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8003036:	4639      	mov	r1, r7
 8003038:	4630      	mov	r0, r6
 800303a:	f004 f8e1 	bl	8007200 <__aeabi_d2iz>
 800303e:	4604      	mov	r4, r0
 8003040:	f003 fdc8 	bl	8006bd4 <__aeabi_i2d>
 8003044:	460b      	mov	r3, r1
 8003046:	4602      	mov	r2, r0
 8003048:	4639      	mov	r1, r7
 800304a:	4630      	mov	r0, r6
 800304c:	f003 fc74 	bl	8006938 <__aeabi_dsub>
 8003050:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003052:	460f      	mov	r7, r1
 8003054:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003056:	3430      	adds	r4, #48	; 0x30
 8003058:	2b01      	cmp	r3, #1
 800305a:	4606      	mov	r6, r0
 800305c:	700c      	strb	r4, [r1, #0]
 800305e:	f101 0501 	add.w	r5, r1, #1
 8003062:	d020      	beq.n	80030a6 <_dtoa_r+0xcbe>
 8003064:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003068:	4413      	add	r3, r2
 800306a:	469a      	mov	sl, r3
 800306c:	46ab      	mov	fp, r5
 800306e:	2200      	movs	r2, #0
 8003070:	4b4a      	ldr	r3, [pc, #296]	; (800319c <_dtoa_r+0xdb4>)
 8003072:	4630      	mov	r0, r6
 8003074:	4639      	mov	r1, r7
 8003076:	f003 fe13 	bl	8006ca0 <__aeabi_dmul>
 800307a:	460f      	mov	r7, r1
 800307c:	4606      	mov	r6, r0
 800307e:	f004 f8bf 	bl	8007200 <__aeabi_d2iz>
 8003082:	4604      	mov	r4, r0
 8003084:	f003 fda6 	bl	8006bd4 <__aeabi_i2d>
 8003088:	3430      	adds	r4, #48	; 0x30
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4630      	mov	r0, r6
 8003090:	4639      	mov	r1, r7
 8003092:	f003 fc51 	bl	8006938 <__aeabi_dsub>
 8003096:	f80b 4b01 	strb.w	r4, [fp], #1
 800309a:	45da      	cmp	sl, fp
 800309c:	4606      	mov	r6, r0
 800309e:	460f      	mov	r7, r1
 80030a0:	d1e5      	bne.n	800306e <_dtoa_r+0xc86>
 80030a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80030a4:	441d      	add	r5, r3
 80030a6:	2200      	movs	r2, #0
 80030a8:	4b3d      	ldr	r3, [pc, #244]	; (80031a0 <_dtoa_r+0xdb8>)
 80030aa:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80030ae:	f003 fc45 	bl	800693c <__adddf3>
 80030b2:	4632      	mov	r2, r6
 80030b4:	463b      	mov	r3, r7
 80030b6:	f004 f865 	bl	8007184 <__aeabi_dcmplt>
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d048      	beq.n	8003150 <_dtoa_r+0xd68>
 80030be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80030c0:	9304      	str	r3, [sp, #16]
 80030c2:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80030c6:	f7ff bb4c 	b.w	8002762 <_dtoa_r+0x37a>
 80030ca:	9b07      	ldr	r3, [sp, #28]
 80030cc:	9a08      	ldr	r2, [sp, #32]
 80030ce:	1a9d      	subs	r5, r3, r2
 80030d0:	2300      	movs	r3, #0
 80030d2:	f7ff bb7c 	b.w	80027ce <_dtoa_r+0x3e6>
 80030d6:	2700      	movs	r7, #0
 80030d8:	e6ca      	b.n	8002e70 <_dtoa_r+0xa88>
 80030da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80030dc:	9f06      	ldr	r7, [sp, #24]
 80030de:	9d07      	ldr	r5, [sp, #28]
 80030e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80030e4:	f7ff bb73 	b.w	80027ce <_dtoa_r+0x3e6>
 80030e8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80030ec:	f04f 0a02 	mov.w	sl, #2
 80030f0:	e4da      	b.n	8002aa8 <_dtoa_r+0x6c0>
 80030f2:	9b08      	ldr	r3, [sp, #32]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f43f aec1 	beq.w	8002e7c <_dtoa_r+0xa94>
 80030fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f77f af2e 	ble.w	8002f5e <_dtoa_r+0xb76>
 8003102:	2200      	movs	r2, #0
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <_dtoa_r+0xdb4>)
 8003106:	4630      	mov	r0, r6
 8003108:	4639      	mov	r1, r7
 800310a:	f003 fdc9 	bl	8006ca0 <__aeabi_dmul>
 800310e:	4606      	mov	r6, r0
 8003110:	460f      	mov	r7, r1
 8003112:	f10a 0001 	add.w	r0, sl, #1
 8003116:	f003 fd5d 	bl	8006bd4 <__aeabi_i2d>
 800311a:	4632      	mov	r2, r6
 800311c:	463b      	mov	r3, r7
 800311e:	f003 fdbf 	bl	8006ca0 <__aeabi_dmul>
 8003122:	2200      	movs	r2, #0
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <_dtoa_r+0xda4>)
 8003126:	f003 fc09 	bl	800693c <__adddf3>
 800312a:	9a04      	ldr	r2, [sp, #16]
 800312c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800312e:	9312      	str	r3, [sp, #72]	; 0x48
 8003130:	3a01      	subs	r2, #1
 8003132:	4604      	mov	r4, r0
 8003134:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003138:	9216      	str	r2, [sp, #88]	; 0x58
 800313a:	e4d6      	b.n	8002aea <_dtoa_r+0x702>
 800313c:	940a      	str	r4, [sp, #40]	; 0x28
 800313e:	e584      	b.n	8002c4a <_dtoa_r+0x862>
 8003140:	2239      	movs	r2, #57	; 0x39
 8003142:	46b3      	mov	fp, r6
 8003144:	940a      	str	r4, [sp, #40]	; 0x28
 8003146:	4646      	mov	r6, r8
 8003148:	703a      	strb	r2, [r7, #0]
 800314a:	1c7d      	adds	r5, r7, #1
 800314c:	f7ff bbf5 	b.w	800293a <_dtoa_r+0x552>
 8003150:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003154:	2000      	movs	r0, #0
 8003156:	4912      	ldr	r1, [pc, #72]	; (80031a0 <_dtoa_r+0xdb8>)
 8003158:	f003 fbee 	bl	8006938 <__aeabi_dsub>
 800315c:	4632      	mov	r2, r6
 800315e:	463b      	mov	r3, r7
 8003160:	f004 f82e 	bl	80071c0 <__aeabi_dcmpgt>
 8003164:	b908      	cbnz	r0, 800316a <_dtoa_r+0xd82>
 8003166:	e6fa      	b.n	8002f5e <_dtoa_r+0xb76>
 8003168:	4615      	mov	r5, r2
 800316a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800316e:	2b30      	cmp	r3, #48	; 0x30
 8003170:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003174:	d0f8      	beq.n	8003168 <_dtoa_r+0xd80>
 8003176:	e539      	b.n	8002bec <_dtoa_r+0x804>
 8003178:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800317a:	9304      	str	r3, [sp, #16]
 800317c:	f7ff baf1 	b.w	8002762 <_dtoa_r+0x37a>
 8003180:	f1ba 0f00 	cmp.w	sl, #0
 8003184:	f47f ad7c 	bne.w	8002c80 <_dtoa_r+0x898>
 8003188:	e662      	b.n	8002e50 <_dtoa_r+0xa68>
 800318a:	bf00      	nop
 800318c:	401c0000 	.word	0x401c0000
 8003190:	40140000 	.word	0x40140000
 8003194:	0800c758 	.word	0x0800c758
 8003198:	0800c848 	.word	0x0800c848
 800319c:	40240000 	.word	0x40240000
 80031a0:	3fe00000 	.word	0x3fe00000
 80031a4:	2b39      	cmp	r3, #57	; 0x39
 80031a6:	46d3      	mov	fp, sl
 80031a8:	469a      	mov	sl, r3
 80031aa:	d0c9      	beq.n	8003140 <_dtoa_r+0xd58>
 80031ac:	f1bb 0f00 	cmp.w	fp, #0
 80031b0:	f73f aebd 	bgt.w	8002f2e <_dtoa_r+0xb46>
 80031b4:	e6bd      	b.n	8002f32 <_dtoa_r+0xb4a>
 80031b6:	f47f aebc 	bne.w	8002f32 <_dtoa_r+0xb4a>
 80031ba:	f01a 0f01 	tst.w	sl, #1
 80031be:	f43f aeb8 	beq.w	8002f32 <_dtoa_r+0xb4a>
 80031c2:	e6b0      	b.n	8002f26 <_dtoa_r+0xb3e>
 80031c4:	9b00      	ldr	r3, [sp, #0]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	dc25      	bgt.n	8003216 <_dtoa_r+0xe2e>
 80031ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031cc:	e60d      	b.n	8002dea <_dtoa_r+0xa02>
 80031ce:	f04f 0a02 	mov.w	sl, #2
 80031d2:	e469      	b.n	8002aa8 <_dtoa_r+0x6c0>
 80031d4:	9b00      	ldr	r3, [sp, #0]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	dc1d      	bgt.n	8003216 <_dtoa_r+0xe2e>
 80031da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031dc:	e56d      	b.n	8002cba <_dtoa_r+0x8d2>
 80031de:	2400      	movs	r4, #0
 80031e0:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80031e4:	4621      	mov	r1, r4
 80031e6:	4648      	mov	r0, r9
 80031e8:	f001 f9c4 	bl	8004574 <_Balloc>
 80031ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f0:	9308      	str	r3, [sp, #32]
 80031f2:	930e      	str	r3, [sp, #56]	; 0x38
 80031f4:	2301      	movs	r3, #1
 80031f6:	9009      	str	r0, [sp, #36]	; 0x24
 80031f8:	9405      	str	r4, [sp, #20]
 80031fa:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 80031fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8003200:	f7ff b9fc 	b.w	80025fc <_dtoa_r+0x214>
 8003204:	f43f ab48 	beq.w	8002898 <_dtoa_r+0x4b0>
 8003208:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800320c:	f7ff bb3f 	b.w	800288e <_dtoa_r+0x4a6>
 8003210:	2601      	movs	r6, #1
 8003212:	f7ff b9bc 	b.w	800258e <_dtoa_r+0x1a6>
 8003216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003218:	9308      	str	r3, [sp, #32]
 800321a:	e5ee      	b.n	8002dfa <_dtoa_r+0xa12>

0800321c <__sflush_r>:
 800321c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8003220:	b29a      	uxth	r2, r3
 8003222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003226:	460d      	mov	r5, r1
 8003228:	0711      	lsls	r1, r2, #28
 800322a:	4680      	mov	r8, r0
 800322c:	d43c      	bmi.n	80032a8 <__sflush_r+0x8c>
 800322e:	686a      	ldr	r2, [r5, #4]
 8003230:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003234:	2a00      	cmp	r2, #0
 8003236:	81ab      	strh	r3, [r5, #12]
 8003238:	dd73      	ble.n	8003322 <__sflush_r+0x106>
 800323a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800323c:	2c00      	cmp	r4, #0
 800323e:	d04b      	beq.n	80032d8 <__sflush_r+0xbc>
 8003240:	b29b      	uxth	r3, r3
 8003242:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003246:	2100      	movs	r1, #0
 8003248:	b292      	uxth	r2, r2
 800324a:	f8d8 6000 	ldr.w	r6, [r8]
 800324e:	f8c8 1000 	str.w	r1, [r8]
 8003252:	2a00      	cmp	r2, #0
 8003254:	d069      	beq.n	800332a <__sflush_r+0x10e>
 8003256:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003258:	075f      	lsls	r7, r3, #29
 800325a:	d505      	bpl.n	8003268 <__sflush_r+0x4c>
 800325c:	6869      	ldr	r1, [r5, #4]
 800325e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003260:	1a52      	subs	r2, r2, r1
 8003262:	b10b      	cbz	r3, 8003268 <__sflush_r+0x4c>
 8003264:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003266:	1ad2      	subs	r2, r2, r3
 8003268:	2300      	movs	r3, #0
 800326a:	69e9      	ldr	r1, [r5, #28]
 800326c:	4640      	mov	r0, r8
 800326e:	47a0      	blx	r4
 8003270:	1c44      	adds	r4, r0, #1
 8003272:	d03c      	beq.n	80032ee <__sflush_r+0xd2>
 8003274:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8003278:	692a      	ldr	r2, [r5, #16]
 800327a:	602a      	str	r2, [r5, #0]
 800327c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003280:	2200      	movs	r2, #0
 8003282:	81ab      	strh	r3, [r5, #12]
 8003284:	04db      	lsls	r3, r3, #19
 8003286:	606a      	str	r2, [r5, #4]
 8003288:	d449      	bmi.n	800331e <__sflush_r+0x102>
 800328a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800328c:	f8c8 6000 	str.w	r6, [r8]
 8003290:	b311      	cbz	r1, 80032d8 <__sflush_r+0xbc>
 8003292:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8003296:	4299      	cmp	r1, r3
 8003298:	d002      	beq.n	80032a0 <__sflush_r+0x84>
 800329a:	4640      	mov	r0, r8
 800329c:	f000 f9e0 	bl	8003660 <_free_r>
 80032a0:	2000      	movs	r0, #0
 80032a2:	6328      	str	r0, [r5, #48]	; 0x30
 80032a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032a8:	692e      	ldr	r6, [r5, #16]
 80032aa:	b1ae      	cbz	r6, 80032d8 <__sflush_r+0xbc>
 80032ac:	682c      	ldr	r4, [r5, #0]
 80032ae:	602e      	str	r6, [r5, #0]
 80032b0:	0790      	lsls	r0, r2, #30
 80032b2:	bf0c      	ite	eq
 80032b4:	696b      	ldreq	r3, [r5, #20]
 80032b6:	2300      	movne	r3, #0
 80032b8:	1ba4      	subs	r4, r4, r6
 80032ba:	60ab      	str	r3, [r5, #8]
 80032bc:	e00a      	b.n	80032d4 <__sflush_r+0xb8>
 80032be:	4623      	mov	r3, r4
 80032c0:	4632      	mov	r2, r6
 80032c2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80032c4:	69e9      	ldr	r1, [r5, #28]
 80032c6:	4640      	mov	r0, r8
 80032c8:	47b8      	blx	r7
 80032ca:	2800      	cmp	r0, #0
 80032cc:	eba4 0400 	sub.w	r4, r4, r0
 80032d0:	4406      	add	r6, r0
 80032d2:	dd04      	ble.n	80032de <__sflush_r+0xc2>
 80032d4:	2c00      	cmp	r4, #0
 80032d6:	dcf2      	bgt.n	80032be <__sflush_r+0xa2>
 80032d8:	2000      	movs	r0, #0
 80032da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032de:	89ab      	ldrh	r3, [r5, #12]
 80032e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e4:	81ab      	strh	r3, [r5, #12]
 80032e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032ee:	f8d8 2000 	ldr.w	r2, [r8]
 80032f2:	2a1d      	cmp	r2, #29
 80032f4:	d8f3      	bhi.n	80032de <__sflush_r+0xc2>
 80032f6:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <__sflush_r+0x144>)
 80032f8:	40d3      	lsrs	r3, r2
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	f083 0401 	eor.w	r4, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0eb      	beq.n	80032de <__sflush_r+0xc2>
 8003306:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800330a:	6929      	ldr	r1, [r5, #16]
 800330c:	6029      	str	r1, [r5, #0]
 800330e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003312:	04d9      	lsls	r1, r3, #19
 8003314:	606c      	str	r4, [r5, #4]
 8003316:	81ab      	strh	r3, [r5, #12]
 8003318:	d5b7      	bpl.n	800328a <__sflush_r+0x6e>
 800331a:	2a00      	cmp	r2, #0
 800331c:	d1b5      	bne.n	800328a <__sflush_r+0x6e>
 800331e:	6528      	str	r0, [r5, #80]	; 0x50
 8003320:	e7b3      	b.n	800328a <__sflush_r+0x6e>
 8003322:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003324:	2a00      	cmp	r2, #0
 8003326:	dc88      	bgt.n	800323a <__sflush_r+0x1e>
 8003328:	e7d6      	b.n	80032d8 <__sflush_r+0xbc>
 800332a:	2301      	movs	r3, #1
 800332c:	69e9      	ldr	r1, [r5, #28]
 800332e:	4640      	mov	r0, r8
 8003330:	47a0      	blx	r4
 8003332:	1c43      	adds	r3, r0, #1
 8003334:	4602      	mov	r2, r0
 8003336:	d002      	beq.n	800333e <__sflush_r+0x122>
 8003338:	89ab      	ldrh	r3, [r5, #12]
 800333a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800333c:	e78c      	b.n	8003258 <__sflush_r+0x3c>
 800333e:	f8d8 3000 	ldr.w	r3, [r8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f8      	beq.n	8003338 <__sflush_r+0x11c>
 8003346:	2b1d      	cmp	r3, #29
 8003348:	d001      	beq.n	800334e <__sflush_r+0x132>
 800334a:	2b16      	cmp	r3, #22
 800334c:	d102      	bne.n	8003354 <__sflush_r+0x138>
 800334e:	f8c8 6000 	str.w	r6, [r8]
 8003352:	e7c1      	b.n	80032d8 <__sflush_r+0xbc>
 8003354:	89ab      	ldrh	r3, [r5, #12]
 8003356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800335a:	81ab      	strh	r3, [r5, #12]
 800335c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003360:	20400001 	.word	0x20400001

08003364 <_fflush_r>:
 8003364:	b510      	push	{r4, lr}
 8003366:	4604      	mov	r4, r0
 8003368:	b082      	sub	sp, #8
 800336a:	b108      	cbz	r0, 8003370 <_fflush_r+0xc>
 800336c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800336e:	b153      	cbz	r3, 8003386 <_fflush_r+0x22>
 8003370:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8003374:	b908      	cbnz	r0, 800337a <_fflush_r+0x16>
 8003376:	b002      	add	sp, #8
 8003378:	bd10      	pop	{r4, pc}
 800337a:	4620      	mov	r0, r4
 800337c:	b002      	add	sp, #8
 800337e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003382:	f7ff bf4b 	b.w	800321c <__sflush_r>
 8003386:	9101      	str	r1, [sp, #4]
 8003388:	f000 f8fc 	bl	8003584 <__sinit>
 800338c:	9901      	ldr	r1, [sp, #4]
 800338e:	e7ef      	b.n	8003370 <_fflush_r+0xc>

08003390 <fflush>:
 8003390:	b120      	cbz	r0, 800339c <fflush+0xc>
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <fflush+0x18>)
 8003394:	4601      	mov	r1, r0
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	f7ff bfe4 	b.w	8003364 <_fflush_r>
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <fflush+0x1c>)
 800339e:	4904      	ldr	r1, [pc, #16]	; (80033b0 <fflush+0x20>)
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	f000 bbed 	b.w	8003b80 <_fwalk_reent>
 80033a6:	bf00      	nop
 80033a8:	20000008 	.word	0x20000008
 80033ac:	0800c720 	.word	0x0800c720
 80033b0:	08003365 	.word	0x08003365

080033b4 <__fp_unlock>:
 80033b4:	2000      	movs	r0, #0
 80033b6:	4770      	bx	lr

080033b8 <_cleanup_r>:
 80033b8:	4901      	ldr	r1, [pc, #4]	; (80033c0 <_cleanup_r+0x8>)
 80033ba:	f000 bbe1 	b.w	8003b80 <_fwalk_reent>
 80033be:	bf00      	nop
 80033c0:	080066a5 	.word	0x080066a5

080033c4 <__sinit.part.1>:
 80033c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c8:	4b35      	ldr	r3, [pc, #212]	; (80034a0 <__sinit.part.1+0xdc>)
 80033ca:	6845      	ldr	r5, [r0, #4]
 80033cc:	63c3      	str	r3, [r0, #60]	; 0x3c
 80033ce:	2400      	movs	r4, #0
 80033d0:	4607      	mov	r7, r0
 80033d2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 80033d6:	2304      	movs	r3, #4
 80033d8:	2103      	movs	r1, #3
 80033da:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 80033de:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 80033e2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 80033e6:	b083      	sub	sp, #12
 80033e8:	602c      	str	r4, [r5, #0]
 80033ea:	606c      	str	r4, [r5, #4]
 80033ec:	60ac      	str	r4, [r5, #8]
 80033ee:	666c      	str	r4, [r5, #100]	; 0x64
 80033f0:	81ec      	strh	r4, [r5, #14]
 80033f2:	612c      	str	r4, [r5, #16]
 80033f4:	616c      	str	r4, [r5, #20]
 80033f6:	61ac      	str	r4, [r5, #24]
 80033f8:	81ab      	strh	r3, [r5, #12]
 80033fa:	4621      	mov	r1, r4
 80033fc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003400:	2208      	movs	r2, #8
 8003402:	f7fc ff93 	bl	800032c <memset>
 8003406:	68be      	ldr	r6, [r7, #8]
 8003408:	f8df b098 	ldr.w	fp, [pc, #152]	; 80034a4 <__sinit.part.1+0xe0>
 800340c:	f8df a098 	ldr.w	sl, [pc, #152]	; 80034a8 <__sinit.part.1+0xe4>
 8003410:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80034ac <__sinit.part.1+0xe8>
 8003414:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80034b0 <__sinit.part.1+0xec>
 8003418:	f8c5 b020 	str.w	fp, [r5, #32]
 800341c:	2301      	movs	r3, #1
 800341e:	2209      	movs	r2, #9
 8003420:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8003424:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8003428:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800342c:	61ed      	str	r5, [r5, #28]
 800342e:	4621      	mov	r1, r4
 8003430:	81f3      	strh	r3, [r6, #14]
 8003432:	81b2      	strh	r2, [r6, #12]
 8003434:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8003438:	6034      	str	r4, [r6, #0]
 800343a:	6074      	str	r4, [r6, #4]
 800343c:	60b4      	str	r4, [r6, #8]
 800343e:	6674      	str	r4, [r6, #100]	; 0x64
 8003440:	6134      	str	r4, [r6, #16]
 8003442:	6174      	str	r4, [r6, #20]
 8003444:	61b4      	str	r4, [r6, #24]
 8003446:	2208      	movs	r2, #8
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	f7fc ff6f 	bl	800032c <memset>
 800344e:	68fd      	ldr	r5, [r7, #12]
 8003450:	61f6      	str	r6, [r6, #28]
 8003452:	2012      	movs	r0, #18
 8003454:	2202      	movs	r2, #2
 8003456:	f8c6 b020 	str.w	fp, [r6, #32]
 800345a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800345e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8003462:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8003466:	4621      	mov	r1, r4
 8003468:	81a8      	strh	r0, [r5, #12]
 800346a:	81ea      	strh	r2, [r5, #14]
 800346c:	602c      	str	r4, [r5, #0]
 800346e:	606c      	str	r4, [r5, #4]
 8003470:	60ac      	str	r4, [r5, #8]
 8003472:	666c      	str	r4, [r5, #100]	; 0x64
 8003474:	612c      	str	r4, [r5, #16]
 8003476:	616c      	str	r4, [r5, #20]
 8003478:	61ac      	str	r4, [r5, #24]
 800347a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800347e:	2208      	movs	r2, #8
 8003480:	f7fc ff54 	bl	800032c <memset>
 8003484:	9b01      	ldr	r3, [sp, #4]
 8003486:	61ed      	str	r5, [r5, #28]
 8003488:	f8c5 b020 	str.w	fp, [r5, #32]
 800348c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8003490:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8003494:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8003498:	63bb      	str	r3, [r7, #56]	; 0x38
 800349a:	b003      	add	sp, #12
 800349c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034a0:	080033b9 	.word	0x080033b9
 80034a4:	08005305 	.word	0x08005305
 80034a8:	0800532d 	.word	0x0800532d
 80034ac:	08005369 	.word	0x08005369
 80034b0:	08005389 	.word	0x08005389

080034b4 <__fp_lock>:
 80034b4:	2000      	movs	r0, #0
 80034b6:	4770      	bx	lr

080034b8 <__sfmoreglue>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	2368      	movs	r3, #104	; 0x68
 80034bc:	1e4d      	subs	r5, r1, #1
 80034be:	fb03 f505 	mul.w	r5, r3, r5
 80034c2:	460e      	mov	r6, r1
 80034c4:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034c8:	f000 fc48 	bl	8003d5c <_malloc_r>
 80034cc:	4604      	mov	r4, r0
 80034ce:	b140      	cbz	r0, 80034e2 <__sfmoreglue+0x2a>
 80034d0:	2100      	movs	r1, #0
 80034d2:	300c      	adds	r0, #12
 80034d4:	6066      	str	r6, [r4, #4]
 80034d6:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034da:	6021      	str	r1, [r4, #0]
 80034dc:	60a0      	str	r0, [r4, #8]
 80034de:	f7fc ff25 	bl	800032c <memset>
 80034e2:	4620      	mov	r0, r4
 80034e4:	bd70      	pop	{r4, r5, r6, pc}
 80034e6:	bf00      	nop

080034e8 <__sfp>:
 80034e8:	4b20      	ldr	r3, [pc, #128]	; (800356c <__sfp+0x84>)
 80034ea:	b570      	push	{r4, r5, r6, lr}
 80034ec:	681d      	ldr	r5, [r3, #0]
 80034ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80034f0:	4606      	mov	r6, r0
 80034f2:	b913      	cbnz	r3, 80034fa <__sfp+0x12>
 80034f4:	4628      	mov	r0, r5
 80034f6:	f7ff ff65 	bl	80033c4 <__sinit.part.1>
 80034fa:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 80034fe:	686b      	ldr	r3, [r5, #4]
 8003500:	68ac      	ldr	r4, [r5, #8]
 8003502:	3b01      	subs	r3, #1
 8003504:	d505      	bpl.n	8003512 <__sfp+0x2a>
 8003506:	e021      	b.n	800354c <__sfp+0x64>
 8003508:	3b01      	subs	r3, #1
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003510:	d01c      	beq.n	800354c <__sfp+0x64>
 8003512:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003516:	2a00      	cmp	r2, #0
 8003518:	d1f6      	bne.n	8003508 <__sfp+0x20>
 800351a:	2500      	movs	r5, #0
 800351c:	2301      	movs	r3, #1
 800351e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003522:	81e2      	strh	r2, [r4, #14]
 8003524:	81a3      	strh	r3, [r4, #12]
 8003526:	6665      	str	r5, [r4, #100]	; 0x64
 8003528:	6025      	str	r5, [r4, #0]
 800352a:	60a5      	str	r5, [r4, #8]
 800352c:	6065      	str	r5, [r4, #4]
 800352e:	6125      	str	r5, [r4, #16]
 8003530:	6165      	str	r5, [r4, #20]
 8003532:	61a5      	str	r5, [r4, #24]
 8003534:	4629      	mov	r1, r5
 8003536:	2208      	movs	r2, #8
 8003538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800353c:	f7fc fef6 	bl	800032c <memset>
 8003540:	6325      	str	r5, [r4, #48]	; 0x30
 8003542:	6365      	str	r5, [r4, #52]	; 0x34
 8003544:	6465      	str	r5, [r4, #68]	; 0x44
 8003546:	64a5      	str	r5, [r4, #72]	; 0x48
 8003548:	4620      	mov	r0, r4
 800354a:	bd70      	pop	{r4, r5, r6, pc}
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	b10b      	cbz	r3, 8003554 <__sfp+0x6c>
 8003550:	461d      	mov	r5, r3
 8003552:	e7d4      	b.n	80034fe <__sfp+0x16>
 8003554:	2104      	movs	r1, #4
 8003556:	4630      	mov	r0, r6
 8003558:	f7ff ffae 	bl	80034b8 <__sfmoreglue>
 800355c:	6028      	str	r0, [r5, #0]
 800355e:	b108      	cbz	r0, 8003564 <__sfp+0x7c>
 8003560:	4605      	mov	r5, r0
 8003562:	e7cc      	b.n	80034fe <__sfp+0x16>
 8003564:	230c      	movs	r3, #12
 8003566:	6033      	str	r3, [r6, #0]
 8003568:	bd70      	pop	{r4, r5, r6, pc}
 800356a:	bf00      	nop
 800356c:	0800c720 	.word	0x0800c720

08003570 <_cleanup>:
 8003570:	4b02      	ldr	r3, [pc, #8]	; (800357c <_cleanup+0xc>)
 8003572:	4903      	ldr	r1, [pc, #12]	; (8003580 <_cleanup+0x10>)
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	f000 bb03 	b.w	8003b80 <_fwalk_reent>
 800357a:	bf00      	nop
 800357c:	0800c720 	.word	0x0800c720
 8003580:	080066a5 	.word	0x080066a5

08003584 <__sinit>:
 8003584:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003586:	b103      	cbz	r3, 800358a <__sinit+0x6>
 8003588:	4770      	bx	lr
 800358a:	e71b      	b.n	80033c4 <__sinit.part.1>

0800358c <__sfp_lock_acquire>:
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop

08003590 <__sfp_lock_release>:
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop

08003594 <__sinit_lock_acquire>:
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop

08003598 <__sinit_lock_release>:
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop

0800359c <__fp_lock_all>:
 800359c:	4b02      	ldr	r3, [pc, #8]	; (80035a8 <__fp_lock_all+0xc>)
 800359e:	4903      	ldr	r1, [pc, #12]	; (80035ac <__fp_lock_all+0x10>)
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	f000 bac7 	b.w	8003b34 <_fwalk>
 80035a6:	bf00      	nop
 80035a8:	20000008 	.word	0x20000008
 80035ac:	080034b5 	.word	0x080034b5

080035b0 <__fp_unlock_all>:
 80035b0:	4b02      	ldr	r3, [pc, #8]	; (80035bc <__fp_unlock_all+0xc>)
 80035b2:	4903      	ldr	r1, [pc, #12]	; (80035c0 <__fp_unlock_all+0x10>)
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	f000 babd 	b.w	8003b34 <_fwalk>
 80035ba:	bf00      	nop
 80035bc:	20000008 	.word	0x20000008
 80035c0:	080033b5 	.word	0x080033b5

080035c4 <_malloc_trim_r>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	4f23      	ldr	r7, [pc, #140]	; (8003654 <_malloc_trim_r+0x90>)
 80035c8:	460c      	mov	r4, r1
 80035ca:	4606      	mov	r6, r0
 80035cc:	f000 ffce 	bl	800456c <__malloc_lock>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	685d      	ldr	r5, [r3, #4]
 80035d4:	f025 0503 	bic.w	r5, r5, #3
 80035d8:	1b29      	subs	r1, r5, r4
 80035da:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80035de:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80035e2:	f021 010f 	bic.w	r1, r1, #15
 80035e6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80035ea:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80035ee:	db07      	blt.n	8003600 <_malloc_trim_r+0x3c>
 80035f0:	2100      	movs	r1, #0
 80035f2:	4630      	mov	r0, r6
 80035f4:	f004 fbc2 	bl	8007d7c <_sbrk_r>
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	442b      	add	r3, r5
 80035fc:	4298      	cmp	r0, r3
 80035fe:	d004      	beq.n	800360a <_malloc_trim_r+0x46>
 8003600:	4630      	mov	r0, r6
 8003602:	f000 ffb5 	bl	8004570 <__malloc_unlock>
 8003606:	2000      	movs	r0, #0
 8003608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360a:	4261      	negs	r1, r4
 800360c:	4630      	mov	r0, r6
 800360e:	f004 fbb5 	bl	8007d7c <_sbrk_r>
 8003612:	3001      	adds	r0, #1
 8003614:	d00d      	beq.n	8003632 <_malloc_trim_r+0x6e>
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <_malloc_trim_r+0x94>)
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	6819      	ldr	r1, [r3, #0]
 800361c:	1b2d      	subs	r5, r5, r4
 800361e:	f045 0501 	orr.w	r5, r5, #1
 8003622:	4630      	mov	r0, r6
 8003624:	1b09      	subs	r1, r1, r4
 8003626:	6055      	str	r5, [r2, #4]
 8003628:	6019      	str	r1, [r3, #0]
 800362a:	f000 ffa1 	bl	8004570 <__malloc_unlock>
 800362e:	2001      	movs	r0, #1
 8003630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003632:	2100      	movs	r1, #0
 8003634:	4630      	mov	r0, r6
 8003636:	f004 fba1 	bl	8007d7c <_sbrk_r>
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	1a83      	subs	r3, r0, r2
 800363e:	2b0f      	cmp	r3, #15
 8003640:	ddde      	ble.n	8003600 <_malloc_trim_r+0x3c>
 8003642:	4c06      	ldr	r4, [pc, #24]	; (800365c <_malloc_trim_r+0x98>)
 8003644:	4904      	ldr	r1, [pc, #16]	; (8003658 <_malloc_trim_r+0x94>)
 8003646:	6824      	ldr	r4, [r4, #0]
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	1b00      	subs	r0, r0, r4
 800364e:	6053      	str	r3, [r2, #4]
 8003650:	6008      	str	r0, [r1, #0]
 8003652:	e7d5      	b.n	8003600 <_malloc_trim_r+0x3c>
 8003654:	200004b4 	.word	0x200004b4
 8003658:	20000ae0 	.word	0x20000ae0
 800365c:	200008bc 	.word	0x200008bc

08003660 <_free_r>:
 8003660:	2900      	cmp	r1, #0
 8003662:	d045      	beq.n	80036f0 <_free_r+0x90>
 8003664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003668:	460d      	mov	r5, r1
 800366a:	4680      	mov	r8, r0
 800366c:	f000 ff7e 	bl	800456c <__malloc_lock>
 8003670:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8003674:	496a      	ldr	r1, [pc, #424]	; (8003820 <_free_r+0x1c0>)
 8003676:	f027 0301 	bic.w	r3, r7, #1
 800367a:	f1a5 0408 	sub.w	r4, r5, #8
 800367e:	18e2      	adds	r2, r4, r3
 8003680:	688e      	ldr	r6, [r1, #8]
 8003682:	6850      	ldr	r0, [r2, #4]
 8003684:	42b2      	cmp	r2, r6
 8003686:	f020 0003 	bic.w	r0, r0, #3
 800368a:	d062      	beq.n	8003752 <_free_r+0xf2>
 800368c:	07fe      	lsls	r6, r7, #31
 800368e:	6050      	str	r0, [r2, #4]
 8003690:	d40b      	bmi.n	80036aa <_free_r+0x4a>
 8003692:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8003696:	1be4      	subs	r4, r4, r7
 8003698:	f101 0e08 	add.w	lr, r1, #8
 800369c:	68a5      	ldr	r5, [r4, #8]
 800369e:	4575      	cmp	r5, lr
 80036a0:	443b      	add	r3, r7
 80036a2:	d06f      	beq.n	8003784 <_free_r+0x124>
 80036a4:	68e7      	ldr	r7, [r4, #12]
 80036a6:	60ef      	str	r7, [r5, #12]
 80036a8:	60bd      	str	r5, [r7, #8]
 80036aa:	1815      	adds	r5, r2, r0
 80036ac:	686d      	ldr	r5, [r5, #4]
 80036ae:	07ed      	lsls	r5, r5, #31
 80036b0:	d542      	bpl.n	8003738 <_free_r+0xd8>
 80036b2:	f043 0201 	orr.w	r2, r3, #1
 80036b6:	6062      	str	r2, [r4, #4]
 80036b8:	50e3      	str	r3, [r4, r3]
 80036ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036be:	d218      	bcs.n	80036f2 <_free_r+0x92>
 80036c0:	08db      	lsrs	r3, r3, #3
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	684d      	ldr	r5, [r1, #4]
 80036c6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 80036ca:	60a7      	str	r7, [r4, #8]
 80036cc:	2001      	movs	r0, #1
 80036ce:	109b      	asrs	r3, r3, #2
 80036d0:	fa00 f303 	lsl.w	r3, r0, r3
 80036d4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 80036d8:	431d      	orrs	r5, r3
 80036da:	3808      	subs	r0, #8
 80036dc:	60e0      	str	r0, [r4, #12]
 80036de:	604d      	str	r5, [r1, #4]
 80036e0:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 80036e4:	60fc      	str	r4, [r7, #12]
 80036e6:	4640      	mov	r0, r8
 80036e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ec:	f000 bf40 	b.w	8004570 <__malloc_unlock>
 80036f0:	4770      	bx	lr
 80036f2:	0a5a      	lsrs	r2, r3, #9
 80036f4:	2a04      	cmp	r2, #4
 80036f6:	d853      	bhi.n	80037a0 <_free_r+0x140>
 80036f8:	099a      	lsrs	r2, r3, #6
 80036fa:	f102 0739 	add.w	r7, r2, #57	; 0x39
 80036fe:	007f      	lsls	r7, r7, #1
 8003700:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8003704:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8003708:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 800370c:	4944      	ldr	r1, [pc, #272]	; (8003820 <_free_r+0x1c0>)
 800370e:	3808      	subs	r0, #8
 8003710:	4290      	cmp	r0, r2
 8003712:	d04d      	beq.n	80037b0 <_free_r+0x150>
 8003714:	6851      	ldr	r1, [r2, #4]
 8003716:	f021 0103 	bic.w	r1, r1, #3
 800371a:	428b      	cmp	r3, r1
 800371c:	d202      	bcs.n	8003724 <_free_r+0xc4>
 800371e:	6892      	ldr	r2, [r2, #8]
 8003720:	4290      	cmp	r0, r2
 8003722:	d1f7      	bne.n	8003714 <_free_r+0xb4>
 8003724:	68d0      	ldr	r0, [r2, #12]
 8003726:	60e0      	str	r0, [r4, #12]
 8003728:	60a2      	str	r2, [r4, #8]
 800372a:	6084      	str	r4, [r0, #8]
 800372c:	60d4      	str	r4, [r2, #12]
 800372e:	4640      	mov	r0, r8
 8003730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003734:	f000 bf1c 	b.w	8004570 <__malloc_unlock>
 8003738:	6895      	ldr	r5, [r2, #8]
 800373a:	4f3a      	ldr	r7, [pc, #232]	; (8003824 <_free_r+0x1c4>)
 800373c:	42bd      	cmp	r5, r7
 800373e:	4403      	add	r3, r0
 8003740:	d03f      	beq.n	80037c2 <_free_r+0x162>
 8003742:	68d0      	ldr	r0, [r2, #12]
 8003744:	60e8      	str	r0, [r5, #12]
 8003746:	f043 0201 	orr.w	r2, r3, #1
 800374a:	6085      	str	r5, [r0, #8]
 800374c:	6062      	str	r2, [r4, #4]
 800374e:	50e3      	str	r3, [r4, r3]
 8003750:	e7b3      	b.n	80036ba <_free_r+0x5a>
 8003752:	07ff      	lsls	r7, r7, #31
 8003754:	4403      	add	r3, r0
 8003756:	d407      	bmi.n	8003768 <_free_r+0x108>
 8003758:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800375c:	1aa4      	subs	r4, r4, r2
 800375e:	4413      	add	r3, r2
 8003760:	68a0      	ldr	r0, [r4, #8]
 8003762:	68e2      	ldr	r2, [r4, #12]
 8003764:	60c2      	str	r2, [r0, #12]
 8003766:	6090      	str	r0, [r2, #8]
 8003768:	4a2f      	ldr	r2, [pc, #188]	; (8003828 <_free_r+0x1c8>)
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	f043 0001 	orr.w	r0, r3, #1
 8003770:	4293      	cmp	r3, r2
 8003772:	6060      	str	r0, [r4, #4]
 8003774:	608c      	str	r4, [r1, #8]
 8003776:	d3b6      	bcc.n	80036e6 <_free_r+0x86>
 8003778:	4b2c      	ldr	r3, [pc, #176]	; (800382c <_free_r+0x1cc>)
 800377a:	4640      	mov	r0, r8
 800377c:	6819      	ldr	r1, [r3, #0]
 800377e:	f7ff ff21 	bl	80035c4 <_malloc_trim_r>
 8003782:	e7b0      	b.n	80036e6 <_free_r+0x86>
 8003784:	1811      	adds	r1, r2, r0
 8003786:	6849      	ldr	r1, [r1, #4]
 8003788:	07c9      	lsls	r1, r1, #31
 800378a:	d444      	bmi.n	8003816 <_free_r+0x1b6>
 800378c:	6891      	ldr	r1, [r2, #8]
 800378e:	68d2      	ldr	r2, [r2, #12]
 8003790:	60ca      	str	r2, [r1, #12]
 8003792:	4403      	add	r3, r0
 8003794:	f043 0001 	orr.w	r0, r3, #1
 8003798:	6091      	str	r1, [r2, #8]
 800379a:	6060      	str	r0, [r4, #4]
 800379c:	50e3      	str	r3, [r4, r3]
 800379e:	e7a2      	b.n	80036e6 <_free_r+0x86>
 80037a0:	2a14      	cmp	r2, #20
 80037a2:	d817      	bhi.n	80037d4 <_free_r+0x174>
 80037a4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 80037a8:	007f      	lsls	r7, r7, #1
 80037aa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80037ae:	e7a9      	b.n	8003704 <_free_r+0xa4>
 80037b0:	10aa      	asrs	r2, r5, #2
 80037b2:	684b      	ldr	r3, [r1, #4]
 80037b4:	2501      	movs	r5, #1
 80037b6:	fa05 f202 	lsl.w	r2, r5, r2
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
 80037be:	4602      	mov	r2, r0
 80037c0:	e7b1      	b.n	8003726 <_free_r+0xc6>
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	614c      	str	r4, [r1, #20]
 80037c8:	610c      	str	r4, [r1, #16]
 80037ca:	60e5      	str	r5, [r4, #12]
 80037cc:	60a5      	str	r5, [r4, #8]
 80037ce:	6062      	str	r2, [r4, #4]
 80037d0:	50e3      	str	r3, [r4, r3]
 80037d2:	e788      	b.n	80036e6 <_free_r+0x86>
 80037d4:	2a54      	cmp	r2, #84	; 0x54
 80037d6:	d806      	bhi.n	80037e6 <_free_r+0x186>
 80037d8:	0b1a      	lsrs	r2, r3, #12
 80037da:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 80037de:	007f      	lsls	r7, r7, #1
 80037e0:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 80037e4:	e78e      	b.n	8003704 <_free_r+0xa4>
 80037e6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80037ea:	d806      	bhi.n	80037fa <_free_r+0x19a>
 80037ec:	0bda      	lsrs	r2, r3, #15
 80037ee:	f102 0778 	add.w	r7, r2, #120	; 0x78
 80037f2:	007f      	lsls	r7, r7, #1
 80037f4:	f102 0577 	add.w	r5, r2, #119	; 0x77
 80037f8:	e784      	b.n	8003704 <_free_r+0xa4>
 80037fa:	f240 5054 	movw	r0, #1364	; 0x554
 80037fe:	4282      	cmp	r2, r0
 8003800:	d806      	bhi.n	8003810 <_free_r+0x1b0>
 8003802:	0c9a      	lsrs	r2, r3, #18
 8003804:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8003808:	007f      	lsls	r7, r7, #1
 800380a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800380e:	e779      	b.n	8003704 <_free_r+0xa4>
 8003810:	27fe      	movs	r7, #254	; 0xfe
 8003812:	257e      	movs	r5, #126	; 0x7e
 8003814:	e776      	b.n	8003704 <_free_r+0xa4>
 8003816:	f043 0201 	orr.w	r2, r3, #1
 800381a:	6062      	str	r2, [r4, #4]
 800381c:	50e3      	str	r3, [r4, r3]
 800381e:	e762      	b.n	80036e6 <_free_r+0x86>
 8003820:	200004b4 	.word	0x200004b4
 8003824:	200004bc 	.word	0x200004bc
 8003828:	200008c0 	.word	0x200008c0
 800382c:	20000adc 	.word	0x20000adc

08003830 <__sfvwrite_r>:
 8003830:	6893      	ldr	r3, [r2, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d076      	beq.n	8003924 <__sfvwrite_r+0xf4>
 8003836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800383a:	898b      	ldrh	r3, [r1, #12]
 800383c:	b085      	sub	sp, #20
 800383e:	460c      	mov	r4, r1
 8003840:	0719      	lsls	r1, r3, #28
 8003842:	9001      	str	r0, [sp, #4]
 8003844:	4616      	mov	r6, r2
 8003846:	d529      	bpl.n	800389c <__sfvwrite_r+0x6c>
 8003848:	6922      	ldr	r2, [r4, #16]
 800384a:	b33a      	cbz	r2, 800389c <__sfvwrite_r+0x6c>
 800384c:	f003 0802 	and.w	r8, r3, #2
 8003850:	fa1f f088 	uxth.w	r0, r8
 8003854:	6835      	ldr	r5, [r6, #0]
 8003856:	2800      	cmp	r0, #0
 8003858:	d02f      	beq.n	80038ba <__sfvwrite_r+0x8a>
 800385a:	f04f 0900 	mov.w	r9, #0
 800385e:	4fb4      	ldr	r7, [pc, #720]	; (8003b30 <__sfvwrite_r+0x300>)
 8003860:	46c8      	mov	r8, r9
 8003862:	46b2      	mov	sl, r6
 8003864:	45b8      	cmp	r8, r7
 8003866:	4643      	mov	r3, r8
 8003868:	464a      	mov	r2, r9
 800386a:	bf28      	it	cs
 800386c:	463b      	movcs	r3, r7
 800386e:	9801      	ldr	r0, [sp, #4]
 8003870:	f1b8 0f00 	cmp.w	r8, #0
 8003874:	d050      	beq.n	8003918 <__sfvwrite_r+0xe8>
 8003876:	69e1      	ldr	r1, [r4, #28]
 8003878:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800387a:	47b0      	blx	r6
 800387c:	2800      	cmp	r0, #0
 800387e:	dd71      	ble.n	8003964 <__sfvwrite_r+0x134>
 8003880:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003884:	1a1b      	subs	r3, r3, r0
 8003886:	4481      	add	r9, r0
 8003888:	ebc0 0808 	rsb	r8, r0, r8
 800388c:	f8ca 3008 	str.w	r3, [sl, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e7      	bne.n	8003864 <__sfvwrite_r+0x34>
 8003894:	2000      	movs	r0, #0
 8003896:	b005      	add	sp, #20
 8003898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800389c:	4621      	mov	r1, r4
 800389e:	9801      	ldr	r0, [sp, #4]
 80038a0:	f7fe fc58 	bl	8002154 <__swsetup_r>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	f040 813a 	bne.w	8003b1e <__sfvwrite_r+0x2ee>
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	6835      	ldr	r5, [r6, #0]
 80038ae:	f003 0802 	and.w	r8, r3, #2
 80038b2:	fa1f f088 	uxth.w	r0, r8
 80038b6:	2800      	cmp	r0, #0
 80038b8:	d1cf      	bne.n	800385a <__sfvwrite_r+0x2a>
 80038ba:	f013 0901 	ands.w	r9, r3, #1
 80038be:	d15b      	bne.n	8003978 <__sfvwrite_r+0x148>
 80038c0:	464f      	mov	r7, r9
 80038c2:	9602      	str	r6, [sp, #8]
 80038c4:	b31f      	cbz	r7, 800390e <__sfvwrite_r+0xde>
 80038c6:	059a      	lsls	r2, r3, #22
 80038c8:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80038cc:	d52c      	bpl.n	8003928 <__sfvwrite_r+0xf8>
 80038ce:	4547      	cmp	r7, r8
 80038d0:	46c2      	mov	sl, r8
 80038d2:	f0c0 80a4 	bcc.w	8003a1e <__sfvwrite_r+0x1ee>
 80038d6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80038da:	f040 80b1 	bne.w	8003a40 <__sfvwrite_r+0x210>
 80038de:	6820      	ldr	r0, [r4, #0]
 80038e0:	4652      	mov	r2, sl
 80038e2:	4649      	mov	r1, r9
 80038e4:	f000 fdde 	bl	80044a4 <memmove>
 80038e8:	68a0      	ldr	r0, [r4, #8]
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	ebc8 0000 	rsb	r0, r8, r0
 80038f0:	4453      	add	r3, sl
 80038f2:	60a0      	str	r0, [r4, #8]
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	4638      	mov	r0, r7
 80038f8:	9a02      	ldr	r2, [sp, #8]
 80038fa:	6893      	ldr	r3, [r2, #8]
 80038fc:	1a1b      	subs	r3, r3, r0
 80038fe:	4481      	add	r9, r0
 8003900:	1a3f      	subs	r7, r7, r0
 8003902:	6093      	str	r3, [r2, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0c5      	beq.n	8003894 <__sfvwrite_r+0x64>
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	2f00      	cmp	r7, #0
 800390c:	d1db      	bne.n	80038c6 <__sfvwrite_r+0x96>
 800390e:	f8d5 9000 	ldr.w	r9, [r5]
 8003912:	686f      	ldr	r7, [r5, #4]
 8003914:	3508      	adds	r5, #8
 8003916:	e7d5      	b.n	80038c4 <__sfvwrite_r+0x94>
 8003918:	f8d5 9000 	ldr.w	r9, [r5]
 800391c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8003920:	3508      	adds	r5, #8
 8003922:	e79f      	b.n	8003864 <__sfvwrite_r+0x34>
 8003924:	2000      	movs	r0, #0
 8003926:	4770      	bx	lr
 8003928:	6820      	ldr	r0, [r4, #0]
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	4298      	cmp	r0, r3
 800392e:	d803      	bhi.n	8003938 <__sfvwrite_r+0x108>
 8003930:	6961      	ldr	r1, [r4, #20]
 8003932:	428f      	cmp	r7, r1
 8003934:	f080 80b7 	bcs.w	8003aa6 <__sfvwrite_r+0x276>
 8003938:	45b8      	cmp	r8, r7
 800393a:	bf28      	it	cs
 800393c:	46b8      	movcs	r8, r7
 800393e:	4642      	mov	r2, r8
 8003940:	4649      	mov	r1, r9
 8003942:	f000 fdaf 	bl	80044a4 <memmove>
 8003946:	68a3      	ldr	r3, [r4, #8]
 8003948:	6822      	ldr	r2, [r4, #0]
 800394a:	ebc8 0303 	rsb	r3, r8, r3
 800394e:	4442      	add	r2, r8
 8003950:	60a3      	str	r3, [r4, #8]
 8003952:	6022      	str	r2, [r4, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d149      	bne.n	80039ec <__sfvwrite_r+0x1bc>
 8003958:	4621      	mov	r1, r4
 800395a:	9801      	ldr	r0, [sp, #4]
 800395c:	f7ff fd02 	bl	8003364 <_fflush_r>
 8003960:	2800      	cmp	r0, #0
 8003962:	d043      	beq.n	80039ec <__sfvwrite_r+0x1bc>
 8003964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800396c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003970:	81a3      	strh	r3, [r4, #12]
 8003972:	b005      	add	sp, #20
 8003974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003978:	4680      	mov	r8, r0
 800397a:	9002      	str	r0, [sp, #8]
 800397c:	4682      	mov	sl, r0
 800397e:	4681      	mov	r9, r0
 8003980:	f1b9 0f00 	cmp.w	r9, #0
 8003984:	d02a      	beq.n	80039dc <__sfvwrite_r+0x1ac>
 8003986:	9b02      	ldr	r3, [sp, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d04c      	beq.n	8003a26 <__sfvwrite_r+0x1f6>
 800398c:	6820      	ldr	r0, [r4, #0]
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	6962      	ldr	r2, [r4, #20]
 8003992:	45c8      	cmp	r8, r9
 8003994:	46c3      	mov	fp, r8
 8003996:	bf28      	it	cs
 8003998:	46cb      	movcs	fp, r9
 800399a:	4298      	cmp	r0, r3
 800399c:	465f      	mov	r7, fp
 800399e:	d904      	bls.n	80039aa <__sfvwrite_r+0x17a>
 80039a0:	68a3      	ldr	r3, [r4, #8]
 80039a2:	4413      	add	r3, r2
 80039a4:	459b      	cmp	fp, r3
 80039a6:	f300 8090 	bgt.w	8003aca <__sfvwrite_r+0x29a>
 80039aa:	4593      	cmp	fp, r2
 80039ac:	db20      	blt.n	80039f0 <__sfvwrite_r+0x1c0>
 80039ae:	4613      	mov	r3, r2
 80039b0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80039b2:	69e1      	ldr	r1, [r4, #28]
 80039b4:	9801      	ldr	r0, [sp, #4]
 80039b6:	4652      	mov	r2, sl
 80039b8:	47b8      	blx	r7
 80039ba:	1e07      	subs	r7, r0, #0
 80039bc:	ddd2      	ble.n	8003964 <__sfvwrite_r+0x134>
 80039be:	ebb8 0807 	subs.w	r8, r8, r7
 80039c2:	d023      	beq.n	8003a0c <__sfvwrite_r+0x1dc>
 80039c4:	68b3      	ldr	r3, [r6, #8]
 80039c6:	1bdb      	subs	r3, r3, r7
 80039c8:	44ba      	add	sl, r7
 80039ca:	ebc7 0909 	rsb	r9, r7, r9
 80039ce:	60b3      	str	r3, [r6, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f43f af5f 	beq.w	8003894 <__sfvwrite_r+0x64>
 80039d6:	f1b9 0f00 	cmp.w	r9, #0
 80039da:	d1d4      	bne.n	8003986 <__sfvwrite_r+0x156>
 80039dc:	2300      	movs	r3, #0
 80039de:	f8d5 a000 	ldr.w	sl, [r5]
 80039e2:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80039e6:	9302      	str	r3, [sp, #8]
 80039e8:	3508      	adds	r5, #8
 80039ea:	e7c9      	b.n	8003980 <__sfvwrite_r+0x150>
 80039ec:	4640      	mov	r0, r8
 80039ee:	e783      	b.n	80038f8 <__sfvwrite_r+0xc8>
 80039f0:	465a      	mov	r2, fp
 80039f2:	4651      	mov	r1, sl
 80039f4:	f000 fd56 	bl	80044a4 <memmove>
 80039f8:	68a2      	ldr	r2, [r4, #8]
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	ebcb 0202 	rsb	r2, fp, r2
 8003a00:	445b      	add	r3, fp
 8003a02:	ebb8 0807 	subs.w	r8, r8, r7
 8003a06:	60a2      	str	r2, [r4, #8]
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	d1db      	bne.n	80039c4 <__sfvwrite_r+0x194>
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	9801      	ldr	r0, [sp, #4]
 8003a10:	f7ff fca8 	bl	8003364 <_fflush_r>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d1a5      	bne.n	8003964 <__sfvwrite_r+0x134>
 8003a18:	f8cd 8008 	str.w	r8, [sp, #8]
 8003a1c:	e7d2      	b.n	80039c4 <__sfvwrite_r+0x194>
 8003a1e:	6820      	ldr	r0, [r4, #0]
 8003a20:	46b8      	mov	r8, r7
 8003a22:	46ba      	mov	sl, r7
 8003a24:	e75c      	b.n	80038e0 <__sfvwrite_r+0xb0>
 8003a26:	464a      	mov	r2, r9
 8003a28:	210a      	movs	r1, #10
 8003a2a:	4650      	mov	r0, sl
 8003a2c:	f000 fc50 	bl	80042d0 <memchr>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d06f      	beq.n	8003b14 <__sfvwrite_r+0x2e4>
 8003a34:	3001      	adds	r0, #1
 8003a36:	2301      	movs	r3, #1
 8003a38:	ebca 0800 	rsb	r8, sl, r0
 8003a3c:	9302      	str	r3, [sp, #8]
 8003a3e:	e7a5      	b.n	800398c <__sfvwrite_r+0x15c>
 8003a40:	6962      	ldr	r2, [r4, #20]
 8003a42:	6820      	ldr	r0, [r4, #0]
 8003a44:	6921      	ldr	r1, [r4, #16]
 8003a46:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8003a4a:	ebc1 0a00 	rsb	sl, r1, r0
 8003a4e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8003a52:	f10a 0001 	add.w	r0, sl, #1
 8003a56:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003a5a:	4438      	add	r0, r7
 8003a5c:	4540      	cmp	r0, r8
 8003a5e:	4642      	mov	r2, r8
 8003a60:	bf84      	itt	hi
 8003a62:	4680      	movhi	r8, r0
 8003a64:	4642      	movhi	r2, r8
 8003a66:	055b      	lsls	r3, r3, #21
 8003a68:	d542      	bpl.n	8003af0 <__sfvwrite_r+0x2c0>
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	9801      	ldr	r0, [sp, #4]
 8003a6e:	f000 f975 	bl	8003d5c <_malloc_r>
 8003a72:	4683      	mov	fp, r0
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d055      	beq.n	8003b24 <__sfvwrite_r+0x2f4>
 8003a78:	4652      	mov	r2, sl
 8003a7a:	6921      	ldr	r1, [r4, #16]
 8003a7c:	f000 fc78 	bl	8004370 <memcpy>
 8003a80:	89a3      	ldrh	r3, [r4, #12]
 8003a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8a:	81a3      	strh	r3, [r4, #12]
 8003a8c:	ebca 0308 	rsb	r3, sl, r8
 8003a90:	eb0b 000a 	add.w	r0, fp, sl
 8003a94:	f8c4 8014 	str.w	r8, [r4, #20]
 8003a98:	f8c4 b010 	str.w	fp, [r4, #16]
 8003a9c:	6020      	str	r0, [r4, #0]
 8003a9e:	60a3      	str	r3, [r4, #8]
 8003aa0:	46b8      	mov	r8, r7
 8003aa2:	46ba      	mov	sl, r7
 8003aa4:	e71c      	b.n	80038e0 <__sfvwrite_r+0xb0>
 8003aa6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003aaa:	42bb      	cmp	r3, r7
 8003aac:	bf28      	it	cs
 8003aae:	463b      	movcs	r3, r7
 8003ab0:	464a      	mov	r2, r9
 8003ab2:	fb93 f3f1 	sdiv	r3, r3, r1
 8003ab6:	9801      	ldr	r0, [sp, #4]
 8003ab8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	69e1      	ldr	r1, [r4, #28]
 8003ac0:	47b0      	blx	r6
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	f73f af18 	bgt.w	80038f8 <__sfvwrite_r+0xc8>
 8003ac8:	e74c      	b.n	8003964 <__sfvwrite_r+0x134>
 8003aca:	461a      	mov	r2, r3
 8003acc:	4651      	mov	r1, sl
 8003ace:	9303      	str	r3, [sp, #12]
 8003ad0:	f000 fce8 	bl	80044a4 <memmove>
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	9b03      	ldr	r3, [sp, #12]
 8003ad8:	9801      	ldr	r0, [sp, #4]
 8003ada:	441a      	add	r2, r3
 8003adc:	6022      	str	r2, [r4, #0]
 8003ade:	4621      	mov	r1, r4
 8003ae0:	f7ff fc40 	bl	8003364 <_fflush_r>
 8003ae4:	9b03      	ldr	r3, [sp, #12]
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	f47f af3c 	bne.w	8003964 <__sfvwrite_r+0x134>
 8003aec:	461f      	mov	r7, r3
 8003aee:	e766      	b.n	80039be <__sfvwrite_r+0x18e>
 8003af0:	9801      	ldr	r0, [sp, #4]
 8003af2:	f001 fa17 	bl	8004f24 <_realloc_r>
 8003af6:	4683      	mov	fp, r0
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d1c7      	bne.n	8003a8c <__sfvwrite_r+0x25c>
 8003afc:	9d01      	ldr	r5, [sp, #4]
 8003afe:	6921      	ldr	r1, [r4, #16]
 8003b00:	4628      	mov	r0, r5
 8003b02:	f7ff fdad 	bl	8003660 <_free_r>
 8003b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b0a:	220c      	movs	r2, #12
 8003b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b10:	602a      	str	r2, [r5, #0]
 8003b12:	e729      	b.n	8003968 <__sfvwrite_r+0x138>
 8003b14:	2301      	movs	r3, #1
 8003b16:	f109 0801 	add.w	r8, r9, #1
 8003b1a:	9302      	str	r3, [sp, #8]
 8003b1c:	e736      	b.n	800398c <__sfvwrite_r+0x15c>
 8003b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b22:	e6b8      	b.n	8003896 <__sfvwrite_r+0x66>
 8003b24:	9a01      	ldr	r2, [sp, #4]
 8003b26:	230c      	movs	r3, #12
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b2e:	e71b      	b.n	8003968 <__sfvwrite_r+0x138>
 8003b30:	7ffffc00 	.word	0x7ffffc00

08003b34 <_fwalk>:
 8003b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b38:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8003b3c:	d01b      	beq.n	8003b76 <_fwalk+0x42>
 8003b3e:	4688      	mov	r8, r1
 8003b40:	2600      	movs	r6, #0
 8003b42:	687d      	ldr	r5, [r7, #4]
 8003b44:	68bc      	ldr	r4, [r7, #8]
 8003b46:	3d01      	subs	r5, #1
 8003b48:	d40f      	bmi.n	8003b6a <_fwalk+0x36>
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003b52:	d906      	bls.n	8003b62 <_fwalk+0x2e>
 8003b54:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	d001      	beq.n	8003b62 <_fwalk+0x2e>
 8003b5e:	47c0      	blx	r8
 8003b60:	4306      	orrs	r6, r0
 8003b62:	1c6b      	adds	r3, r5, #1
 8003b64:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003b68:	d1ef      	bne.n	8003b4a <_fwalk+0x16>
 8003b6a:	683f      	ldr	r7, [r7, #0]
 8003b6c:	2f00      	cmp	r7, #0
 8003b6e:	d1e8      	bne.n	8003b42 <_fwalk+0xe>
 8003b70:	4630      	mov	r0, r6
 8003b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b76:	463e      	mov	r6, r7
 8003b78:	4630      	mov	r0, r6
 8003b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b7e:	bf00      	nop

08003b80 <_fwalk_reent>:
 8003b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b84:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8003b88:	d01f      	beq.n	8003bca <_fwalk_reent+0x4a>
 8003b8a:	4688      	mov	r8, r1
 8003b8c:	4606      	mov	r6, r0
 8003b8e:	f04f 0900 	mov.w	r9, #0
 8003b92:	687d      	ldr	r5, [r7, #4]
 8003b94:	68bc      	ldr	r4, [r7, #8]
 8003b96:	3d01      	subs	r5, #1
 8003b98:	d411      	bmi.n	8003bbe <_fwalk_reent+0x3e>
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003ba2:	d908      	bls.n	8003bb6 <_fwalk_reent+0x36>
 8003ba4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	4621      	mov	r1, r4
 8003bac:	4630      	mov	r0, r6
 8003bae:	d002      	beq.n	8003bb6 <_fwalk_reent+0x36>
 8003bb0:	47c0      	blx	r8
 8003bb2:	ea49 0900 	orr.w	r9, r9, r0
 8003bb6:	1c6b      	adds	r3, r5, #1
 8003bb8:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003bbc:	d1ed      	bne.n	8003b9a <_fwalk_reent+0x1a>
 8003bbe:	683f      	ldr	r7, [r7, #0]
 8003bc0:	2f00      	cmp	r7, #0
 8003bc2:	d1e6      	bne.n	8003b92 <_fwalk_reent+0x12>
 8003bc4:	4648      	mov	r0, r9
 8003bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bca:	46b9      	mov	r9, r7
 8003bcc:	4648      	mov	r0, r9
 8003bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bd2:	bf00      	nop

08003bd4 <_setlocale_r>:
 8003bd4:	b1b2      	cbz	r2, 8003c04 <_setlocale_r+0x30>
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	490b      	ldr	r1, [pc, #44]	; (8003c08 <_setlocale_r+0x34>)
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4614      	mov	r4, r2
 8003bde:	f001 fbe3 	bl	80053a8 <strcmp>
 8003be2:	b908      	cbnz	r0, 8003be8 <_setlocale_r+0x14>
 8003be4:	4809      	ldr	r0, [pc, #36]	; (8003c0c <_setlocale_r+0x38>)
 8003be6:	bd10      	pop	{r4, pc}
 8003be8:	4908      	ldr	r1, [pc, #32]	; (8003c0c <_setlocale_r+0x38>)
 8003bea:	4620      	mov	r0, r4
 8003bec:	f001 fbdc 	bl	80053a8 <strcmp>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d0f7      	beq.n	8003be4 <_setlocale_r+0x10>
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4906      	ldr	r1, [pc, #24]	; (8003c10 <_setlocale_r+0x3c>)
 8003bf8:	f001 fbd6 	bl	80053a8 <strcmp>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d0f1      	beq.n	8003be4 <_setlocale_r+0x10>
 8003c00:	2000      	movs	r0, #0
 8003c02:	bd10      	pop	{r4, pc}
 8003c04:	4801      	ldr	r0, [pc, #4]	; (8003c0c <_setlocale_r+0x38>)
 8003c06:	4770      	bx	lr
 8003c08:	0801bb34 	.word	0x0801bb34
 8003c0c:	0801bad8 	.word	0x0801bad8
 8003c10:	0801bb00 	.word	0x0801bb00

08003c14 <__locale_charset>:
 8003c14:	4800      	ldr	r0, [pc, #0]	; (8003c18 <__locale_charset+0x4>)
 8003c16:	4770      	bx	lr
 8003c18:	20000438 	.word	0x20000438

08003c1c <__locale_mb_cur_max>:
 8003c1c:	4b01      	ldr	r3, [pc, #4]	; (8003c24 <__locale_mb_cur_max+0x8>)
 8003c1e:	6a18      	ldr	r0, [r3, #32]
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000438 	.word	0x20000438

08003c28 <__locale_msgcharset>:
 8003c28:	4800      	ldr	r0, [pc, #0]	; (8003c2c <__locale_msgcharset+0x4>)
 8003c2a:	4770      	bx	lr
 8003c2c:	2000045c 	.word	0x2000045c

08003c30 <__locale_cjk_lang>:
 8003c30:	2000      	movs	r0, #0
 8003c32:	4770      	bx	lr

08003c34 <_localeconv_r>:
 8003c34:	4800      	ldr	r0, [pc, #0]	; (8003c38 <_localeconv_r+0x4>)
 8003c36:	4770      	bx	lr
 8003c38:	2000047c 	.word	0x2000047c

08003c3c <setlocale>:
 8003c3c:	4b02      	ldr	r3, [pc, #8]	; (8003c48 <setlocale+0xc>)
 8003c3e:	460a      	mov	r2, r1
 8003c40:	4601      	mov	r1, r0
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	f7ff bfc6 	b.w	8003bd4 <_setlocale_r>
 8003c48:	20000008 	.word	0x20000008

08003c4c <localeconv>:
 8003c4c:	4800      	ldr	r0, [pc, #0]	; (8003c50 <localeconv+0x4>)
 8003c4e:	4770      	bx	lr
 8003c50:	2000047c 	.word	0x2000047c

08003c54 <__swhatbuf_r>:
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	460d      	mov	r5, r1
 8003c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c5c:	2900      	cmp	r1, #0
 8003c5e:	b090      	sub	sp, #64	; 0x40
 8003c60:	4614      	mov	r4, r2
 8003c62:	461e      	mov	r6, r3
 8003c64:	db14      	blt.n	8003c90 <__swhatbuf_r+0x3c>
 8003c66:	aa01      	add	r2, sp, #4
 8003c68:	f004 f8a5 	bl	8007db6 <_fstat_r>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	db0f      	blt.n	8003c90 <__swhatbuf_r+0x3c>
 8003c70:	9a02      	ldr	r2, [sp, #8]
 8003c72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c76:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8003c7a:	fab2 f282 	clz	r2, r2
 8003c7e:	0952      	lsrs	r2, r2, #5
 8003c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c84:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c88:	6032      	str	r2, [r6, #0]
 8003c8a:	6023      	str	r3, [r4, #0]
 8003c8c:	b010      	add	sp, #64	; 0x40
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	89a8      	ldrh	r0, [r5, #12]
 8003c92:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003c96:	b282      	uxth	r2, r0
 8003c98:	2000      	movs	r0, #0
 8003c9a:	6030      	str	r0, [r6, #0]
 8003c9c:	b11a      	cbz	r2, 8003ca6 <__swhatbuf_r+0x52>
 8003c9e:	2340      	movs	r3, #64	; 0x40
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	b010      	add	sp, #64	; 0x40
 8003ca4:	bd70      	pop	{r4, r5, r6, pc}
 8003ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003caa:	4610      	mov	r0, r2
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	b010      	add	sp, #64	; 0x40
 8003cb0:	bd70      	pop	{r4, r5, r6, pc}
 8003cb2:	bf00      	nop

08003cb4 <__smakebuf_r>:
 8003cb4:	898a      	ldrh	r2, [r1, #12]
 8003cb6:	0792      	lsls	r2, r2, #30
 8003cb8:	460b      	mov	r3, r1
 8003cba:	d506      	bpl.n	8003cca <__smakebuf_r+0x16>
 8003cbc:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	611a      	str	r2, [r3, #16]
 8003cc6:	6159      	str	r1, [r3, #20]
 8003cc8:	4770      	bx	lr
 8003cca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	ab01      	add	r3, sp, #4
 8003cd0:	466a      	mov	r2, sp
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	f7ff ffbd 	bl	8003c54 <__swhatbuf_r>
 8003cda:	9900      	ldr	r1, [sp, #0]
 8003cdc:	4606      	mov	r6, r0
 8003cde:	4628      	mov	r0, r5
 8003ce0:	f000 f83c 	bl	8003d5c <_malloc_r>
 8003ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ce8:	b1d0      	cbz	r0, 8003d20 <__smakebuf_r+0x6c>
 8003cea:	9a01      	ldr	r2, [sp, #4]
 8003cec:	4f12      	ldr	r7, [pc, #72]	; (8003d38 <__smakebuf_r+0x84>)
 8003cee:	9900      	ldr	r1, [sp, #0]
 8003cf0:	63ef      	str	r7, [r5, #60]	; 0x3c
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf6:	81a3      	strh	r3, [r4, #12]
 8003cf8:	6020      	str	r0, [r4, #0]
 8003cfa:	6120      	str	r0, [r4, #16]
 8003cfc:	6161      	str	r1, [r4, #20]
 8003cfe:	b91a      	cbnz	r2, 8003d08 <__smakebuf_r+0x54>
 8003d00:	4333      	orrs	r3, r6
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	b003      	add	sp, #12
 8003d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d0e:	f004 f857 	bl	8007dc0 <_isatty_r>
 8003d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d0f2      	beq.n	8003d00 <__smakebuf_r+0x4c>
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	e7ef      	b.n	8003d00 <__smakebuf_r+0x4c>
 8003d20:	059a      	lsls	r2, r3, #22
 8003d22:	d4ef      	bmi.n	8003d04 <__smakebuf_r+0x50>
 8003d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d28:	f043 0302 	orr.w	r3, r3, #2
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	81a3      	strh	r3, [r4, #12]
 8003d30:	6022      	str	r2, [r4, #0]
 8003d32:	6122      	str	r2, [r4, #16]
 8003d34:	6161      	str	r1, [r4, #20]
 8003d36:	e7e5      	b.n	8003d04 <__smakebuf_r+0x50>
 8003d38:	080033b9 	.word	0x080033b9

08003d3c <malloc>:
 8003d3c:	4b02      	ldr	r3, [pc, #8]	; (8003d48 <malloc+0xc>)
 8003d3e:	4601      	mov	r1, r0
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	f000 b80b 	b.w	8003d5c <_malloc_r>
 8003d46:	bf00      	nop
 8003d48:	20000008 	.word	0x20000008

08003d4c <free>:
 8003d4c:	4b02      	ldr	r3, [pc, #8]	; (8003d58 <free+0xc>)
 8003d4e:	4601      	mov	r1, r0
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	f7ff bc85 	b.w	8003660 <_free_r>
 8003d56:	bf00      	nop
 8003d58:	20000008 	.word	0x20000008

08003d5c <_malloc_r>:
 8003d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d60:	f101 050b 	add.w	r5, r1, #11
 8003d64:	2d16      	cmp	r5, #22
 8003d66:	b083      	sub	sp, #12
 8003d68:	4606      	mov	r6, r0
 8003d6a:	f240 809f 	bls.w	8003eac <_malloc_r+0x150>
 8003d6e:	f035 0507 	bics.w	r5, r5, #7
 8003d72:	f100 80bf 	bmi.w	8003ef4 <_malloc_r+0x198>
 8003d76:	42a9      	cmp	r1, r5
 8003d78:	f200 80bc 	bhi.w	8003ef4 <_malloc_r+0x198>
 8003d7c:	f000 fbf6 	bl	800456c <__malloc_lock>
 8003d80:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8003d84:	f0c0 8299 	bcc.w	80042ba <_malloc_r+0x55e>
 8003d88:	0a6b      	lsrs	r3, r5, #9
 8003d8a:	f000 80ba 	beq.w	8003f02 <_malloc_r+0x1a6>
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	f200 8187 	bhi.w	80040a2 <_malloc_r+0x346>
 8003d94:	09a8      	lsrs	r0, r5, #6
 8003d96:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 8003d9a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8003d9e:	3038      	adds	r0, #56	; 0x38
 8003da0:	4fc6      	ldr	r7, [pc, #792]	; (80040bc <_malloc_r+0x360>)
 8003da2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003da6:	f1a3 0108 	sub.w	r1, r3, #8
 8003daa:	685c      	ldr	r4, [r3, #4]
 8003dac:	42a1      	cmp	r1, r4
 8003dae:	d107      	bne.n	8003dc0 <_malloc_r+0x64>
 8003db0:	e0ac      	b.n	8003f0c <_malloc_r+0x1b0>
 8003db2:	2a00      	cmp	r2, #0
 8003db4:	f280 80ac 	bge.w	8003f10 <_malloc_r+0x1b4>
 8003db8:	68e4      	ldr	r4, [r4, #12]
 8003dba:	42a1      	cmp	r1, r4
 8003dbc:	f000 80a6 	beq.w	8003f0c <_malloc_r+0x1b0>
 8003dc0:	6863      	ldr	r3, [r4, #4]
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	1b5a      	subs	r2, r3, r5
 8003dc8:	2a0f      	cmp	r2, #15
 8003dca:	ddf2      	ble.n	8003db2 <_malloc_r+0x56>
 8003dcc:	49bb      	ldr	r1, [pc, #748]	; (80040bc <_malloc_r+0x360>)
 8003dce:	693c      	ldr	r4, [r7, #16]
 8003dd0:	f101 0e08 	add.w	lr, r1, #8
 8003dd4:	4574      	cmp	r4, lr
 8003dd6:	f000 81af 	beq.w	8004138 <_malloc_r+0x3dc>
 8003dda:	6863      	ldr	r3, [r4, #4]
 8003ddc:	f023 0303 	bic.w	r3, r3, #3
 8003de0:	1b5a      	subs	r2, r3, r5
 8003de2:	2a0f      	cmp	r2, #15
 8003de4:	f300 8195 	bgt.w	8004112 <_malloc_r+0x3b6>
 8003de8:	2a00      	cmp	r2, #0
 8003dea:	f8c1 e014 	str.w	lr, [r1, #20]
 8003dee:	f8c1 e010 	str.w	lr, [r1, #16]
 8003df2:	f280 809e 	bge.w	8003f32 <_malloc_r+0x1d6>
 8003df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfa:	f080 8163 	bcs.w	80040c4 <_malloc_r+0x368>
 8003dfe:	08db      	lsrs	r3, r3, #3
 8003e00:	f103 0c01 	add.w	ip, r3, #1
 8003e04:	2201      	movs	r2, #1
 8003e06:	109b      	asrs	r3, r3, #2
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	684a      	ldr	r2, [r1, #4]
 8003e0e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8003e12:	f8c4 8008 	str.w	r8, [r4, #8]
 8003e16:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	f1a9 0308 	sub.w	r3, r9, #8
 8003e20:	60e3      	str	r3, [r4, #12]
 8003e22:	604a      	str	r2, [r1, #4]
 8003e24:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8003e28:	f8c8 400c 	str.w	r4, [r8, #12]
 8003e2c:	1083      	asrs	r3, r0, #2
 8003e2e:	2401      	movs	r4, #1
 8003e30:	409c      	lsls	r4, r3
 8003e32:	4294      	cmp	r4, r2
 8003e34:	f200 808a 	bhi.w	8003f4c <_malloc_r+0x1f0>
 8003e38:	4214      	tst	r4, r2
 8003e3a:	d106      	bne.n	8003e4a <_malloc_r+0xee>
 8003e3c:	f020 0003 	bic.w	r0, r0, #3
 8003e40:	0064      	lsls	r4, r4, #1
 8003e42:	4214      	tst	r4, r2
 8003e44:	f100 0004 	add.w	r0, r0, #4
 8003e48:	d0fa      	beq.n	8003e40 <_malloc_r+0xe4>
 8003e4a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8003e4e:	46cc      	mov	ip, r9
 8003e50:	4680      	mov	r8, r0
 8003e52:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8003e56:	458c      	cmp	ip, r1
 8003e58:	d107      	bne.n	8003e6a <_malloc_r+0x10e>
 8003e5a:	e16f      	b.n	800413c <_malloc_r+0x3e0>
 8003e5c:	2a00      	cmp	r2, #0
 8003e5e:	f280 817d 	bge.w	800415c <_malloc_r+0x400>
 8003e62:	68c9      	ldr	r1, [r1, #12]
 8003e64:	458c      	cmp	ip, r1
 8003e66:	f000 8169 	beq.w	800413c <_malloc_r+0x3e0>
 8003e6a:	684b      	ldr	r3, [r1, #4]
 8003e6c:	f023 0303 	bic.w	r3, r3, #3
 8003e70:	1b5a      	subs	r2, r3, r5
 8003e72:	2a0f      	cmp	r2, #15
 8003e74:	ddf2      	ble.n	8003e5c <_malloc_r+0x100>
 8003e76:	460c      	mov	r4, r1
 8003e78:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003e7c:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8003e80:	194b      	adds	r3, r1, r5
 8003e82:	f045 0501 	orr.w	r5, r5, #1
 8003e86:	604d      	str	r5, [r1, #4]
 8003e88:	f042 0101 	orr.w	r1, r2, #1
 8003e8c:	f8c8 c00c 	str.w	ip, [r8, #12]
 8003e90:	4630      	mov	r0, r6
 8003e92:	f8cc 8008 	str.w	r8, [ip, #8]
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	f8c3 e00c 	str.w	lr, [r3, #12]
 8003e9e:	f8c3 e008 	str.w	lr, [r3, #8]
 8003ea2:	6059      	str	r1, [r3, #4]
 8003ea4:	509a      	str	r2, [r3, r2]
 8003ea6:	f000 fb63 	bl	8004570 <__malloc_unlock>
 8003eaa:	e01f      	b.n	8003eec <_malloc_r+0x190>
 8003eac:	2910      	cmp	r1, #16
 8003eae:	d821      	bhi.n	8003ef4 <_malloc_r+0x198>
 8003eb0:	f000 fb5c 	bl	800456c <__malloc_lock>
 8003eb4:	2510      	movs	r5, #16
 8003eb6:	2306      	movs	r3, #6
 8003eb8:	2002      	movs	r0, #2
 8003eba:	4f80      	ldr	r7, [pc, #512]	; (80040bc <_malloc_r+0x360>)
 8003ebc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003ec0:	f1a3 0208 	sub.w	r2, r3, #8
 8003ec4:	685c      	ldr	r4, [r3, #4]
 8003ec6:	4294      	cmp	r4, r2
 8003ec8:	f000 8141 	beq.w	800414e <_malloc_r+0x3f2>
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	68e1      	ldr	r1, [r4, #12]
 8003ed0:	68a5      	ldr	r5, [r4, #8]
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	4423      	add	r3, r4
 8003ed8:	4630      	mov	r0, r6
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	60e9      	str	r1, [r5, #12]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	608d      	str	r5, [r1, #8]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	f000 fb43 	bl	8004570 <__malloc_unlock>
 8003eea:	3408      	adds	r4, #8
 8003eec:	4620      	mov	r0, r4
 8003eee:	b003      	add	sp, #12
 8003ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef4:	2400      	movs	r4, #0
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	4620      	mov	r0, r4
 8003efa:	6033      	str	r3, [r6, #0]
 8003efc:	b003      	add	sp, #12
 8003efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8003f08:	203f      	movs	r0, #63	; 0x3f
 8003f0a:	e749      	b.n	8003da0 <_malloc_r+0x44>
 8003f0c:	4670      	mov	r0, lr
 8003f0e:	e75d      	b.n	8003dcc <_malloc_r+0x70>
 8003f10:	4423      	add	r3, r4
 8003f12:	68e1      	ldr	r1, [r4, #12]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	68a5      	ldr	r5, [r4, #8]
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	60e9      	str	r1, [r5, #12]
 8003f1e:	4630      	mov	r0, r6
 8003f20:	608d      	str	r5, [r1, #8]
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	f000 fb24 	bl	8004570 <__malloc_unlock>
 8003f28:	3408      	adds	r4, #8
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	b003      	add	sp, #12
 8003f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f32:	4423      	add	r3, r4
 8003f34:	4630      	mov	r0, r6
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	f000 fb17 	bl	8004570 <__malloc_unlock>
 8003f42:	3408      	adds	r4, #8
 8003f44:	4620      	mov	r0, r4
 8003f46:	b003      	add	sp, #12
 8003f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f4c:	68bc      	ldr	r4, [r7, #8]
 8003f4e:	6863      	ldr	r3, [r4, #4]
 8003f50:	f023 0803 	bic.w	r8, r3, #3
 8003f54:	45a8      	cmp	r8, r5
 8003f56:	d304      	bcc.n	8003f62 <_malloc_r+0x206>
 8003f58:	ebc5 0308 	rsb	r3, r5, r8
 8003f5c:	2b0f      	cmp	r3, #15
 8003f5e:	f300 8090 	bgt.w	8004082 <_malloc_r+0x326>
 8003f62:	f8df 915c 	ldr.w	r9, [pc, #348]	; 80040c0 <_malloc_r+0x364>
 8003f66:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003f6a:	f8d9 2000 	ldr.w	r2, [r9]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	eb04 0a08 	add.w	sl, r4, r8
 8003f74:	442a      	add	r2, r5
 8003f76:	f000 815c 	beq.w	8004232 <_malloc_r+0x4d6>
 8003f7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f7e:	320f      	adds	r2, #15
 8003f80:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003f84:	f022 020f 	bic.w	r2, r2, #15
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	9201      	str	r2, [sp, #4]
 8003f8e:	f003 fef5 	bl	8007d7c <_sbrk_r>
 8003f92:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003f96:	4683      	mov	fp, r0
 8003f98:	9a01      	ldr	r2, [sp, #4]
 8003f9a:	f000 8154 	beq.w	8004246 <_malloc_r+0x4ea>
 8003f9e:	4582      	cmp	sl, r0
 8003fa0:	f200 80f8 	bhi.w	8004194 <_malloc_r+0x438>
 8003fa4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003fa8:	45da      	cmp	sl, fp
 8003faa:	4411      	add	r1, r2
 8003fac:	f8c9 1004 	str.w	r1, [r9, #4]
 8003fb0:	f000 814e 	beq.w	8004250 <_malloc_r+0x4f4>
 8003fb4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003fb8:	4840      	ldr	r0, [pc, #256]	; (80040bc <_malloc_r+0x360>)
 8003fba:	3301      	adds	r3, #1
 8003fbc:	bf1b      	ittet	ne
 8003fbe:	ebca 0a0b 	rsbne	sl, sl, fp
 8003fc2:	4451      	addne	r1, sl
 8003fc4:	f8c0 b408 	streq.w	fp, [r0, #1032]	; 0x408
 8003fc8:	f8c9 1004 	strne.w	r1, [r9, #4]
 8003fcc:	f01b 0107 	ands.w	r1, fp, #7
 8003fd0:	f000 8112 	beq.w	80041f8 <_malloc_r+0x49c>
 8003fd4:	f1c1 0308 	rsb	r3, r1, #8
 8003fd8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8003fdc:	449b      	add	fp, r3
 8003fde:	3108      	adds	r1, #8
 8003fe0:	eb0b 0302 	add.w	r3, fp, r2
 8003fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe8:	ebc3 0a01 	rsb	sl, r3, r1
 8003fec:	4651      	mov	r1, sl
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f003 fec4 	bl	8007d7c <_sbrk_r>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	f000 813c 	beq.w	8004272 <_malloc_r+0x516>
 8003ffa:	ebcb 0300 	rsb	r3, fp, r0
 8003ffe:	4453      	add	r3, sl
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004008:	f8c7 b008 	str.w	fp, [r7, #8]
 800400c:	4451      	add	r1, sl
 800400e:	42bc      	cmp	r4, r7
 8004010:	f8cb 3004 	str.w	r3, [fp, #4]
 8004014:	f8c9 1004 	str.w	r1, [r9, #4]
 8004018:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 80040c0 <_malloc_r+0x364>
 800401c:	d016      	beq.n	800404c <_malloc_r+0x2f0>
 800401e:	f1b8 0f0f 	cmp.w	r8, #15
 8004022:	f240 80f7 	bls.w	8004214 <_malloc_r+0x4b8>
 8004026:	6862      	ldr	r2, [r4, #4]
 8004028:	f1a8 030c 	sub.w	r3, r8, #12
 800402c:	f023 0307 	bic.w	r3, r3, #7
 8004030:	18e0      	adds	r0, r4, r3
 8004032:	f002 0201 	and.w	r2, r2, #1
 8004036:	f04f 0e05 	mov.w	lr, #5
 800403a:	431a      	orrs	r2, r3
 800403c:	2b0f      	cmp	r3, #15
 800403e:	6062      	str	r2, [r4, #4]
 8004040:	f8c0 e004 	str.w	lr, [r0, #4]
 8004044:	f8c0 e008 	str.w	lr, [r0, #8]
 8004048:	f200 8117 	bhi.w	800427a <_malloc_r+0x51e>
 800404c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8004050:	4a1b      	ldr	r2, [pc, #108]	; (80040c0 <_malloc_r+0x364>)
 8004052:	68bc      	ldr	r4, [r7, #8]
 8004054:	4299      	cmp	r1, r3
 8004056:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800405a:	bf88      	it	hi
 800405c:	62d1      	strhi	r1, [r2, #44]	; 0x2c
 800405e:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <_malloc_r+0x364>)
 8004060:	4299      	cmp	r1, r3
 8004062:	bf88      	it	hi
 8004064:	6311      	strhi	r1, [r2, #48]	; 0x30
 8004066:	6862      	ldr	r2, [r4, #4]
 8004068:	f022 0203 	bic.w	r2, r2, #3
 800406c:	4295      	cmp	r5, r2
 800406e:	eba2 0305 	sub.w	r3, r2, r5
 8004072:	d801      	bhi.n	8004078 <_malloc_r+0x31c>
 8004074:	2b0f      	cmp	r3, #15
 8004076:	dc04      	bgt.n	8004082 <_malloc_r+0x326>
 8004078:	4630      	mov	r0, r6
 800407a:	f000 fa79 	bl	8004570 <__malloc_unlock>
 800407e:	2400      	movs	r4, #0
 8004080:	e734      	b.n	8003eec <_malloc_r+0x190>
 8004082:	1962      	adds	r2, r4, r5
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	f045 0501 	orr.w	r5, r5, #1
 800408c:	6065      	str	r5, [r4, #4]
 800408e:	4630      	mov	r0, r6
 8004090:	60ba      	str	r2, [r7, #8]
 8004092:	6053      	str	r3, [r2, #4]
 8004094:	f000 fa6c 	bl	8004570 <__malloc_unlock>
 8004098:	3408      	adds	r4, #8
 800409a:	4620      	mov	r0, r4
 800409c:	b003      	add	sp, #12
 800409e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a2:	2b14      	cmp	r3, #20
 80040a4:	d969      	bls.n	800417a <_malloc_r+0x41e>
 80040a6:	2b54      	cmp	r3, #84	; 0x54
 80040a8:	f200 809c 	bhi.w	80041e4 <_malloc_r+0x488>
 80040ac:	0b28      	lsrs	r0, r5, #12
 80040ae:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 80040b2:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80040b6:	306e      	adds	r0, #110	; 0x6e
 80040b8:	e672      	b.n	8003da0 <_malloc_r+0x44>
 80040ba:	bf00      	nop
 80040bc:	200004b4 	.word	0x200004b4
 80040c0:	20000adc 	.word	0x20000adc
 80040c4:	0a5a      	lsrs	r2, r3, #9
 80040c6:	2a04      	cmp	r2, #4
 80040c8:	d95e      	bls.n	8004188 <_malloc_r+0x42c>
 80040ca:	2a14      	cmp	r2, #20
 80040cc:	f200 80b3 	bhi.w	8004236 <_malloc_r+0x4da>
 80040d0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 80040d4:	0049      	lsls	r1, r1, #1
 80040d6:	325b      	adds	r2, #91	; 0x5b
 80040d8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 80040dc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80040e0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80042c4 <_malloc_r+0x568>
 80040e4:	f1ac 0c08 	sub.w	ip, ip, #8
 80040e8:	458c      	cmp	ip, r1
 80040ea:	f000 8088 	beq.w	80041fe <_malloc_r+0x4a2>
 80040ee:	684a      	ldr	r2, [r1, #4]
 80040f0:	f022 0203 	bic.w	r2, r2, #3
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d202      	bcs.n	80040fe <_malloc_r+0x3a2>
 80040f8:	6889      	ldr	r1, [r1, #8]
 80040fa:	458c      	cmp	ip, r1
 80040fc:	d1f7      	bne.n	80040ee <_malloc_r+0x392>
 80040fe:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	f8c4 c00c 	str.w	ip, [r4, #12]
 8004108:	60a1      	str	r1, [r4, #8]
 800410a:	f8cc 4008 	str.w	r4, [ip, #8]
 800410e:	60cc      	str	r4, [r1, #12]
 8004110:	e68c      	b.n	8003e2c <_malloc_r+0xd0>
 8004112:	1963      	adds	r3, r4, r5
 8004114:	f042 0701 	orr.w	r7, r2, #1
 8004118:	f045 0501 	orr.w	r5, r5, #1
 800411c:	6065      	str	r5, [r4, #4]
 800411e:	4630      	mov	r0, r6
 8004120:	614b      	str	r3, [r1, #20]
 8004122:	610b      	str	r3, [r1, #16]
 8004124:	f8c3 e00c 	str.w	lr, [r3, #12]
 8004128:	f8c3 e008 	str.w	lr, [r3, #8]
 800412c:	605f      	str	r7, [r3, #4]
 800412e:	509a      	str	r2, [r3, r2]
 8004130:	3408      	adds	r4, #8
 8004132:	f000 fa1d 	bl	8004570 <__malloc_unlock>
 8004136:	e6d9      	b.n	8003eec <_malloc_r+0x190>
 8004138:	684a      	ldr	r2, [r1, #4]
 800413a:	e677      	b.n	8003e2c <_malloc_r+0xd0>
 800413c:	f108 0801 	add.w	r8, r8, #1
 8004140:	f018 0f03 	tst.w	r8, #3
 8004144:	f10c 0c08 	add.w	ip, ip, #8
 8004148:	f47f ae83 	bne.w	8003e52 <_malloc_r+0xf6>
 800414c:	e030      	b.n	80041b0 <_malloc_r+0x454>
 800414e:	68dc      	ldr	r4, [r3, #12]
 8004150:	42a3      	cmp	r3, r4
 8004152:	bf08      	it	eq
 8004154:	3002      	addeq	r0, #2
 8004156:	f43f ae39 	beq.w	8003dcc <_malloc_r+0x70>
 800415a:	e6b7      	b.n	8003ecc <_malloc_r+0x170>
 800415c:	440b      	add	r3, r1
 800415e:	460c      	mov	r4, r1
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	68c9      	ldr	r1, [r1, #12]
 8004164:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8004168:	f042 0201 	orr.w	r2, r2, #1
 800416c:	605a      	str	r2, [r3, #4]
 800416e:	4630      	mov	r0, r6
 8004170:	60e9      	str	r1, [r5, #12]
 8004172:	608d      	str	r5, [r1, #8]
 8004174:	f000 f9fc 	bl	8004570 <__malloc_unlock>
 8004178:	e6b8      	b.n	8003eec <_malloc_r+0x190>
 800417a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 800417e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 8004182:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004186:	e60b      	b.n	8003da0 <_malloc_r+0x44>
 8004188:	099a      	lsrs	r2, r3, #6
 800418a:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800418e:	0049      	lsls	r1, r1, #1
 8004190:	3238      	adds	r2, #56	; 0x38
 8004192:	e7a1      	b.n	80040d8 <_malloc_r+0x37c>
 8004194:	42bc      	cmp	r4, r7
 8004196:	4b4b      	ldr	r3, [pc, #300]	; (80042c4 <_malloc_r+0x568>)
 8004198:	f43f af04 	beq.w	8003fa4 <_malloc_r+0x248>
 800419c:	689c      	ldr	r4, [r3, #8]
 800419e:	6862      	ldr	r2, [r4, #4]
 80041a0:	f022 0203 	bic.w	r2, r2, #3
 80041a4:	e762      	b.n	800406c <_malloc_r+0x310>
 80041a6:	f859 3908 	ldr.w	r3, [r9], #-8
 80041aa:	4599      	cmp	r9, r3
 80041ac:	f040 8083 	bne.w	80042b6 <_malloc_r+0x55a>
 80041b0:	f010 0f03 	tst.w	r0, #3
 80041b4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80041b8:	d1f5      	bne.n	80041a6 <_malloc_r+0x44a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	ea23 0304 	bic.w	r3, r3, r4
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	0064      	lsls	r4, r4, #1
 80041c4:	429c      	cmp	r4, r3
 80041c6:	f63f aec1 	bhi.w	8003f4c <_malloc_r+0x1f0>
 80041ca:	2c00      	cmp	r4, #0
 80041cc:	f43f aebe 	beq.w	8003f4c <_malloc_r+0x1f0>
 80041d0:	421c      	tst	r4, r3
 80041d2:	4640      	mov	r0, r8
 80041d4:	f47f ae39 	bne.w	8003e4a <_malloc_r+0xee>
 80041d8:	0064      	lsls	r4, r4, #1
 80041da:	421c      	tst	r4, r3
 80041dc:	f100 0004 	add.w	r0, r0, #4
 80041e0:	d0fa      	beq.n	80041d8 <_malloc_r+0x47c>
 80041e2:	e632      	b.n	8003e4a <_malloc_r+0xee>
 80041e4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80041e8:	d818      	bhi.n	800421c <_malloc_r+0x4c0>
 80041ea:	0be8      	lsrs	r0, r5, #15
 80041ec:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 80041f0:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80041f4:	3077      	adds	r0, #119	; 0x77
 80041f6:	e5d3      	b.n	8003da0 <_malloc_r+0x44>
 80041f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041fc:	e6f0      	b.n	8003fe0 <_malloc_r+0x284>
 80041fe:	2101      	movs	r1, #1
 8004200:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004204:	1092      	asrs	r2, r2, #2
 8004206:	fa01 f202 	lsl.w	r2, r1, r2
 800420a:	431a      	orrs	r2, r3
 800420c:	f8c8 2004 	str.w	r2, [r8, #4]
 8004210:	4661      	mov	r1, ip
 8004212:	e777      	b.n	8004104 <_malloc_r+0x3a8>
 8004214:	2301      	movs	r3, #1
 8004216:	f8cb 3004 	str.w	r3, [fp, #4]
 800421a:	e72d      	b.n	8004078 <_malloc_r+0x31c>
 800421c:	f240 5254 	movw	r2, #1364	; 0x554
 8004220:	4293      	cmp	r3, r2
 8004222:	d821      	bhi.n	8004268 <_malloc_r+0x50c>
 8004224:	0ca8      	lsrs	r0, r5, #18
 8004226:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 800422a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800422e:	307c      	adds	r0, #124	; 0x7c
 8004230:	e5b6      	b.n	8003da0 <_malloc_r+0x44>
 8004232:	3210      	adds	r2, #16
 8004234:	e6a8      	b.n	8003f88 <_malloc_r+0x22c>
 8004236:	2a54      	cmp	r2, #84	; 0x54
 8004238:	d827      	bhi.n	800428a <_malloc_r+0x52e>
 800423a:	0b1a      	lsrs	r2, r3, #12
 800423c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8004240:	0049      	lsls	r1, r1, #1
 8004242:	326e      	adds	r2, #110	; 0x6e
 8004244:	e748      	b.n	80040d8 <_malloc_r+0x37c>
 8004246:	68bc      	ldr	r4, [r7, #8]
 8004248:	6862      	ldr	r2, [r4, #4]
 800424a:	f022 0203 	bic.w	r2, r2, #3
 800424e:	e70d      	b.n	800406c <_malloc_r+0x310>
 8004250:	f3ca 030b 	ubfx	r3, sl, #0, #12
 8004254:	2b00      	cmp	r3, #0
 8004256:	f47f aead 	bne.w	8003fb4 <_malloc_r+0x258>
 800425a:	eb08 0302 	add.w	r3, r8, r2
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6053      	str	r3, [r2, #4]
 8004266:	e6f1      	b.n	800404c <_malloc_r+0x2f0>
 8004268:	23fe      	movs	r3, #254	; 0xfe
 800426a:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 800426e:	207e      	movs	r0, #126	; 0x7e
 8004270:	e596      	b.n	8003da0 <_malloc_r+0x44>
 8004272:	2301      	movs	r3, #1
 8004274:	f04f 0a00 	mov.w	sl, #0
 8004278:	e6c4      	b.n	8004004 <_malloc_r+0x2a8>
 800427a:	f104 0108 	add.w	r1, r4, #8
 800427e:	4630      	mov	r0, r6
 8004280:	f7ff f9ee 	bl	8003660 <_free_r>
 8004284:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004288:	e6e0      	b.n	800404c <_malloc_r+0x2f0>
 800428a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800428e:	d805      	bhi.n	800429c <_malloc_r+0x540>
 8004290:	0bda      	lsrs	r2, r3, #15
 8004292:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8004296:	0049      	lsls	r1, r1, #1
 8004298:	3277      	adds	r2, #119	; 0x77
 800429a:	e71d      	b.n	80040d8 <_malloc_r+0x37c>
 800429c:	f240 5154 	movw	r1, #1364	; 0x554
 80042a0:	428a      	cmp	r2, r1
 80042a2:	d805      	bhi.n	80042b0 <_malloc_r+0x554>
 80042a4:	0c9a      	lsrs	r2, r3, #18
 80042a6:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 80042aa:	0049      	lsls	r1, r1, #1
 80042ac:	327c      	adds	r2, #124	; 0x7c
 80042ae:	e713      	b.n	80040d8 <_malloc_r+0x37c>
 80042b0:	21fe      	movs	r1, #254	; 0xfe
 80042b2:	227e      	movs	r2, #126	; 0x7e
 80042b4:	e710      	b.n	80040d8 <_malloc_r+0x37c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	e783      	b.n	80041c2 <_malloc_r+0x466>
 80042ba:	08e8      	lsrs	r0, r5, #3
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	e5fb      	b.n	8003eba <_malloc_r+0x15e>
 80042c2:	bf00      	nop
 80042c4:	200004b4 	.word	0x200004b4
	...

080042d0 <memchr>:
 80042d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80042d4:	2a10      	cmp	r2, #16
 80042d6:	db2b      	blt.n	8004330 <memchr+0x60>
 80042d8:	f010 0f07 	tst.w	r0, #7
 80042dc:	d008      	beq.n	80042f0 <memchr+0x20>
 80042de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80042e2:	3a01      	subs	r2, #1
 80042e4:	428b      	cmp	r3, r1
 80042e6:	d02d      	beq.n	8004344 <memchr+0x74>
 80042e8:	f010 0f07 	tst.w	r0, #7
 80042ec:	b342      	cbz	r2, 8004340 <memchr+0x70>
 80042ee:	d1f6      	bne.n	80042de <memchr+0xe>
 80042f0:	b4f0      	push	{r4, r5, r6, r7}
 80042f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80042f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80042fa:	f022 0407 	bic.w	r4, r2, #7
 80042fe:	f07f 0700 	mvns.w	r7, #0
 8004302:	2300      	movs	r3, #0
 8004304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004308:	3c08      	subs	r4, #8
 800430a:	ea85 0501 	eor.w	r5, r5, r1
 800430e:	ea86 0601 	eor.w	r6, r6, r1
 8004312:	fa85 f547 	uadd8	r5, r5, r7
 8004316:	faa3 f587 	sel	r5, r3, r7
 800431a:	fa86 f647 	uadd8	r6, r6, r7
 800431e:	faa5 f687 	sel	r6, r5, r7
 8004322:	b98e      	cbnz	r6, 8004348 <memchr+0x78>
 8004324:	d1ee      	bne.n	8004304 <memchr+0x34>
 8004326:	bcf0      	pop	{r4, r5, r6, r7}
 8004328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800432c:	f002 0207 	and.w	r2, r2, #7
 8004330:	b132      	cbz	r2, 8004340 <memchr+0x70>
 8004332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004336:	3a01      	subs	r2, #1
 8004338:	ea83 0301 	eor.w	r3, r3, r1
 800433c:	b113      	cbz	r3, 8004344 <memchr+0x74>
 800433e:	d1f8      	bne.n	8004332 <memchr+0x62>
 8004340:	2000      	movs	r0, #0
 8004342:	4770      	bx	lr
 8004344:	3801      	subs	r0, #1
 8004346:	4770      	bx	lr
 8004348:	2d00      	cmp	r5, #0
 800434a:	bf06      	itte	eq
 800434c:	4635      	moveq	r5, r6
 800434e:	3803      	subeq	r0, #3
 8004350:	3807      	subne	r0, #7
 8004352:	f015 0f01 	tst.w	r5, #1
 8004356:	d107      	bne.n	8004368 <memchr+0x98>
 8004358:	3001      	adds	r0, #1
 800435a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800435e:	bf02      	ittt	eq
 8004360:	3001      	addeq	r0, #1
 8004362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004366:	3001      	addeq	r0, #1
 8004368:	bcf0      	pop	{r4, r5, r6, r7}
 800436a:	3801      	subs	r0, #1
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop

08004370 <memcpy>:
 8004370:	4684      	mov	ip, r0
 8004372:	ea41 0300 	orr.w	r3, r1, r0
 8004376:	f013 0303 	ands.w	r3, r3, #3
 800437a:	d16d      	bne.n	8004458 <memcpy+0xe8>
 800437c:	3a40      	subs	r2, #64	; 0x40
 800437e:	d341      	bcc.n	8004404 <memcpy+0x94>
 8004380:	f851 3b04 	ldr.w	r3, [r1], #4
 8004384:	f840 3b04 	str.w	r3, [r0], #4
 8004388:	f851 3b04 	ldr.w	r3, [r1], #4
 800438c:	f840 3b04 	str.w	r3, [r0], #4
 8004390:	f851 3b04 	ldr.w	r3, [r1], #4
 8004394:	f840 3b04 	str.w	r3, [r0], #4
 8004398:	f851 3b04 	ldr.w	r3, [r1], #4
 800439c:	f840 3b04 	str.w	r3, [r0], #4
 80043a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80043a4:	f840 3b04 	str.w	r3, [r0], #4
 80043a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80043ac:	f840 3b04 	str.w	r3, [r0], #4
 80043b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80043b4:	f840 3b04 	str.w	r3, [r0], #4
 80043b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80043bc:	f840 3b04 	str.w	r3, [r0], #4
 80043c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80043c4:	f840 3b04 	str.w	r3, [r0], #4
 80043c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80043cc:	f840 3b04 	str.w	r3, [r0], #4
 80043d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80043d4:	f840 3b04 	str.w	r3, [r0], #4
 80043d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80043dc:	f840 3b04 	str.w	r3, [r0], #4
 80043e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80043e4:	f840 3b04 	str.w	r3, [r0], #4
 80043e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80043ec:	f840 3b04 	str.w	r3, [r0], #4
 80043f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80043f4:	f840 3b04 	str.w	r3, [r0], #4
 80043f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80043fc:	f840 3b04 	str.w	r3, [r0], #4
 8004400:	3a40      	subs	r2, #64	; 0x40
 8004402:	d2bd      	bcs.n	8004380 <memcpy+0x10>
 8004404:	3230      	adds	r2, #48	; 0x30
 8004406:	d311      	bcc.n	800442c <memcpy+0xbc>
 8004408:	f851 3b04 	ldr.w	r3, [r1], #4
 800440c:	f840 3b04 	str.w	r3, [r0], #4
 8004410:	f851 3b04 	ldr.w	r3, [r1], #4
 8004414:	f840 3b04 	str.w	r3, [r0], #4
 8004418:	f851 3b04 	ldr.w	r3, [r1], #4
 800441c:	f840 3b04 	str.w	r3, [r0], #4
 8004420:	f851 3b04 	ldr.w	r3, [r1], #4
 8004424:	f840 3b04 	str.w	r3, [r0], #4
 8004428:	3a10      	subs	r2, #16
 800442a:	d2ed      	bcs.n	8004408 <memcpy+0x98>
 800442c:	320c      	adds	r2, #12
 800442e:	d305      	bcc.n	800443c <memcpy+0xcc>
 8004430:	f851 3b04 	ldr.w	r3, [r1], #4
 8004434:	f840 3b04 	str.w	r3, [r0], #4
 8004438:	3a04      	subs	r2, #4
 800443a:	d2f9      	bcs.n	8004430 <memcpy+0xc0>
 800443c:	3204      	adds	r2, #4
 800443e:	d008      	beq.n	8004452 <memcpy+0xe2>
 8004440:	07d2      	lsls	r2, r2, #31
 8004442:	bf1c      	itt	ne
 8004444:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004448:	f800 3b01 	strbne.w	r3, [r0], #1
 800444c:	d301      	bcc.n	8004452 <memcpy+0xe2>
 800444e:	880b      	ldrh	r3, [r1, #0]
 8004450:	8003      	strh	r3, [r0, #0]
 8004452:	4660      	mov	r0, ip
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	2a08      	cmp	r2, #8
 800445a:	d313      	bcc.n	8004484 <memcpy+0x114>
 800445c:	078b      	lsls	r3, r1, #30
 800445e:	d08d      	beq.n	800437c <memcpy+0xc>
 8004460:	f010 0303 	ands.w	r3, r0, #3
 8004464:	d08a      	beq.n	800437c <memcpy+0xc>
 8004466:	f1c3 0304 	rsb	r3, r3, #4
 800446a:	1ad2      	subs	r2, r2, r3
 800446c:	07db      	lsls	r3, r3, #31
 800446e:	bf1c      	itt	ne
 8004470:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004474:	f800 3b01 	strbne.w	r3, [r0], #1
 8004478:	d380      	bcc.n	800437c <memcpy+0xc>
 800447a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800447e:	f820 3b02 	strh.w	r3, [r0], #2
 8004482:	e77b      	b.n	800437c <memcpy+0xc>
 8004484:	3a04      	subs	r2, #4
 8004486:	d3d9      	bcc.n	800443c <memcpy+0xcc>
 8004488:	3a01      	subs	r2, #1
 800448a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800448e:	f800 3b01 	strb.w	r3, [r0], #1
 8004492:	d2f9      	bcs.n	8004488 <memcpy+0x118>
 8004494:	780b      	ldrb	r3, [r1, #0]
 8004496:	7003      	strb	r3, [r0, #0]
 8004498:	784b      	ldrb	r3, [r1, #1]
 800449a:	7043      	strb	r3, [r0, #1]
 800449c:	788b      	ldrb	r3, [r1, #2]
 800449e:	7083      	strb	r3, [r0, #2]
 80044a0:	4660      	mov	r0, ip
 80044a2:	4770      	bx	lr

080044a4 <memmove>:
 80044a4:	4288      	cmp	r0, r1
 80044a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a8:	d90d      	bls.n	80044c6 <memmove+0x22>
 80044aa:	188b      	adds	r3, r1, r2
 80044ac:	4298      	cmp	r0, r3
 80044ae:	d20a      	bcs.n	80044c6 <memmove+0x22>
 80044b0:	1881      	adds	r1, r0, r2
 80044b2:	2a00      	cmp	r2, #0
 80044b4:	d051      	beq.n	800455a <memmove+0xb6>
 80044b6:	1a9a      	subs	r2, r3, r2
 80044b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d1f9      	bne.n	80044b8 <memmove+0x14>
 80044c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c6:	2a0f      	cmp	r2, #15
 80044c8:	d948      	bls.n	800455c <memmove+0xb8>
 80044ca:	ea41 0300 	orr.w	r3, r1, r0
 80044ce:	079b      	lsls	r3, r3, #30
 80044d0:	d146      	bne.n	8004560 <memmove+0xbc>
 80044d2:	f100 0410 	add.w	r4, r0, #16
 80044d6:	f101 0310 	add.w	r3, r1, #16
 80044da:	4615      	mov	r5, r2
 80044dc:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80044e0:	f844 6c10 	str.w	r6, [r4, #-16]
 80044e4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80044e8:	f844 6c0c 	str.w	r6, [r4, #-12]
 80044ec:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80044f0:	f844 6c08 	str.w	r6, [r4, #-8]
 80044f4:	3d10      	subs	r5, #16
 80044f6:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80044fa:	f844 6c04 	str.w	r6, [r4, #-4]
 80044fe:	2d0f      	cmp	r5, #15
 8004500:	f103 0310 	add.w	r3, r3, #16
 8004504:	f104 0410 	add.w	r4, r4, #16
 8004508:	d8e8      	bhi.n	80044dc <memmove+0x38>
 800450a:	f1a2 0310 	sub.w	r3, r2, #16
 800450e:	f023 030f 	bic.w	r3, r3, #15
 8004512:	f002 0e0f 	and.w	lr, r2, #15
 8004516:	3310      	adds	r3, #16
 8004518:	f1be 0f03 	cmp.w	lr, #3
 800451c:	4419      	add	r1, r3
 800451e:	4403      	add	r3, r0
 8004520:	d921      	bls.n	8004566 <memmove+0xc2>
 8004522:	1f1e      	subs	r6, r3, #4
 8004524:	460d      	mov	r5, r1
 8004526:	4674      	mov	r4, lr
 8004528:	3c04      	subs	r4, #4
 800452a:	f855 7b04 	ldr.w	r7, [r5], #4
 800452e:	f846 7f04 	str.w	r7, [r6, #4]!
 8004532:	2c03      	cmp	r4, #3
 8004534:	d8f8      	bhi.n	8004528 <memmove+0x84>
 8004536:	f1ae 0404 	sub.w	r4, lr, #4
 800453a:	f024 0403 	bic.w	r4, r4, #3
 800453e:	3404      	adds	r4, #4
 8004540:	4423      	add	r3, r4
 8004542:	4421      	add	r1, r4
 8004544:	f002 0203 	and.w	r2, r2, #3
 8004548:	b162      	cbz	r2, 8004564 <memmove+0xc0>
 800454a:	3b01      	subs	r3, #1
 800454c:	440a      	add	r2, r1
 800454e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004556:	428a      	cmp	r2, r1
 8004558:	d1f9      	bne.n	800454e <memmove+0xaa>
 800455a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455c:	4603      	mov	r3, r0
 800455e:	e7f3      	b.n	8004548 <memmove+0xa4>
 8004560:	4603      	mov	r3, r0
 8004562:	e7f2      	b.n	800454a <memmove+0xa6>
 8004564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004566:	4672      	mov	r2, lr
 8004568:	e7ee      	b.n	8004548 <memmove+0xa4>
 800456a:	bf00      	nop

0800456c <__malloc_lock>:
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop

08004570 <__malloc_unlock>:
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop

08004574 <_Balloc>:
 8004574:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004576:	b570      	push	{r4, r5, r6, lr}
 8004578:	4605      	mov	r5, r0
 800457a:	460c      	mov	r4, r1
 800457c:	b14b      	cbz	r3, 8004592 <_Balloc+0x1e>
 800457e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004582:	b180      	cbz	r0, 80045a6 <_Balloc+0x32>
 8004584:	6802      	ldr	r2, [r0, #0]
 8004586:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800458a:	2300      	movs	r3, #0
 800458c:	6103      	str	r3, [r0, #16]
 800458e:	60c3      	str	r3, [r0, #12]
 8004590:	bd70      	pop	{r4, r5, r6, pc}
 8004592:	2221      	movs	r2, #33	; 0x21
 8004594:	2104      	movs	r1, #4
 8004596:	f002 f855 	bl	8006644 <_calloc_r>
 800459a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800459c:	4603      	mov	r3, r0
 800459e:	2800      	cmp	r0, #0
 80045a0:	d1ed      	bne.n	800457e <_Balloc+0xa>
 80045a2:	2000      	movs	r0, #0
 80045a4:	bd70      	pop	{r4, r5, r6, pc}
 80045a6:	2101      	movs	r1, #1
 80045a8:	fa01 f604 	lsl.w	r6, r1, r4
 80045ac:	1d72      	adds	r2, r6, #5
 80045ae:	4628      	mov	r0, r5
 80045b0:	0092      	lsls	r2, r2, #2
 80045b2:	f002 f847 	bl	8006644 <_calloc_r>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d0f3      	beq.n	80045a2 <_Balloc+0x2e>
 80045ba:	6044      	str	r4, [r0, #4]
 80045bc:	6086      	str	r6, [r0, #8]
 80045be:	e7e4      	b.n	800458a <_Balloc+0x16>

080045c0 <_Bfree>:
 80045c0:	b131      	cbz	r1, 80045d0 <_Bfree+0x10>
 80045c2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80045c4:	684a      	ldr	r2, [r1, #4]
 80045c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80045ca:	6008      	str	r0, [r1, #0]
 80045cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop

080045d4 <__multadd>:
 80045d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d6:	690c      	ldr	r4, [r1, #16]
 80045d8:	b083      	sub	sp, #12
 80045da:	460d      	mov	r5, r1
 80045dc:	4606      	mov	r6, r0
 80045de:	f101 0e14 	add.w	lr, r1, #20
 80045e2:	2700      	movs	r7, #0
 80045e4:	f8de 0000 	ldr.w	r0, [lr]
 80045e8:	b281      	uxth	r1, r0
 80045ea:	fb02 3101 	mla	r1, r2, r1, r3
 80045ee:	0c0b      	lsrs	r3, r1, #16
 80045f0:	0c00      	lsrs	r0, r0, #16
 80045f2:	fb02 3300 	mla	r3, r2, r0, r3
 80045f6:	b289      	uxth	r1, r1
 80045f8:	3701      	adds	r7, #1
 80045fa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80045fe:	42bc      	cmp	r4, r7
 8004600:	f84e 1b04 	str.w	r1, [lr], #4
 8004604:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004608:	dcec      	bgt.n	80045e4 <__multadd+0x10>
 800460a:	b13b      	cbz	r3, 800461c <__multadd+0x48>
 800460c:	68aa      	ldr	r2, [r5, #8]
 800460e:	4294      	cmp	r4, r2
 8004610:	da07      	bge.n	8004622 <__multadd+0x4e>
 8004612:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8004616:	3401      	adds	r4, #1
 8004618:	6153      	str	r3, [r2, #20]
 800461a:	612c      	str	r4, [r5, #16]
 800461c:	4628      	mov	r0, r5
 800461e:	b003      	add	sp, #12
 8004620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004622:	6869      	ldr	r1, [r5, #4]
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	3101      	adds	r1, #1
 8004628:	4630      	mov	r0, r6
 800462a:	f7ff ffa3 	bl	8004574 <_Balloc>
 800462e:	692a      	ldr	r2, [r5, #16]
 8004630:	3202      	adds	r2, #2
 8004632:	f105 010c 	add.w	r1, r5, #12
 8004636:	4607      	mov	r7, r0
 8004638:	0092      	lsls	r2, r2, #2
 800463a:	300c      	adds	r0, #12
 800463c:	f7ff fe98 	bl	8004370 <memcpy>
 8004640:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8004642:	6869      	ldr	r1, [r5, #4]
 8004644:	9b01      	ldr	r3, [sp, #4]
 8004646:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800464a:	6028      	str	r0, [r5, #0]
 800464c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8004650:	463d      	mov	r5, r7
 8004652:	e7de      	b.n	8004612 <__multadd+0x3e>

08004654 <__s2b>:
 8004654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004658:	4c23      	ldr	r4, [pc, #140]	; (80046e8 <__s2b+0x94>)
 800465a:	9d08      	ldr	r5, [sp, #32]
 800465c:	461f      	mov	r7, r3
 800465e:	3308      	adds	r3, #8
 8004660:	fb84 4e03 	smull	r4, lr, r4, r3
 8004664:	17db      	asrs	r3, r3, #31
 8004666:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
 800466a:	f1be 0f01 	cmp.w	lr, #1
 800466e:	4606      	mov	r6, r0
 8004670:	460c      	mov	r4, r1
 8004672:	4690      	mov	r8, r2
 8004674:	dd35      	ble.n	80046e2 <__s2b+0x8e>
 8004676:	2301      	movs	r3, #1
 8004678:	2100      	movs	r1, #0
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	459e      	cmp	lr, r3
 800467e:	f101 0101 	add.w	r1, r1, #1
 8004682:	dcfa      	bgt.n	800467a <__s2b+0x26>
 8004684:	4630      	mov	r0, r6
 8004686:	f7ff ff75 	bl	8004574 <_Balloc>
 800468a:	2301      	movs	r3, #1
 800468c:	f1b8 0f09 	cmp.w	r8, #9
 8004690:	6145      	str	r5, [r0, #20]
 8004692:	6103      	str	r3, [r0, #16]
 8004694:	dd21      	ble.n	80046da <__s2b+0x86>
 8004696:	f104 0909 	add.w	r9, r4, #9
 800469a:	464d      	mov	r5, r9
 800469c:	4444      	add	r4, r8
 800469e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046a2:	4601      	mov	r1, r0
 80046a4:	3b30      	subs	r3, #48	; 0x30
 80046a6:	220a      	movs	r2, #10
 80046a8:	4630      	mov	r0, r6
 80046aa:	f7ff ff93 	bl	80045d4 <__multadd>
 80046ae:	42a5      	cmp	r5, r4
 80046b0:	d1f5      	bne.n	800469e <__s2b+0x4a>
 80046b2:	eb09 0408 	add.w	r4, r9, r8
 80046b6:	3c08      	subs	r4, #8
 80046b8:	4547      	cmp	r7, r8
 80046ba:	dd0c      	ble.n	80046d6 <__s2b+0x82>
 80046bc:	ebc8 0707 	rsb	r7, r8, r7
 80046c0:	4427      	add	r7, r4
 80046c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80046c6:	4601      	mov	r1, r0
 80046c8:	3b30      	subs	r3, #48	; 0x30
 80046ca:	220a      	movs	r2, #10
 80046cc:	4630      	mov	r0, r6
 80046ce:	f7ff ff81 	bl	80045d4 <__multadd>
 80046d2:	42a7      	cmp	r7, r4
 80046d4:	d1f5      	bne.n	80046c2 <__s2b+0x6e>
 80046d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046da:	340a      	adds	r4, #10
 80046dc:	f04f 0809 	mov.w	r8, #9
 80046e0:	e7ea      	b.n	80046b8 <__s2b+0x64>
 80046e2:	2100      	movs	r1, #0
 80046e4:	e7ce      	b.n	8004684 <__s2b+0x30>
 80046e6:	bf00      	nop
 80046e8:	38e38e39 	.word	0x38e38e39

080046ec <__hi0bits>:
 80046ec:	0c03      	lsrs	r3, r0, #16
 80046ee:	041b      	lsls	r3, r3, #16
 80046f0:	b9b3      	cbnz	r3, 8004720 <__hi0bits+0x34>
 80046f2:	0400      	lsls	r0, r0, #16
 80046f4:	2310      	movs	r3, #16
 80046f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80046fa:	bf04      	itt	eq
 80046fc:	0200      	lsleq	r0, r0, #8
 80046fe:	3308      	addeq	r3, #8
 8004700:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004704:	bf04      	itt	eq
 8004706:	0100      	lsleq	r0, r0, #4
 8004708:	3304      	addeq	r3, #4
 800470a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800470e:	bf04      	itt	eq
 8004710:	0080      	lsleq	r0, r0, #2
 8004712:	3302      	addeq	r3, #2
 8004714:	2800      	cmp	r0, #0
 8004716:	db07      	blt.n	8004728 <__hi0bits+0x3c>
 8004718:	0042      	lsls	r2, r0, #1
 800471a:	d403      	bmi.n	8004724 <__hi0bits+0x38>
 800471c:	2020      	movs	r0, #32
 800471e:	4770      	bx	lr
 8004720:	2300      	movs	r3, #0
 8004722:	e7e8      	b.n	80046f6 <__hi0bits+0xa>
 8004724:	1c58      	adds	r0, r3, #1
 8004726:	4770      	bx	lr
 8004728:	4618      	mov	r0, r3
 800472a:	4770      	bx	lr

0800472c <__lo0bits>:
 800472c:	6803      	ldr	r3, [r0, #0]
 800472e:	f013 0207 	ands.w	r2, r3, #7
 8004732:	d007      	beq.n	8004744 <__lo0bits+0x18>
 8004734:	07d9      	lsls	r1, r3, #31
 8004736:	d420      	bmi.n	800477a <__lo0bits+0x4e>
 8004738:	079a      	lsls	r2, r3, #30
 800473a:	d420      	bmi.n	800477e <__lo0bits+0x52>
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	6003      	str	r3, [r0, #0]
 8004740:	2002      	movs	r0, #2
 8004742:	4770      	bx	lr
 8004744:	b299      	uxth	r1, r3
 8004746:	b909      	cbnz	r1, 800474c <__lo0bits+0x20>
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	2210      	movs	r2, #16
 800474c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004750:	bf04      	itt	eq
 8004752:	0a1b      	lsreq	r3, r3, #8
 8004754:	3208      	addeq	r2, #8
 8004756:	0719      	lsls	r1, r3, #28
 8004758:	bf04      	itt	eq
 800475a:	091b      	lsreq	r3, r3, #4
 800475c:	3204      	addeq	r2, #4
 800475e:	0799      	lsls	r1, r3, #30
 8004760:	bf04      	itt	eq
 8004762:	089b      	lsreq	r3, r3, #2
 8004764:	3202      	addeq	r2, #2
 8004766:	07d9      	lsls	r1, r3, #31
 8004768:	d404      	bmi.n	8004774 <__lo0bits+0x48>
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	d101      	bne.n	8004772 <__lo0bits+0x46>
 800476e:	2020      	movs	r0, #32
 8004770:	4770      	bx	lr
 8004772:	3201      	adds	r2, #1
 8004774:	6003      	str	r3, [r0, #0]
 8004776:	4610      	mov	r0, r2
 8004778:	4770      	bx	lr
 800477a:	2000      	movs	r0, #0
 800477c:	4770      	bx	lr
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	6003      	str	r3, [r0, #0]
 8004782:	2001      	movs	r0, #1
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop

08004788 <__i2b>:
 8004788:	b510      	push	{r4, lr}
 800478a:	460c      	mov	r4, r1
 800478c:	2101      	movs	r1, #1
 800478e:	f7ff fef1 	bl	8004574 <_Balloc>
 8004792:	2201      	movs	r2, #1
 8004794:	6144      	str	r4, [r0, #20]
 8004796:	6102      	str	r2, [r0, #16]
 8004798:	bd10      	pop	{r4, pc}
 800479a:	bf00      	nop

0800479c <__multiply>:
 800479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a0:	690d      	ldr	r5, [r1, #16]
 80047a2:	6917      	ldr	r7, [r2, #16]
 80047a4:	42bd      	cmp	r5, r7
 80047a6:	b083      	sub	sp, #12
 80047a8:	460c      	mov	r4, r1
 80047aa:	4616      	mov	r6, r2
 80047ac:	da04      	bge.n	80047b8 <__multiply+0x1c>
 80047ae:	462a      	mov	r2, r5
 80047b0:	4634      	mov	r4, r6
 80047b2:	463d      	mov	r5, r7
 80047b4:	460e      	mov	r6, r1
 80047b6:	4617      	mov	r7, r2
 80047b8:	68a3      	ldr	r3, [r4, #8]
 80047ba:	6861      	ldr	r1, [r4, #4]
 80047bc:	eb05 0807 	add.w	r8, r5, r7
 80047c0:	4598      	cmp	r8, r3
 80047c2:	bfc8      	it	gt
 80047c4:	3101      	addgt	r1, #1
 80047c6:	f7ff fed5 	bl	8004574 <_Balloc>
 80047ca:	f100 0c14 	add.w	ip, r0, #20
 80047ce:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80047d2:	45cc      	cmp	ip, r9
 80047d4:	9000      	str	r0, [sp, #0]
 80047d6:	d205      	bcs.n	80047e4 <__multiply+0x48>
 80047d8:	4663      	mov	r3, ip
 80047da:	2100      	movs	r1, #0
 80047dc:	f843 1b04 	str.w	r1, [r3], #4
 80047e0:	4599      	cmp	r9, r3
 80047e2:	d8fb      	bhi.n	80047dc <__multiply+0x40>
 80047e4:	f106 0214 	add.w	r2, r6, #20
 80047e8:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80047ec:	f104 0314 	add.w	r3, r4, #20
 80047f0:	4552      	cmp	r2, sl
 80047f2:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 80047f6:	d254      	bcs.n	80048a2 <__multiply+0x106>
 80047f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80047fc:	4699      	mov	r9, r3
 80047fe:	f852 3b04 	ldr.w	r3, [r2], #4
 8004802:	fa1f fb83 	uxth.w	fp, r3
 8004806:	f1bb 0f00 	cmp.w	fp, #0
 800480a:	d020      	beq.n	800484e <__multiply+0xb2>
 800480c:	2000      	movs	r0, #0
 800480e:	464f      	mov	r7, r9
 8004810:	4666      	mov	r6, ip
 8004812:	4605      	mov	r5, r0
 8004814:	e000      	b.n	8004818 <__multiply+0x7c>
 8004816:	461e      	mov	r6, r3
 8004818:	f857 4b04 	ldr.w	r4, [r7], #4
 800481c:	6830      	ldr	r0, [r6, #0]
 800481e:	b2a1      	uxth	r1, r4
 8004820:	b283      	uxth	r3, r0
 8004822:	fb0b 3101 	mla	r1, fp, r1, r3
 8004826:	0c24      	lsrs	r4, r4, #16
 8004828:	0c00      	lsrs	r0, r0, #16
 800482a:	194b      	adds	r3, r1, r5
 800482c:	fb0b 0004 	mla	r0, fp, r4, r0
 8004830:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8004834:	b299      	uxth	r1, r3
 8004836:	4633      	mov	r3, r6
 8004838:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800483c:	45be      	cmp	lr, r7
 800483e:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8004842:	f843 1b04 	str.w	r1, [r3], #4
 8004846:	d8e6      	bhi.n	8004816 <__multiply+0x7a>
 8004848:	6075      	str	r5, [r6, #4]
 800484a:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800484e:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8004852:	d020      	beq.n	8004896 <__multiply+0xfa>
 8004854:	f8dc 3000 	ldr.w	r3, [ip]
 8004858:	4667      	mov	r7, ip
 800485a:	4618      	mov	r0, r3
 800485c:	464d      	mov	r5, r9
 800485e:	2100      	movs	r1, #0
 8004860:	e000      	b.n	8004864 <__multiply+0xc8>
 8004862:	4637      	mov	r7, r6
 8004864:	882c      	ldrh	r4, [r5, #0]
 8004866:	0c00      	lsrs	r0, r0, #16
 8004868:	fb0b 0004 	mla	r0, fp, r4, r0
 800486c:	4401      	add	r1, r0
 800486e:	b29c      	uxth	r4, r3
 8004870:	463e      	mov	r6, r7
 8004872:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8004876:	f846 3b04 	str.w	r3, [r6], #4
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f855 4b04 	ldr.w	r4, [r5], #4
 8004880:	b283      	uxth	r3, r0
 8004882:	0c24      	lsrs	r4, r4, #16
 8004884:	fb0b 3404 	mla	r4, fp, r4, r3
 8004888:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800488c:	45ae      	cmp	lr, r5
 800488e:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8004892:	d8e6      	bhi.n	8004862 <__multiply+0xc6>
 8004894:	607b      	str	r3, [r7, #4]
 8004896:	4592      	cmp	sl, r2
 8004898:	f10c 0c04 	add.w	ip, ip, #4
 800489c:	d8af      	bhi.n	80047fe <__multiply+0x62>
 800489e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80048a2:	f1b8 0f00 	cmp.w	r8, #0
 80048a6:	dd0b      	ble.n	80048c0 <__multiply+0x124>
 80048a8:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80048ac:	f1a9 0904 	sub.w	r9, r9, #4
 80048b0:	b11b      	cbz	r3, 80048ba <__multiply+0x11e>
 80048b2:	e005      	b.n	80048c0 <__multiply+0x124>
 80048b4:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 80048b8:	b913      	cbnz	r3, 80048c0 <__multiply+0x124>
 80048ba:	f1b8 0801 	subs.w	r8, r8, #1
 80048be:	d1f9      	bne.n	80048b4 <__multiply+0x118>
 80048c0:	9800      	ldr	r0, [sp, #0]
 80048c2:	f8c0 8010 	str.w	r8, [r0, #16]
 80048c6:	b003      	add	sp, #12
 80048c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080048cc <__pow5mult>:
 80048cc:	f012 0303 	ands.w	r3, r2, #3
 80048d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d4:	4614      	mov	r4, r2
 80048d6:	4607      	mov	r7, r0
 80048d8:	d12e      	bne.n	8004938 <__pow5mult+0x6c>
 80048da:	460e      	mov	r6, r1
 80048dc:	10a4      	asrs	r4, r4, #2
 80048de:	d01c      	beq.n	800491a <__pow5mult+0x4e>
 80048e0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80048e2:	b395      	cbz	r5, 800494a <__pow5mult+0x7e>
 80048e4:	07e3      	lsls	r3, r4, #31
 80048e6:	f04f 0800 	mov.w	r8, #0
 80048ea:	d406      	bmi.n	80048fa <__pow5mult+0x2e>
 80048ec:	1064      	asrs	r4, r4, #1
 80048ee:	d014      	beq.n	800491a <__pow5mult+0x4e>
 80048f0:	6828      	ldr	r0, [r5, #0]
 80048f2:	b1a8      	cbz	r0, 8004920 <__pow5mult+0x54>
 80048f4:	4605      	mov	r5, r0
 80048f6:	07e3      	lsls	r3, r4, #31
 80048f8:	d5f8      	bpl.n	80048ec <__pow5mult+0x20>
 80048fa:	462a      	mov	r2, r5
 80048fc:	4631      	mov	r1, r6
 80048fe:	4638      	mov	r0, r7
 8004900:	f7ff ff4c 	bl	800479c <__multiply>
 8004904:	b1b6      	cbz	r6, 8004934 <__pow5mult+0x68>
 8004906:	6872      	ldr	r2, [r6, #4]
 8004908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490a:	1064      	asrs	r4, r4, #1
 800490c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004910:	6031      	str	r1, [r6, #0]
 8004912:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8004916:	4606      	mov	r6, r0
 8004918:	d1ea      	bne.n	80048f0 <__pow5mult+0x24>
 800491a:	4630      	mov	r0, r6
 800491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004920:	462a      	mov	r2, r5
 8004922:	4629      	mov	r1, r5
 8004924:	4638      	mov	r0, r7
 8004926:	f7ff ff39 	bl	800479c <__multiply>
 800492a:	6028      	str	r0, [r5, #0]
 800492c:	f8c0 8000 	str.w	r8, [r0]
 8004930:	4605      	mov	r5, r0
 8004932:	e7e0      	b.n	80048f6 <__pow5mult+0x2a>
 8004934:	4606      	mov	r6, r0
 8004936:	e7d9      	b.n	80048ec <__pow5mult+0x20>
 8004938:	1e5a      	subs	r2, r3, #1
 800493a:	4d0b      	ldr	r5, [pc, #44]	; (8004968 <__pow5mult+0x9c>)
 800493c:	2300      	movs	r3, #0
 800493e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004942:	f7ff fe47 	bl	80045d4 <__multadd>
 8004946:	4606      	mov	r6, r0
 8004948:	e7c8      	b.n	80048dc <__pow5mult+0x10>
 800494a:	2101      	movs	r1, #1
 800494c:	4638      	mov	r0, r7
 800494e:	f7ff fe11 	bl	8004574 <_Balloc>
 8004952:	f240 2171 	movw	r1, #625	; 0x271
 8004956:	2201      	movs	r2, #1
 8004958:	2300      	movs	r3, #0
 800495a:	6141      	str	r1, [r0, #20]
 800495c:	6102      	str	r2, [r0, #16]
 800495e:	4605      	mov	r5, r0
 8004960:	64b8      	str	r0, [r7, #72]	; 0x48
 8004962:	6003      	str	r3, [r0, #0]
 8004964:	e7be      	b.n	80048e4 <__pow5mult+0x18>
 8004966:	bf00      	nop
 8004968:	0800c748 	.word	0x0800c748

0800496c <__lshift>:
 800496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004970:	4691      	mov	r9, r2
 8004972:	690a      	ldr	r2, [r1, #16]
 8004974:	688b      	ldr	r3, [r1, #8]
 8004976:	ea4f 1469 	mov.w	r4, r9, asr #5
 800497a:	eb04 0802 	add.w	r8, r4, r2
 800497e:	f108 0501 	add.w	r5, r8, #1
 8004982:	429d      	cmp	r5, r3
 8004984:	460e      	mov	r6, r1
 8004986:	4682      	mov	sl, r0
 8004988:	6849      	ldr	r1, [r1, #4]
 800498a:	dd04      	ble.n	8004996 <__lshift+0x2a>
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	429d      	cmp	r5, r3
 8004990:	f101 0101 	add.w	r1, r1, #1
 8004994:	dcfa      	bgt.n	800498c <__lshift+0x20>
 8004996:	4650      	mov	r0, sl
 8004998:	f7ff fdec 	bl	8004574 <_Balloc>
 800499c:	2c00      	cmp	r4, #0
 800499e:	f100 0214 	add.w	r2, r0, #20
 80049a2:	dd38      	ble.n	8004a16 <__lshift+0xaa>
 80049a4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 80049a8:	2100      	movs	r1, #0
 80049aa:	f842 1b04 	str.w	r1, [r2], #4
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d1fb      	bne.n	80049aa <__lshift+0x3e>
 80049b2:	6934      	ldr	r4, [r6, #16]
 80049b4:	f106 0114 	add.w	r1, r6, #20
 80049b8:	f019 091f 	ands.w	r9, r9, #31
 80049bc:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 80049c0:	d021      	beq.n	8004a06 <__lshift+0x9a>
 80049c2:	f1c9 0220 	rsb	r2, r9, #32
 80049c6:	2400      	movs	r4, #0
 80049c8:	680f      	ldr	r7, [r1, #0]
 80049ca:	fa07 fc09 	lsl.w	ip, r7, r9
 80049ce:	ea4c 0404 	orr.w	r4, ip, r4
 80049d2:	469c      	mov	ip, r3
 80049d4:	f843 4b04 	str.w	r4, [r3], #4
 80049d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80049dc:	458e      	cmp	lr, r1
 80049de:	fa24 f402 	lsr.w	r4, r4, r2
 80049e2:	d8f1      	bhi.n	80049c8 <__lshift+0x5c>
 80049e4:	f8cc 4004 	str.w	r4, [ip, #4]
 80049e8:	b10c      	cbz	r4, 80049ee <__lshift+0x82>
 80049ea:	f108 0502 	add.w	r5, r8, #2
 80049ee:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80049f2:	6872      	ldr	r2, [r6, #4]
 80049f4:	3d01      	subs	r5, #1
 80049f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049fa:	6105      	str	r5, [r0, #16]
 80049fc:	6031      	str	r1, [r6, #0]
 80049fe:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8004a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a06:	3b04      	subs	r3, #4
 8004a08:	f851 2b04 	ldr.w	r2, [r1], #4
 8004a0c:	f843 2f04 	str.w	r2, [r3, #4]!
 8004a10:	458e      	cmp	lr, r1
 8004a12:	d8f9      	bhi.n	8004a08 <__lshift+0x9c>
 8004a14:	e7eb      	b.n	80049ee <__lshift+0x82>
 8004a16:	4613      	mov	r3, r2
 8004a18:	e7cb      	b.n	80049b2 <__lshift+0x46>
 8004a1a:	bf00      	nop

08004a1c <__mcmp>:
 8004a1c:	6902      	ldr	r2, [r0, #16]
 8004a1e:	690b      	ldr	r3, [r1, #16]
 8004a20:	1ad2      	subs	r2, r2, r3
 8004a22:	d113      	bne.n	8004a4c <__mcmp+0x30>
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	3014      	adds	r0, #20
 8004a28:	3114      	adds	r1, #20
 8004a2a:	4419      	add	r1, r3
 8004a2c:	b410      	push	{r4}
 8004a2e:	4403      	add	r3, r0
 8004a30:	e001      	b.n	8004a36 <__mcmp+0x1a>
 8004a32:	4298      	cmp	r0, r3
 8004a34:	d20c      	bcs.n	8004a50 <__mcmp+0x34>
 8004a36:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8004a3a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004a3e:	4294      	cmp	r4, r2
 8004a40:	d0f7      	beq.n	8004a32 <__mcmp+0x16>
 8004a42:	d309      	bcc.n	8004a58 <__mcmp+0x3c>
 8004a44:	2001      	movs	r0, #1
 8004a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4770      	bx	lr
 8004a50:	2000      	movs	r0, #0
 8004a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a5c:	e7f3      	b.n	8004a46 <__mcmp+0x2a>
 8004a5e:	bf00      	nop

08004a60 <__mdiff>:
 8004a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a64:	690b      	ldr	r3, [r1, #16]
 8004a66:	460f      	mov	r7, r1
 8004a68:	6911      	ldr	r1, [r2, #16]
 8004a6a:	1a5b      	subs	r3, r3, r1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	4690      	mov	r8, r2
 8004a70:	d117      	bne.n	8004aa2 <__mdiff+0x42>
 8004a72:	0089      	lsls	r1, r1, #2
 8004a74:	f107 0214 	add.w	r2, r7, #20
 8004a78:	f108 0514 	add.w	r5, r8, #20
 8004a7c:	1853      	adds	r3, r2, r1
 8004a7e:	4429      	add	r1, r5
 8004a80:	e001      	b.n	8004a86 <__mdiff+0x26>
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d25e      	bcs.n	8004b44 <__mdiff+0xe4>
 8004a86:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8004a8a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004a8e:	42a6      	cmp	r6, r4
 8004a90:	d0f7      	beq.n	8004a82 <__mdiff+0x22>
 8004a92:	d260      	bcs.n	8004b56 <__mdiff+0xf6>
 8004a94:	463b      	mov	r3, r7
 8004a96:	4614      	mov	r4, r2
 8004a98:	4647      	mov	r7, r8
 8004a9a:	f04f 0901 	mov.w	r9, #1
 8004a9e:	4698      	mov	r8, r3
 8004aa0:	e006      	b.n	8004ab0 <__mdiff+0x50>
 8004aa2:	db5d      	blt.n	8004b60 <__mdiff+0x100>
 8004aa4:	f107 0514 	add.w	r5, r7, #20
 8004aa8:	f102 0414 	add.w	r4, r2, #20
 8004aac:	f04f 0900 	mov.w	r9, #0
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	f7ff fd5f 	bl	8004574 <_Balloc>
 8004ab6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004aba:	693e      	ldr	r6, [r7, #16]
 8004abc:	f8c0 900c 	str.w	r9, [r0, #12]
 8004ac0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8004ac4:	46a6      	mov	lr, r4
 8004ac6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8004aca:	f100 0414 	add.w	r4, r0, #20
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004ad4:	f855 8b04 	ldr.w	r8, [r5], #4
 8004ad8:	b28a      	uxth	r2, r1
 8004ada:	fa13 f388 	uxtah	r3, r3, r8
 8004ade:	0c09      	lsrs	r1, r1, #16
 8004ae0:	1a9a      	subs	r2, r3, r2
 8004ae2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8004ae6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8004aea:	b292      	uxth	r2, r2
 8004aec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004af0:	45f4      	cmp	ip, lr
 8004af2:	f844 2b04 	str.w	r2, [r4], #4
 8004af6:	ea4f 4323 	mov.w	r3, r3, asr #16
 8004afa:	d8e9      	bhi.n	8004ad0 <__mdiff+0x70>
 8004afc:	42af      	cmp	r7, r5
 8004afe:	d917      	bls.n	8004b30 <__mdiff+0xd0>
 8004b00:	46a4      	mov	ip, r4
 8004b02:	4629      	mov	r1, r5
 8004b04:	f851 eb04 	ldr.w	lr, [r1], #4
 8004b08:	fa13 f28e 	uxtah	r2, r3, lr
 8004b0c:	1413      	asrs	r3, r2, #16
 8004b0e:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8004b12:	b292      	uxth	r2, r2
 8004b14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004b18:	428f      	cmp	r7, r1
 8004b1a:	f84c 2b04 	str.w	r2, [ip], #4
 8004b1e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8004b22:	d8ef      	bhi.n	8004b04 <__mdiff+0xa4>
 8004b24:	43ed      	mvns	r5, r5
 8004b26:	443d      	add	r5, r7
 8004b28:	f025 0503 	bic.w	r5, r5, #3
 8004b2c:	3504      	adds	r5, #4
 8004b2e:	442c      	add	r4, r5
 8004b30:	3c04      	subs	r4, #4
 8004b32:	b922      	cbnz	r2, 8004b3e <__mdiff+0xde>
 8004b34:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8004b38:	3e01      	subs	r6, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0fa      	beq.n	8004b34 <__mdiff+0xd4>
 8004b3e:	6106      	str	r6, [r0, #16]
 8004b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b44:	2100      	movs	r1, #0
 8004b46:	f7ff fd15 	bl	8004574 <_Balloc>
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	6102      	str	r2, [r0, #16]
 8004b50:	6143      	str	r3, [r0, #20]
 8004b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b56:	462c      	mov	r4, r5
 8004b58:	f04f 0900 	mov.w	r9, #0
 8004b5c:	4615      	mov	r5, r2
 8004b5e:	e7a7      	b.n	8004ab0 <__mdiff+0x50>
 8004b60:	463b      	mov	r3, r7
 8004b62:	f107 0414 	add.w	r4, r7, #20
 8004b66:	f108 0514 	add.w	r5, r8, #20
 8004b6a:	4647      	mov	r7, r8
 8004b6c:	f04f 0901 	mov.w	r9, #1
 8004b70:	4698      	mov	r8, r3
 8004b72:	e79d      	b.n	8004ab0 <__mdiff+0x50>

08004b74 <__ulp>:
 8004b74:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <__ulp+0x50>)
 8004b76:	ee10 2a90 	vmov	r2, s1
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	dd04      	ble.n	8004b8e <__ulp+0x1a>
 8004b84:	2000      	movs	r0, #0
 8004b86:	4619      	mov	r1, r3
 8004b88:	ec41 0b10 	vmov	d0, r0, r1
 8004b8c:	4770      	bx	lr
 8004b8e:	425b      	negs	r3, r3
 8004b90:	151b      	asrs	r3, r3, #20
 8004b92:	2b13      	cmp	r3, #19
 8004b94:	dd0d      	ble.n	8004bb2 <__ulp+0x3e>
 8004b96:	3b14      	subs	r3, #20
 8004b98:	2b1e      	cmp	r3, #30
 8004b9a:	bfdd      	ittte	le
 8004b9c:	f1c3 031f 	rsble	r3, r3, #31
 8004ba0:	2201      	movle	r2, #1
 8004ba2:	fa02 f303 	lslle.w	r3, r2, r3
 8004ba6:	2301      	movgt	r3, #1
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	ec41 0b10 	vmov	d0, r0, r1
 8004bb0:	4770      	bx	lr
 8004bb2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	fa42 f103 	asr.w	r1, r2, r3
 8004bbc:	ec41 0b10 	vmov	d0, r0, r1
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	7ff00000 	.word	0x7ff00000

08004bc8 <__b2d>:
 8004bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bcc:	6906      	ldr	r6, [r0, #16]
 8004bce:	f100 0814 	add.w	r8, r0, #20
 8004bd2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8004bd6:	f856 7c04 	ldr.w	r7, [r6, #-4]
 8004bda:	4638      	mov	r0, r7
 8004bdc:	f7ff fd86 	bl	80046ec <__hi0bits>
 8004be0:	f1c0 0320 	rsb	r3, r0, #32
 8004be4:	280a      	cmp	r0, #10
 8004be6:	600b      	str	r3, [r1, #0]
 8004be8:	f1a6 0304 	sub.w	r3, r6, #4
 8004bec:	dc18      	bgt.n	8004c20 <__b2d+0x58>
 8004bee:	4598      	cmp	r8, r3
 8004bf0:	f1c0 020b 	rsb	r2, r0, #11
 8004bf4:	bf38      	it	cc
 8004bf6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8004bfa:	fa27 f102 	lsr.w	r1, r7, r2
 8004bfe:	f100 0015 	add.w	r0, r0, #21
 8004c02:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
 8004c06:	bf34      	ite	cc
 8004c08:	40d3      	lsrcc	r3, r2
 8004c0a:	2300      	movcs	r3, #0
 8004c0c:	fa07 f000 	lsl.w	r0, r7, r0
 8004c10:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004c14:	ea40 0403 	orr.w	r4, r0, r3
 8004c18:	ec45 4b10 	vmov	d0, r4, r5
 8004c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c20:	4598      	cmp	r8, r3
 8004c22:	d220      	bcs.n	8004c66 <__b2d+0x9e>
 8004c24:	f1b0 030b 	subs.w	r3, r0, #11
 8004c28:	f856 2c08 	ldr.w	r2, [r6, #-8]
 8004c2c:	d01e      	beq.n	8004c6c <__b2d+0xa4>
 8004c2e:	fa07 f003 	lsl.w	r0, r7, r3
 8004c32:	f040 577f 	orr.w	r7, r0, #1069547520	; 0x3fc00000
 8004c36:	f1c3 0e20 	rsb	lr, r3, #32
 8004c3a:	f1a6 0108 	sub.w	r1, r6, #8
 8004c3e:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004c42:	fa22 f00e 	lsr.w	r0, r2, lr
 8004c46:	4588      	cmp	r8, r1
 8004c48:	ea47 0500 	orr.w	r5, r7, r0
 8004c4c:	d220      	bcs.n	8004c90 <__b2d+0xc8>
 8004c4e:	f856 1c0c 	ldr.w	r1, [r6, #-12]
 8004c52:	fa02 f003 	lsl.w	r0, r2, r3
 8004c56:	fa21 f30e 	lsr.w	r3, r1, lr
 8004c5a:	4318      	orrs	r0, r3
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	ec45 4b10 	vmov	d0, r4, r5
 8004c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c66:	380b      	subs	r0, #11
 8004c68:	d109      	bne.n	8004c7e <__b2d+0xb6>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
 8004c70:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004c74:	4614      	mov	r4, r2
 8004c76:	ec45 4b10 	vmov	d0, r4, r5
 8004c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c7e:	fa07 f000 	lsl.w	r0, r7, r0
 8004c82:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
 8004c86:	2000      	movs	r0, #0
 8004c88:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	e7e6      	b.n	8004c5e <__b2d+0x96>
 8004c90:	fa02 f003 	lsl.w	r0, r2, r3
 8004c94:	4604      	mov	r4, r0
 8004c96:	e7e2      	b.n	8004c5e <__b2d+0x96>

08004c98 <__d2b>:
 8004c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c9c:	ec57 6b10 	vmov	r6, r7, d0
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	4688      	mov	r8, r1
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	463c      	mov	r4, r7
 8004ca8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004cac:	4617      	mov	r7, r2
 8004cae:	f7ff fc61 	bl	8004574 <_Balloc>
 8004cb2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004cb6:	4681      	mov	r9, r0
 8004cb8:	b10d      	cbz	r5, 8004cbe <__d2b+0x26>
 8004cba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8004cbe:	9401      	str	r4, [sp, #4]
 8004cc0:	b31e      	cbz	r6, 8004d0a <__d2b+0x72>
 8004cc2:	a802      	add	r0, sp, #8
 8004cc4:	f840 6d08 	str.w	r6, [r0, #-8]!
 8004cc8:	f7ff fd30 	bl	800472c <__lo0bits>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d134      	bne.n	8004d3a <__d2b+0xa2>
 8004cd0:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8004cd4:	f8c9 2014 	str.w	r2, [r9, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2101      	moveq	r1, #1
 8004cde:	2102      	movne	r1, #2
 8004ce0:	f8c9 3018 	str.w	r3, [r9, #24]
 8004ce4:	f8c9 1010 	str.w	r1, [r9, #16]
 8004ce8:	b9dd      	cbnz	r5, 8004d22 <__d2b+0x8a>
 8004cea:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8004cee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004cf2:	f8c8 0000 	str.w	r0, [r8]
 8004cf6:	6918      	ldr	r0, [r3, #16]
 8004cf8:	f7ff fcf8 	bl	80046ec <__hi0bits>
 8004cfc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004d00:	6038      	str	r0, [r7, #0]
 8004d02:	4648      	mov	r0, r9
 8004d04:	b003      	add	sp, #12
 8004d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d0a:	a801      	add	r0, sp, #4
 8004d0c:	f7ff fd0e 	bl	800472c <__lo0bits>
 8004d10:	9b01      	ldr	r3, [sp, #4]
 8004d12:	f8c9 3014 	str.w	r3, [r9, #20]
 8004d16:	2101      	movs	r1, #1
 8004d18:	3020      	adds	r0, #32
 8004d1a:	f8c9 1010 	str.w	r1, [r9, #16]
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	d0e3      	beq.n	8004cea <__d2b+0x52>
 8004d22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004d26:	4405      	add	r5, r0
 8004d28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d2c:	f8c8 5000 	str.w	r5, [r8]
 8004d30:	6038      	str	r0, [r7, #0]
 8004d32:	4648      	mov	r0, r9
 8004d34:	b003      	add	sp, #12
 8004d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d3a:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8004d3e:	f1c0 0120 	rsb	r1, r0, #32
 8004d42:	fa03 f101 	lsl.w	r1, r3, r1
 8004d46:	430a      	orrs	r2, r1
 8004d48:	40c3      	lsrs	r3, r0
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	f8c9 2014 	str.w	r2, [r9, #20]
 8004d50:	e7c2      	b.n	8004cd8 <__d2b+0x40>
 8004d52:	bf00      	nop

08004d54 <__ratio>:
 8004d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	4688      	mov	r8, r1
 8004d5c:	4669      	mov	r1, sp
 8004d5e:	4681      	mov	r9, r0
 8004d60:	f7ff ff32 	bl	8004bc8 <__b2d>
 8004d64:	4640      	mov	r0, r8
 8004d66:	a901      	add	r1, sp, #4
 8004d68:	ec55 4b10 	vmov	r4, r5, d0
 8004d6c:	f7ff ff2c 	bl	8004bc8 <__b2d>
 8004d70:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8004d74:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8004d78:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004d7c:	1ac9      	subs	r1, r1, r3
 8004d7e:	1a10      	subs	r0, r2, r0
 8004d80:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	ec57 6b10 	vmov	r6, r7, d0
 8004d8a:	dd0d      	ble.n	8004da8 <__ratio+0x54>
 8004d8c:	eb05 5103 	add.w	r1, r5, r3, lsl #20
 8004d90:	460d      	mov	r5, r1
 8004d92:	4632      	mov	r2, r6
 8004d94:	463b      	mov	r3, r7
 8004d96:	4620      	mov	r0, r4
 8004d98:	4629      	mov	r1, r5
 8004d9a:	f002 f8ab 	bl	8006ef4 <__aeabi_ddiv>
 8004d9e:	ec41 0b10 	vmov	d0, r0, r1
 8004da2:	b003      	add	sp, #12
 8004da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004da8:	eba7 5903 	sub.w	r9, r7, r3, lsl #20
 8004dac:	ee10 6a10 	vmov	r6, s0
 8004db0:	464f      	mov	r7, r9
 8004db2:	e7ee      	b.n	8004d92 <__ratio+0x3e>

08004db4 <_mprec_log10>:
 8004db4:	2817      	cmp	r0, #23
 8004db6:	b510      	push	{r4, lr}
 8004db8:	4604      	mov	r4, r0
 8004dba:	dd0a      	ble.n	8004dd2 <_mprec_log10+0x1e>
 8004dbc:	4908      	ldr	r1, [pc, #32]	; (8004de0 <_mprec_log10+0x2c>)
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <_mprec_log10+0x30>)
 8004dc4:	f001 ff6c 	bl	8006ca0 <__aeabi_dmul>
 8004dc8:	3c01      	subs	r4, #1
 8004dca:	d1f9      	bne.n	8004dc0 <_mprec_log10+0xc>
 8004dcc:	ec41 0b10 	vmov	d0, r0, r1
 8004dd0:	bd10      	pop	{r4, pc}
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <_mprec_log10+0x34>)
 8004dd4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8004dd8:	ed94 0b04 	vldr	d0, [r4, #16]
 8004ddc:	bd10      	pop	{r4, pc}
 8004dde:	bf00      	nop
 8004de0:	3ff00000 	.word	0x3ff00000
 8004de4:	40240000 	.word	0x40240000
 8004de8:	0800c748 	.word	0x0800c748

08004dec <__copybits>:
 8004dec:	b470      	push	{r4, r5, r6}
 8004dee:	6914      	ldr	r4, [r2, #16]
 8004df0:	f102 0314 	add.w	r3, r2, #20
 8004df4:	3901      	subs	r1, #1
 8004df6:	114e      	asrs	r6, r1, #5
 8004df8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004dfc:	3601      	adds	r6, #1
 8004dfe:	42a3      	cmp	r3, r4
 8004e00:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8004e04:	d20c      	bcs.n	8004e20 <__copybits+0x34>
 8004e06:	1f01      	subs	r1, r0, #4
 8004e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e0c:	f841 5f04 	str.w	r5, [r1, #4]!
 8004e10:	429c      	cmp	r4, r3
 8004e12:	d8f9      	bhi.n	8004e08 <__copybits+0x1c>
 8004e14:	1aa3      	subs	r3, r4, r2
 8004e16:	3b15      	subs	r3, #21
 8004e18:	f023 0303 	bic.w	r3, r3, #3
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	4418      	add	r0, r3
 8004e20:	4286      	cmp	r6, r0
 8004e22:	d904      	bls.n	8004e2e <__copybits+0x42>
 8004e24:	2300      	movs	r3, #0
 8004e26:	f840 3b04 	str.w	r3, [r0], #4
 8004e2a:	4286      	cmp	r6, r0
 8004e2c:	d8fb      	bhi.n	8004e26 <__copybits+0x3a>
 8004e2e:	bc70      	pop	{r4, r5, r6}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop

08004e34 <__any_on>:
 8004e34:	6903      	ldr	r3, [r0, #16]
 8004e36:	114a      	asrs	r2, r1, #5
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	b410      	push	{r4}
 8004e3c:	f100 0414 	add.w	r4, r0, #20
 8004e40:	da10      	bge.n	8004e64 <__any_on+0x30>
 8004e42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e46:	429c      	cmp	r4, r3
 8004e48:	d221      	bcs.n	8004e8e <__any_on+0x5a>
 8004e4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8004e4e:	3b04      	subs	r3, #4
 8004e50:	b118      	cbz	r0, 8004e5a <__any_on+0x26>
 8004e52:	e015      	b.n	8004e80 <__any_on+0x4c>
 8004e54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004e58:	b992      	cbnz	r2, 8004e80 <__any_on+0x4c>
 8004e5a:	429c      	cmp	r4, r3
 8004e5c:	d3fa      	bcc.n	8004e54 <__any_on+0x20>
 8004e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	dd10      	ble.n	8004e88 <__any_on+0x54>
 8004e66:	f011 011f 	ands.w	r1, r1, #31
 8004e6a:	d00d      	beq.n	8004e88 <__any_on+0x54>
 8004e6c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8004e70:	fa20 f301 	lsr.w	r3, r0, r1
 8004e74:	fa03 f101 	lsl.w	r1, r3, r1
 8004e78:	4288      	cmp	r0, r1
 8004e7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004e7e:	d0e2      	beq.n	8004e46 <__any_on+0x12>
 8004e80:	2001      	movs	r0, #1
 8004e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004e8c:	e7db      	b.n	8004e46 <__any_on+0x12>
 8004e8e:	2000      	movs	r0, #0
 8004e90:	e7e5      	b.n	8004e5e <__any_on+0x2a>
 8004e92:	bf00      	nop

08004e94 <_putc_r>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	460d      	mov	r5, r1
 8004e98:	4614      	mov	r4, r2
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	b118      	cbz	r0, 8004ea6 <_putc_r+0x12>
 8004e9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004ea0:	b90b      	cbnz	r3, 8004ea6 <_putc_r+0x12>
 8004ea2:	f7fe fb6f 	bl	8003584 <__sinit>
 8004ea6:	68a3      	ldr	r3, [r4, #8]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	60a3      	str	r3, [r4, #8]
 8004eae:	db05      	blt.n	8004ebc <_putc_r+0x28>
 8004eb0:	b2e8      	uxtb	r0, r5
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	6022      	str	r2, [r4, #0]
 8004eb8:	701d      	strb	r5, [r3, #0]
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	69a2      	ldr	r2, [r4, #24]
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	db02      	blt.n	8004ec8 <_putc_r+0x34>
 8004ec2:	b2e8      	uxtb	r0, r5
 8004ec4:	280a      	cmp	r0, #10
 8004ec6:	d1f4      	bne.n	8004eb2 <_putc_r+0x1e>
 8004ec8:	4622      	mov	r2, r4
 8004eca:	4629      	mov	r1, r5
 8004ecc:	4630      	mov	r0, r6
 8004ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ed2:	f001 bb59 	b.w	8006588 <__swbuf_r>
 8004ed6:	bf00      	nop

08004ed8 <putc>:
 8004ed8:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <putc+0x48>)
 8004eda:	b570      	push	{r4, r5, r6, lr}
 8004edc:	681d      	ldr	r5, [r3, #0]
 8004ede:	4606      	mov	r6, r0
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	b125      	cbz	r5, 8004eee <putc+0x16>
 8004ee4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004ee6:	b913      	cbnz	r3, 8004eee <putc+0x16>
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f7fe fb4b 	bl	8003584 <__sinit>
 8004eee:	68a3      	ldr	r3, [r4, #8]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	60a3      	str	r3, [r4, #8]
 8004ef6:	db05      	blt.n	8004f04 <putc+0x2c>
 8004ef8:	b2f0      	uxtb	r0, r6
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	6022      	str	r2, [r4, #0]
 8004f00:	701e      	strb	r6, [r3, #0]
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	69a2      	ldr	r2, [r4, #24]
 8004f06:	4293      	cmp	r3, r2
 8004f08:	db02      	blt.n	8004f10 <putc+0x38>
 8004f0a:	b2f0      	uxtb	r0, r6
 8004f0c:	280a      	cmp	r0, #10
 8004f0e:	d1f4      	bne.n	8004efa <putc+0x22>
 8004f10:	4622      	mov	r2, r4
 8004f12:	4631      	mov	r1, r6
 8004f14:	4628      	mov	r0, r5
 8004f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f1a:	f001 bb35 	b.w	8006588 <__swbuf_r>
 8004f1e:	bf00      	nop
 8004f20:	20000008 	.word	0x20000008

08004f24 <_realloc_r>:
 8004f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f28:	4617      	mov	r7, r2
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	2900      	cmp	r1, #0
 8004f2e:	f000 80c1 	beq.w	80050b4 <_realloc_r+0x190>
 8004f32:	460e      	mov	r6, r1
 8004f34:	4681      	mov	r9, r0
 8004f36:	f107 050b 	add.w	r5, r7, #11
 8004f3a:	f7ff fb17 	bl	800456c <__malloc_lock>
 8004f3e:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8004f42:	2d16      	cmp	r5, #22
 8004f44:	f02e 0403 	bic.w	r4, lr, #3
 8004f48:	f1a6 0808 	sub.w	r8, r6, #8
 8004f4c:	d840      	bhi.n	8004fd0 <_realloc_r+0xac>
 8004f4e:	2210      	movs	r2, #16
 8004f50:	4615      	mov	r5, r2
 8004f52:	42af      	cmp	r7, r5
 8004f54:	d841      	bhi.n	8004fda <_realloc_r+0xb6>
 8004f56:	4294      	cmp	r4, r2
 8004f58:	da75      	bge.n	8005046 <_realloc_r+0x122>
 8004f5a:	4bc9      	ldr	r3, [pc, #804]	; (8005280 <_realloc_r+0x35c>)
 8004f5c:	6899      	ldr	r1, [r3, #8]
 8004f5e:	eb08 0004 	add.w	r0, r8, r4
 8004f62:	4288      	cmp	r0, r1
 8004f64:	6841      	ldr	r1, [r0, #4]
 8004f66:	f000 80d9 	beq.w	800511c <_realloc_r+0x1f8>
 8004f6a:	f021 0301 	bic.w	r3, r1, #1
 8004f6e:	4403      	add	r3, r0
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	07db      	lsls	r3, r3, #31
 8004f74:	d57d      	bpl.n	8005072 <_realloc_r+0x14e>
 8004f76:	f01e 0f01 	tst.w	lr, #1
 8004f7a:	d035      	beq.n	8004fe8 <_realloc_r+0xc4>
 8004f7c:	4639      	mov	r1, r7
 8004f7e:	4648      	mov	r0, r9
 8004f80:	f7fe feec 	bl	8003d5c <_malloc_r>
 8004f84:	4607      	mov	r7, r0
 8004f86:	b1e0      	cbz	r0, 8004fc2 <_realloc_r+0x9e>
 8004f88:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	4443      	add	r3, r8
 8004f92:	f1a0 0208 	sub.w	r2, r0, #8
 8004f96:	429a      	cmp	r2, r3
 8004f98:	f000 8144 	beq.w	8005224 <_realloc_r+0x300>
 8004f9c:	1f22      	subs	r2, r4, #4
 8004f9e:	2a24      	cmp	r2, #36	; 0x24
 8004fa0:	f200 8131 	bhi.w	8005206 <_realloc_r+0x2e2>
 8004fa4:	2a13      	cmp	r2, #19
 8004fa6:	f200 8104 	bhi.w	80051b2 <_realloc_r+0x28e>
 8004faa:	4603      	mov	r3, r0
 8004fac:	4632      	mov	r2, r6
 8004fae:	6811      	ldr	r1, [r2, #0]
 8004fb0:	6019      	str	r1, [r3, #0]
 8004fb2:	6851      	ldr	r1, [r2, #4]
 8004fb4:	6059      	str	r1, [r3, #4]
 8004fb6:	6892      	ldr	r2, [r2, #8]
 8004fb8:	609a      	str	r2, [r3, #8]
 8004fba:	4631      	mov	r1, r6
 8004fbc:	4648      	mov	r0, r9
 8004fbe:	f7fe fb4f 	bl	8003660 <_free_r>
 8004fc2:	4648      	mov	r0, r9
 8004fc4:	f7ff fad4 	bl	8004570 <__malloc_unlock>
 8004fc8:	4638      	mov	r0, r7
 8004fca:	b003      	add	sp, #12
 8004fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd0:	f025 0507 	bic.w	r5, r5, #7
 8004fd4:	2d00      	cmp	r5, #0
 8004fd6:	462a      	mov	r2, r5
 8004fd8:	dabb      	bge.n	8004f52 <_realloc_r+0x2e>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f8c9 3000 	str.w	r3, [r9]
 8004fe2:	b003      	add	sp, #12
 8004fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8004fec:	ebc3 0a08 	rsb	sl, r3, r8
 8004ff0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004ff4:	f023 0c03 	bic.w	ip, r3, #3
 8004ff8:	eb04 030c 	add.w	r3, r4, ip
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	dbbd      	blt.n	8004f7c <_realloc_r+0x58>
 8005000:	4657      	mov	r7, sl
 8005002:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005006:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800500a:	1f22      	subs	r2, r4, #4
 800500c:	2a24      	cmp	r2, #36	; 0x24
 800500e:	60c1      	str	r1, [r0, #12]
 8005010:	6088      	str	r0, [r1, #8]
 8005012:	f200 8117 	bhi.w	8005244 <_realloc_r+0x320>
 8005016:	2a13      	cmp	r2, #19
 8005018:	f240 8112 	bls.w	8005240 <_realloc_r+0x31c>
 800501c:	6831      	ldr	r1, [r6, #0]
 800501e:	f8ca 1008 	str.w	r1, [sl, #8]
 8005022:	6871      	ldr	r1, [r6, #4]
 8005024:	f8ca 100c 	str.w	r1, [sl, #12]
 8005028:	2a1b      	cmp	r2, #27
 800502a:	f200 812b 	bhi.w	8005284 <_realloc_r+0x360>
 800502e:	3608      	adds	r6, #8
 8005030:	f10a 0210 	add.w	r2, sl, #16
 8005034:	6831      	ldr	r1, [r6, #0]
 8005036:	6011      	str	r1, [r2, #0]
 8005038:	6871      	ldr	r1, [r6, #4]
 800503a:	6051      	str	r1, [r2, #4]
 800503c:	68b1      	ldr	r1, [r6, #8]
 800503e:	6091      	str	r1, [r2, #8]
 8005040:	463e      	mov	r6, r7
 8005042:	461c      	mov	r4, r3
 8005044:	46d0      	mov	r8, sl
 8005046:	1b63      	subs	r3, r4, r5
 8005048:	2b0f      	cmp	r3, #15
 800504a:	d81d      	bhi.n	8005088 <_realloc_r+0x164>
 800504c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	4323      	orrs	r3, r4
 8005056:	4444      	add	r4, r8
 8005058:	f8c8 3004 	str.w	r3, [r8, #4]
 800505c:	6863      	ldr	r3, [r4, #4]
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	6063      	str	r3, [r4, #4]
 8005064:	4648      	mov	r0, r9
 8005066:	f7ff fa83 	bl	8004570 <__malloc_unlock>
 800506a:	4630      	mov	r0, r6
 800506c:	b003      	add	sp, #12
 800506e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005072:	f021 0103 	bic.w	r1, r1, #3
 8005076:	4421      	add	r1, r4
 8005078:	4291      	cmp	r1, r2
 800507a:	db21      	blt.n	80050c0 <_realloc_r+0x19c>
 800507c:	68c3      	ldr	r3, [r0, #12]
 800507e:	6882      	ldr	r2, [r0, #8]
 8005080:	460c      	mov	r4, r1
 8005082:	60d3      	str	r3, [r2, #12]
 8005084:	609a      	str	r2, [r3, #8]
 8005086:	e7de      	b.n	8005046 <_realloc_r+0x122>
 8005088:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800508c:	eb08 0105 	add.w	r1, r8, r5
 8005090:	f002 0201 	and.w	r2, r2, #1
 8005094:	4315      	orrs	r5, r2
 8005096:	f043 0201 	orr.w	r2, r3, #1
 800509a:	440b      	add	r3, r1
 800509c:	f8c8 5004 	str.w	r5, [r8, #4]
 80050a0:	604a      	str	r2, [r1, #4]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	f042 0201 	orr.w	r2, r2, #1
 80050a8:	3108      	adds	r1, #8
 80050aa:	605a      	str	r2, [r3, #4]
 80050ac:	4648      	mov	r0, r9
 80050ae:	f7fe fad7 	bl	8003660 <_free_r>
 80050b2:	e7d7      	b.n	8005064 <_realloc_r+0x140>
 80050b4:	4611      	mov	r1, r2
 80050b6:	b003      	add	sp, #12
 80050b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	f7fe be4e 	b.w	8003d5c <_malloc_r>
 80050c0:	f01e 0f01 	tst.w	lr, #1
 80050c4:	f47f af5a 	bne.w	8004f7c <_realloc_r+0x58>
 80050c8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80050cc:	ebc3 0a08 	rsb	sl, r3, r8
 80050d0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80050d4:	f023 0c03 	bic.w	ip, r3, #3
 80050d8:	eb01 0e0c 	add.w	lr, r1, ip
 80050dc:	4596      	cmp	lr, r2
 80050de:	db8b      	blt.n	8004ff8 <_realloc_r+0xd4>
 80050e0:	68c3      	ldr	r3, [r0, #12]
 80050e2:	6882      	ldr	r2, [r0, #8]
 80050e4:	4657      	mov	r7, sl
 80050e6:	60d3      	str	r3, [r2, #12]
 80050e8:	609a      	str	r2, [r3, #8]
 80050ea:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80050ee:	f8da 300c 	ldr.w	r3, [sl, #12]
 80050f2:	60cb      	str	r3, [r1, #12]
 80050f4:	1f22      	subs	r2, r4, #4
 80050f6:	2a24      	cmp	r2, #36	; 0x24
 80050f8:	6099      	str	r1, [r3, #8]
 80050fa:	f200 8099 	bhi.w	8005230 <_realloc_r+0x30c>
 80050fe:	2a13      	cmp	r2, #19
 8005100:	d962      	bls.n	80051c8 <_realloc_r+0x2a4>
 8005102:	6833      	ldr	r3, [r6, #0]
 8005104:	f8ca 3008 	str.w	r3, [sl, #8]
 8005108:	6873      	ldr	r3, [r6, #4]
 800510a:	f8ca 300c 	str.w	r3, [sl, #12]
 800510e:	2a1b      	cmp	r2, #27
 8005110:	f200 80a0 	bhi.w	8005254 <_realloc_r+0x330>
 8005114:	3608      	adds	r6, #8
 8005116:	f10a 0310 	add.w	r3, sl, #16
 800511a:	e056      	b.n	80051ca <_realloc_r+0x2a6>
 800511c:	f021 0b03 	bic.w	fp, r1, #3
 8005120:	44a3      	add	fp, r4
 8005122:	f105 0010 	add.w	r0, r5, #16
 8005126:	4583      	cmp	fp, r0
 8005128:	da59      	bge.n	80051de <_realloc_r+0x2ba>
 800512a:	f01e 0f01 	tst.w	lr, #1
 800512e:	f47f af25 	bne.w	8004f7c <_realloc_r+0x58>
 8005132:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8005136:	ebc1 0a08 	rsb	sl, r1, r8
 800513a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800513e:	f021 0c03 	bic.w	ip, r1, #3
 8005142:	44e3      	add	fp, ip
 8005144:	4558      	cmp	r0, fp
 8005146:	f73f af57 	bgt.w	8004ff8 <_realloc_r+0xd4>
 800514a:	4657      	mov	r7, sl
 800514c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005150:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8005154:	1f22      	subs	r2, r4, #4
 8005156:	2a24      	cmp	r2, #36	; 0x24
 8005158:	60c1      	str	r1, [r0, #12]
 800515a:	6088      	str	r0, [r1, #8]
 800515c:	f200 80b4 	bhi.w	80052c8 <_realloc_r+0x3a4>
 8005160:	2a13      	cmp	r2, #19
 8005162:	f240 80a5 	bls.w	80052b0 <_realloc_r+0x38c>
 8005166:	6831      	ldr	r1, [r6, #0]
 8005168:	f8ca 1008 	str.w	r1, [sl, #8]
 800516c:	6871      	ldr	r1, [r6, #4]
 800516e:	f8ca 100c 	str.w	r1, [sl, #12]
 8005172:	2a1b      	cmp	r2, #27
 8005174:	f200 80af 	bhi.w	80052d6 <_realloc_r+0x3b2>
 8005178:	3608      	adds	r6, #8
 800517a:	f10a 0210 	add.w	r2, sl, #16
 800517e:	6831      	ldr	r1, [r6, #0]
 8005180:	6011      	str	r1, [r2, #0]
 8005182:	6871      	ldr	r1, [r6, #4]
 8005184:	6051      	str	r1, [r2, #4]
 8005186:	68b1      	ldr	r1, [r6, #8]
 8005188:	6091      	str	r1, [r2, #8]
 800518a:	eb0a 0105 	add.w	r1, sl, r5
 800518e:	ebc5 020b 	rsb	r2, r5, fp
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	6099      	str	r1, [r3, #8]
 8005198:	604a      	str	r2, [r1, #4]
 800519a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	431d      	orrs	r5, r3
 80051a4:	4648      	mov	r0, r9
 80051a6:	f8ca 5004 	str.w	r5, [sl, #4]
 80051aa:	f7ff f9e1 	bl	8004570 <__malloc_unlock>
 80051ae:	4638      	mov	r0, r7
 80051b0:	e75c      	b.n	800506c <_realloc_r+0x148>
 80051b2:	6833      	ldr	r3, [r6, #0]
 80051b4:	6003      	str	r3, [r0, #0]
 80051b6:	6873      	ldr	r3, [r6, #4]
 80051b8:	6043      	str	r3, [r0, #4]
 80051ba:	2a1b      	cmp	r2, #27
 80051bc:	d827      	bhi.n	800520e <_realloc_r+0x2ea>
 80051be:	f100 0308 	add.w	r3, r0, #8
 80051c2:	f106 0208 	add.w	r2, r6, #8
 80051c6:	e6f2      	b.n	8004fae <_realloc_r+0x8a>
 80051c8:	463b      	mov	r3, r7
 80051ca:	6832      	ldr	r2, [r6, #0]
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	6872      	ldr	r2, [r6, #4]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	68b2      	ldr	r2, [r6, #8]
 80051d4:	609a      	str	r2, [r3, #8]
 80051d6:	463e      	mov	r6, r7
 80051d8:	4674      	mov	r4, lr
 80051da:	46d0      	mov	r8, sl
 80051dc:	e733      	b.n	8005046 <_realloc_r+0x122>
 80051de:	eb08 0105 	add.w	r1, r8, r5
 80051e2:	ebc5 0b0b 	rsb	fp, r5, fp
 80051e6:	f04b 0201 	orr.w	r2, fp, #1
 80051ea:	6099      	str	r1, [r3, #8]
 80051ec:	604a      	str	r2, [r1, #4]
 80051ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	431d      	orrs	r5, r3
 80051f8:	4648      	mov	r0, r9
 80051fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80051fe:	f7ff f9b7 	bl	8004570 <__malloc_unlock>
 8005202:	4630      	mov	r0, r6
 8005204:	e732      	b.n	800506c <_realloc_r+0x148>
 8005206:	4631      	mov	r1, r6
 8005208:	f7ff f94c 	bl	80044a4 <memmove>
 800520c:	e6d5      	b.n	8004fba <_realloc_r+0x96>
 800520e:	68b3      	ldr	r3, [r6, #8]
 8005210:	6083      	str	r3, [r0, #8]
 8005212:	68f3      	ldr	r3, [r6, #12]
 8005214:	60c3      	str	r3, [r0, #12]
 8005216:	2a24      	cmp	r2, #36	; 0x24
 8005218:	d028      	beq.n	800526c <_realloc_r+0x348>
 800521a:	f100 0310 	add.w	r3, r0, #16
 800521e:	f106 0210 	add.w	r2, r6, #16
 8005222:	e6c4      	b.n	8004fae <_realloc_r+0x8a>
 8005224:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005228:	f023 0303 	bic.w	r3, r3, #3
 800522c:	441c      	add	r4, r3
 800522e:	e70a      	b.n	8005046 <_realloc_r+0x122>
 8005230:	4631      	mov	r1, r6
 8005232:	4638      	mov	r0, r7
 8005234:	4674      	mov	r4, lr
 8005236:	46d0      	mov	r8, sl
 8005238:	f7ff f934 	bl	80044a4 <memmove>
 800523c:	463e      	mov	r6, r7
 800523e:	e702      	b.n	8005046 <_realloc_r+0x122>
 8005240:	463a      	mov	r2, r7
 8005242:	e6f7      	b.n	8005034 <_realloc_r+0x110>
 8005244:	4631      	mov	r1, r6
 8005246:	4638      	mov	r0, r7
 8005248:	461c      	mov	r4, r3
 800524a:	46d0      	mov	r8, sl
 800524c:	f7ff f92a 	bl	80044a4 <memmove>
 8005250:	463e      	mov	r6, r7
 8005252:	e6f8      	b.n	8005046 <_realloc_r+0x122>
 8005254:	68b3      	ldr	r3, [r6, #8]
 8005256:	f8ca 3010 	str.w	r3, [sl, #16]
 800525a:	68f3      	ldr	r3, [r6, #12]
 800525c:	f8ca 3014 	str.w	r3, [sl, #20]
 8005260:	2a24      	cmp	r2, #36	; 0x24
 8005262:	d01b      	beq.n	800529c <_realloc_r+0x378>
 8005264:	3610      	adds	r6, #16
 8005266:	f10a 0318 	add.w	r3, sl, #24
 800526a:	e7ae      	b.n	80051ca <_realloc_r+0x2a6>
 800526c:	6933      	ldr	r3, [r6, #16]
 800526e:	6103      	str	r3, [r0, #16]
 8005270:	6973      	ldr	r3, [r6, #20]
 8005272:	6143      	str	r3, [r0, #20]
 8005274:	f106 0218 	add.w	r2, r6, #24
 8005278:	f100 0318 	add.w	r3, r0, #24
 800527c:	e697      	b.n	8004fae <_realloc_r+0x8a>
 800527e:	bf00      	nop
 8005280:	200004b4 	.word	0x200004b4
 8005284:	68b1      	ldr	r1, [r6, #8]
 8005286:	f8ca 1010 	str.w	r1, [sl, #16]
 800528a:	68f1      	ldr	r1, [r6, #12]
 800528c:	f8ca 1014 	str.w	r1, [sl, #20]
 8005290:	2a24      	cmp	r2, #36	; 0x24
 8005292:	d00f      	beq.n	80052b4 <_realloc_r+0x390>
 8005294:	3610      	adds	r6, #16
 8005296:	f10a 0218 	add.w	r2, sl, #24
 800529a:	e6cb      	b.n	8005034 <_realloc_r+0x110>
 800529c:	6933      	ldr	r3, [r6, #16]
 800529e:	f8ca 3018 	str.w	r3, [sl, #24]
 80052a2:	6973      	ldr	r3, [r6, #20]
 80052a4:	f8ca 301c 	str.w	r3, [sl, #28]
 80052a8:	3618      	adds	r6, #24
 80052aa:	f10a 0320 	add.w	r3, sl, #32
 80052ae:	e78c      	b.n	80051ca <_realloc_r+0x2a6>
 80052b0:	463a      	mov	r2, r7
 80052b2:	e764      	b.n	800517e <_realloc_r+0x25a>
 80052b4:	6932      	ldr	r2, [r6, #16]
 80052b6:	f8ca 2018 	str.w	r2, [sl, #24]
 80052ba:	6972      	ldr	r2, [r6, #20]
 80052bc:	f8ca 201c 	str.w	r2, [sl, #28]
 80052c0:	3618      	adds	r6, #24
 80052c2:	f10a 0220 	add.w	r2, sl, #32
 80052c6:	e6b5      	b.n	8005034 <_realloc_r+0x110>
 80052c8:	4631      	mov	r1, r6
 80052ca:	4638      	mov	r0, r7
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	f7ff f8e9 	bl	80044a4 <memmove>
 80052d2:	9b01      	ldr	r3, [sp, #4]
 80052d4:	e759      	b.n	800518a <_realloc_r+0x266>
 80052d6:	68b1      	ldr	r1, [r6, #8]
 80052d8:	f8ca 1010 	str.w	r1, [sl, #16]
 80052dc:	68f1      	ldr	r1, [r6, #12]
 80052de:	f8ca 1014 	str.w	r1, [sl, #20]
 80052e2:	2a24      	cmp	r2, #36	; 0x24
 80052e4:	d003      	beq.n	80052ee <_realloc_r+0x3ca>
 80052e6:	3610      	adds	r6, #16
 80052e8:	f10a 0218 	add.w	r2, sl, #24
 80052ec:	e747      	b.n	800517e <_realloc_r+0x25a>
 80052ee:	6932      	ldr	r2, [r6, #16]
 80052f0:	f8ca 2018 	str.w	r2, [sl, #24]
 80052f4:	6972      	ldr	r2, [r6, #20]
 80052f6:	f8ca 201c 	str.w	r2, [sl, #28]
 80052fa:	3618      	adds	r6, #24
 80052fc:	f10a 0220 	add.w	r2, sl, #32
 8005300:	e73d      	b.n	800517e <_realloc_r+0x25a>
 8005302:	bf00      	nop

08005304 <__sread>:
 8005304:	b510      	push	{r4, lr}
 8005306:	460c      	mov	r4, r1
 8005308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530c:	f002 fe24 	bl	8007f58 <_read_r>
 8005310:	2800      	cmp	r0, #0
 8005312:	db03      	blt.n	800531c <__sread+0x18>
 8005314:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005316:	4403      	add	r3, r0
 8005318:	6523      	str	r3, [r4, #80]	; 0x50
 800531a:	bd10      	pop	{r4, pc}
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005322:	81a3      	strh	r3, [r4, #12]
 8005324:	bd10      	pop	{r4, pc}
 8005326:	bf00      	nop

08005328 <__seofread>:
 8005328:	2000      	movs	r0, #0
 800532a:	4770      	bx	lr

0800532c <__swrite>:
 800532c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005330:	4616      	mov	r6, r2
 8005332:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005336:	461f      	mov	r7, r3
 8005338:	05d3      	lsls	r3, r2, #23
 800533a:	460c      	mov	r4, r1
 800533c:	4605      	mov	r5, r0
 800533e:	d507      	bpl.n	8005350 <__swrite+0x24>
 8005340:	2200      	movs	r2, #0
 8005342:	2302      	movs	r3, #2
 8005344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005348:	f002 fd3c 	bl	8007dc4 <_lseek_r>
 800534c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005354:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005358:	81a2      	strh	r2, [r4, #12]
 800535a:	463b      	mov	r3, r7
 800535c:	4632      	mov	r2, r6
 800535e:	4628      	mov	r0, r5
 8005360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005364:	f002 be82 	b.w	800806c <_write_r>

08005368 <__sseek>:
 8005368:	b510      	push	{r4, lr}
 800536a:	460c      	mov	r4, r1
 800536c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005370:	f002 fd28 	bl	8007dc4 <_lseek_r>
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	1c42      	adds	r2, r0, #1
 8005378:	bf0e      	itee	eq
 800537a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800537e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005382:	6520      	strne	r0, [r4, #80]	; 0x50
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	bd10      	pop	{r4, pc}

08005388 <__sclose>:
 8005388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538c:	f002 bd10 	b.w	8007db0 <_close_r>
	...
 80053a0:	eba2 0003 	sub.w	r0, r2, r3
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop

080053a8 <strcmp>:
 80053a8:	7802      	ldrb	r2, [r0, #0]
 80053aa:	780b      	ldrb	r3, [r1, #0]
 80053ac:	2a01      	cmp	r2, #1
 80053ae:	bf28      	it	cs
 80053b0:	429a      	cmpcs	r2, r3
 80053b2:	d1f5      	bne.n	80053a0 <__sclose+0x18>
 80053b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 80053b8:	ea40 0401 	orr.w	r4, r0, r1
 80053bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80053c0:	f06f 0c00 	mvn.w	ip, #0
 80053c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 80053c8:	b312      	cbz	r2, 8005410 <strcmp+0x68>
 80053ca:	ea80 0401 	eor.w	r4, r0, r1
 80053ce:	f014 0f07 	tst.w	r4, #7
 80053d2:	d16a      	bne.n	80054aa <strcmp+0x102>
 80053d4:	f000 0407 	and.w	r4, r0, #7
 80053d8:	f020 0007 	bic.w	r0, r0, #7
 80053dc:	f004 0503 	and.w	r5, r4, #3
 80053e0:	f021 0107 	bic.w	r1, r1, #7
 80053e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80053e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80053ec:	f014 0f04 	tst.w	r4, #4
 80053f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80053f4:	fa0c f405 	lsl.w	r4, ip, r5
 80053f8:	ea62 0204 	orn	r2, r2, r4
 80053fc:	ea66 0604 	orn	r6, r6, r4
 8005400:	d00a      	beq.n	8005418 <strcmp+0x70>
 8005402:	ea63 0304 	orn	r3, r3, r4
 8005406:	4662      	mov	r2, ip
 8005408:	ea67 0704 	orn	r7, r7, r4
 800540c:	4666      	mov	r6, ip
 800540e:	e003      	b.n	8005418 <strcmp+0x70>
 8005410:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8005414:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8005418:	fa82 f54c 	uadd8	r5, r2, ip
 800541c:	ea82 0406 	eor.w	r4, r2, r6
 8005420:	faa4 f48c 	sel	r4, r4, ip
 8005424:	bb6c      	cbnz	r4, 8005482 <strcmp+0xda>
 8005426:	fa83 f54c 	uadd8	r5, r3, ip
 800542a:	ea83 0507 	eor.w	r5, r3, r7
 800542e:	faa5 f58c 	sel	r5, r5, ip
 8005432:	b995      	cbnz	r5, 800545a <strcmp+0xb2>
 8005434:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8005438:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800543c:	fa82 f54c 	uadd8	r5, r2, ip
 8005440:	ea82 0406 	eor.w	r4, r2, r6
 8005444:	faa4 f48c 	sel	r4, r4, ip
 8005448:	fa83 f54c 	uadd8	r5, r3, ip
 800544c:	ea83 0507 	eor.w	r5, r3, r7
 8005450:	faa5 f58c 	sel	r5, r5, ip
 8005454:	4325      	orrs	r5, r4
 8005456:	d0db      	beq.n	8005410 <strcmp+0x68>
 8005458:	b99c      	cbnz	r4, 8005482 <strcmp+0xda>
 800545a:	ba2d      	rev	r5, r5
 800545c:	fab5 f485 	clz	r4, r5
 8005460:	f024 0407 	bic.w	r4, r4, #7
 8005464:	fa27 f104 	lsr.w	r1, r7, r4
 8005468:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800546c:	fa23 f304 	lsr.w	r3, r3, r4
 8005470:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005474:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005478:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800547c:	eba0 0001 	sub.w	r0, r0, r1
 8005480:	4770      	bx	lr
 8005482:	ba24      	rev	r4, r4
 8005484:	fab4 f484 	clz	r4, r4
 8005488:	f024 0407 	bic.w	r4, r4, #7
 800548c:	fa26 f104 	lsr.w	r1, r6, r4
 8005490:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005494:	fa22 f204 	lsr.w	r2, r2, r4
 8005498:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800549c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80054a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80054a4:	eba0 0001 	sub.w	r0, r0, r1
 80054a8:	4770      	bx	lr
 80054aa:	f014 0f03 	tst.w	r4, #3
 80054ae:	d13c      	bne.n	800552a <strcmp+0x182>
 80054b0:	f010 0403 	ands.w	r4, r0, #3
 80054b4:	d128      	bne.n	8005508 <strcmp+0x160>
 80054b6:	f850 2b08 	ldr.w	r2, [r0], #8
 80054ba:	f851 3b08 	ldr.w	r3, [r1], #8
 80054be:	fa82 f54c 	uadd8	r5, r2, ip
 80054c2:	ea82 0503 	eor.w	r5, r2, r3
 80054c6:	faa5 f58c 	sel	r5, r5, ip
 80054ca:	b95d      	cbnz	r5, 80054e4 <strcmp+0x13c>
 80054cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80054d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d4:	fa82 f54c 	uadd8	r5, r2, ip
 80054d8:	ea82 0503 	eor.w	r5, r2, r3
 80054dc:	faa5 f58c 	sel	r5, r5, ip
 80054e0:	2d00      	cmp	r5, #0
 80054e2:	d0e8      	beq.n	80054b6 <strcmp+0x10e>
 80054e4:	ba2d      	rev	r5, r5
 80054e6:	fab5 f485 	clz	r4, r5
 80054ea:	f024 0407 	bic.w	r4, r4, #7
 80054ee:	fa23 f104 	lsr.w	r1, r3, r4
 80054f2:	fa22 f204 	lsr.w	r2, r2, r4
 80054f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80054fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80054fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005502:	eba0 0001 	sub.w	r0, r0, r1
 8005506:	4770      	bx	lr
 8005508:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800550c:	f020 0003 	bic.w	r0, r0, #3
 8005510:	f850 2b08 	ldr.w	r2, [r0], #8
 8005514:	f021 0103 	bic.w	r1, r1, #3
 8005518:	f851 3b08 	ldr.w	r3, [r1], #8
 800551c:	fa0c f404 	lsl.w	r4, ip, r4
 8005520:	ea62 0204 	orn	r2, r2, r4
 8005524:	ea63 0304 	orn	r3, r3, r4
 8005528:	e7c9      	b.n	80054be <strcmp+0x116>
 800552a:	f010 0403 	ands.w	r4, r0, #3
 800552e:	d01a      	beq.n	8005566 <strcmp+0x1be>
 8005530:	eba1 0104 	sub.w	r1, r1, r4
 8005534:	f020 0003 	bic.w	r0, r0, #3
 8005538:	07e4      	lsls	r4, r4, #31
 800553a:	f850 2b04 	ldr.w	r2, [r0], #4
 800553e:	d006      	beq.n	800554e <strcmp+0x1a6>
 8005540:	d20f      	bcs.n	8005562 <strcmp+0x1ba>
 8005542:	788b      	ldrb	r3, [r1, #2]
 8005544:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8005548:	1ae4      	subs	r4, r4, r3
 800554a:	d106      	bne.n	800555a <strcmp+0x1b2>
 800554c:	b12b      	cbz	r3, 800555a <strcmp+0x1b2>
 800554e:	78cb      	ldrb	r3, [r1, #3]
 8005550:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8005554:	1ae4      	subs	r4, r4, r3
 8005556:	d100      	bne.n	800555a <strcmp+0x1b2>
 8005558:	b91b      	cbnz	r3, 8005562 <strcmp+0x1ba>
 800555a:	4620      	mov	r0, r4
 800555c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8005560:	4770      	bx	lr
 8005562:	f101 0104 	add.w	r1, r1, #4
 8005566:	f850 2b04 	ldr.w	r2, [r0], #4
 800556a:	07cc      	lsls	r4, r1, #31
 800556c:	f021 0103 	bic.w	r1, r1, #3
 8005570:	f851 3b04 	ldr.w	r3, [r1], #4
 8005574:	d848      	bhi.n	8005608 <strcmp+0x260>
 8005576:	d224      	bcs.n	80055c2 <strcmp+0x21a>
 8005578:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800557c:	fa82 f54c 	uadd8	r5, r2, ip
 8005580:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8005584:	faa5 f58c 	sel	r5, r5, ip
 8005588:	d10a      	bne.n	80055a0 <strcmp+0x1f8>
 800558a:	b965      	cbnz	r5, 80055a6 <strcmp+0x1fe>
 800558c:	f851 3b04 	ldr.w	r3, [r1], #4
 8005590:	ea84 0402 	eor.w	r4, r4, r2
 8005594:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8005598:	d10e      	bne.n	80055b8 <strcmp+0x210>
 800559a:	f850 2b04 	ldr.w	r2, [r0], #4
 800559e:	e7eb      	b.n	8005578 <strcmp+0x1d0>
 80055a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80055a4:	e055      	b.n	8005652 <strcmp+0x2aa>
 80055a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80055aa:	d14d      	bne.n	8005648 <strcmp+0x2a0>
 80055ac:	7808      	ldrb	r0, [r1, #0]
 80055ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80055b2:	f1c0 0000 	rsb	r0, r0, #0
 80055b6:	4770      	bx	lr
 80055b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80055bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80055c0:	e047      	b.n	8005652 <strcmp+0x2aa>
 80055c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 80055c6:	fa82 f54c 	uadd8	r5, r2, ip
 80055ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 80055ce:	faa5 f58c 	sel	r5, r5, ip
 80055d2:	d10a      	bne.n	80055ea <strcmp+0x242>
 80055d4:	b965      	cbnz	r5, 80055f0 <strcmp+0x248>
 80055d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80055da:	ea84 0402 	eor.w	r4, r4, r2
 80055de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 80055e2:	d10c      	bne.n	80055fe <strcmp+0x256>
 80055e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80055e8:	e7eb      	b.n	80055c2 <strcmp+0x21a>
 80055ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80055ee:	e030      	b.n	8005652 <strcmp+0x2aa>
 80055f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 80055f4:	d128      	bne.n	8005648 <strcmp+0x2a0>
 80055f6:	880b      	ldrh	r3, [r1, #0]
 80055f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80055fc:	e029      	b.n	8005652 <strcmp+0x2aa>
 80055fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8005602:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8005606:	e024      	b.n	8005652 <strcmp+0x2aa>
 8005608:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800560c:	fa82 f54c 	uadd8	r5, r2, ip
 8005610:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8005614:	faa5 f58c 	sel	r5, r5, ip
 8005618:	d10a      	bne.n	8005630 <strcmp+0x288>
 800561a:	b965      	cbnz	r5, 8005636 <strcmp+0x28e>
 800561c:	f851 3b04 	ldr.w	r3, [r1], #4
 8005620:	ea84 0402 	eor.w	r4, r4, r2
 8005624:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8005628:	d109      	bne.n	800563e <strcmp+0x296>
 800562a:	f850 2b04 	ldr.w	r2, [r0], #4
 800562e:	e7eb      	b.n	8005608 <strcmp+0x260>
 8005630:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8005634:	e00d      	b.n	8005652 <strcmp+0x2aa>
 8005636:	f015 0fff 	tst.w	r5, #255	; 0xff
 800563a:	d105      	bne.n	8005648 <strcmp+0x2a0>
 800563c:	680b      	ldr	r3, [r1, #0]
 800563e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8005642:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005646:	e004      	b.n	8005652 <strcmp+0x2aa>
 8005648:	f04f 0000 	mov.w	r0, #0
 800564c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005650:	4770      	bx	lr
 8005652:	ba12      	rev	r2, r2
 8005654:	ba1b      	rev	r3, r3
 8005656:	fa82 f44c 	uadd8	r4, r2, ip
 800565a:	ea82 0403 	eor.w	r4, r2, r3
 800565e:	faa4 f58c 	sel	r5, r4, ip
 8005662:	fab5 f485 	clz	r4, r5
 8005666:	fa02 f204 	lsl.w	r2, r2, r4
 800566a:	fa03 f304 	lsl.w	r3, r3, r4
 800566e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8005672:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005676:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800567a:	4770      	bx	lr

0800567c <__sprint_r.part.0>:
 800567c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800567e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005682:	049c      	lsls	r4, r3, #18
 8005684:	4692      	mov	sl, r2
 8005686:	d52c      	bpl.n	80056e2 <__sprint_r.part.0+0x66>
 8005688:	6893      	ldr	r3, [r2, #8]
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	b33b      	cbz	r3, 80056de <__sprint_r.part.0+0x62>
 800568e:	460f      	mov	r7, r1
 8005690:	4680      	mov	r8, r0
 8005692:	f102 0908 	add.w	r9, r2, #8
 8005696:	e919 0060 	ldmdb	r9, {r5, r6}
 800569a:	08b6      	lsrs	r6, r6, #2
 800569c:	d017      	beq.n	80056ce <__sprint_r.part.0+0x52>
 800569e:	3d04      	subs	r5, #4
 80056a0:	2400      	movs	r4, #0
 80056a2:	e001      	b.n	80056a8 <__sprint_r.part.0+0x2c>
 80056a4:	42a6      	cmp	r6, r4
 80056a6:	d010      	beq.n	80056ca <__sprint_r.part.0+0x4e>
 80056a8:	463a      	mov	r2, r7
 80056aa:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80056ae:	4640      	mov	r0, r8
 80056b0:	f001 f88e 	bl	80067d0 <_fputwc_r>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	f104 0401 	add.w	r4, r4, #1
 80056ba:	d1f3      	bne.n	80056a4 <__sprint_r.part.0+0x28>
 80056bc:	2300      	movs	r3, #0
 80056be:	f8ca 3008 	str.w	r3, [sl, #8]
 80056c2:	f8ca 3004 	str.w	r3, [sl, #4]
 80056c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ca:	f8da 3008 	ldr.w	r3, [sl, #8]
 80056ce:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 80056d2:	f8ca 3008 	str.w	r3, [sl, #8]
 80056d6:	f109 0908 	add.w	r9, r9, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1db      	bne.n	8005696 <__sprint_r.part.0+0x1a>
 80056de:	2000      	movs	r0, #0
 80056e0:	e7ec      	b.n	80056bc <__sprint_r.part.0+0x40>
 80056e2:	f7fe f8a5 	bl	8003830 <__sfvwrite_r>
 80056e6:	2300      	movs	r3, #0
 80056e8:	f8ca 3008 	str.w	r3, [sl, #8]
 80056ec:	f8ca 3004 	str.w	r3, [sl, #4]
 80056f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080056f4 <__sprint_r>:
 80056f4:	6893      	ldr	r3, [r2, #8]
 80056f6:	b103      	cbz	r3, 80056fa <__sprint_r+0x6>
 80056f8:	e7c0      	b.n	800567c <__sprint_r.part.0>
 80056fa:	b410      	push	{r4}
 80056fc:	4618      	mov	r0, r3
 80056fe:	6053      	str	r3, [r2, #4]
 8005700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop

08005708 <_vfiprintf_r>:
 8005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570c:	b0ab      	sub	sp, #172	; 0xac
 800570e:	461c      	mov	r4, r3
 8005710:	9100      	str	r1, [sp, #0]
 8005712:	4690      	mov	r8, r2
 8005714:	9304      	str	r3, [sp, #16]
 8005716:	9005      	str	r0, [sp, #20]
 8005718:	b118      	cbz	r0, 8005722 <_vfiprintf_r+0x1a>
 800571a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80de 	beq.w	80058de <_vfiprintf_r+0x1d6>
 8005722:	9800      	ldr	r0, [sp, #0]
 8005724:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8005728:	b28a      	uxth	r2, r1
 800572a:	0495      	lsls	r5, r2, #18
 800572c:	d407      	bmi.n	800573e <_vfiprintf_r+0x36>
 800572e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005730:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8005734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005738:	8182      	strh	r2, [r0, #12]
 800573a:	6643      	str	r3, [r0, #100]	; 0x64
 800573c:	b292      	uxth	r2, r2
 800573e:	0711      	lsls	r1, r2, #28
 8005740:	f140 80b1 	bpl.w	80058a6 <_vfiprintf_r+0x19e>
 8005744:	9b00      	ldr	r3, [sp, #0]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 80ac 	beq.w	80058a6 <_vfiprintf_r+0x19e>
 800574e:	f002 021a 	and.w	r2, r2, #26
 8005752:	2a0a      	cmp	r2, #10
 8005754:	f000 80b5 	beq.w	80058c2 <_vfiprintf_r+0x1ba>
 8005758:	2300      	movs	r3, #0
 800575a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800575e:	9302      	str	r3, [sp, #8]
 8005760:	930f      	str	r3, [sp, #60]	; 0x3c
 8005762:	930e      	str	r3, [sp, #56]	; 0x38
 8005764:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8005768:	46da      	mov	sl, fp
 800576a:	f898 3000 	ldrb.w	r3, [r8]
 800576e:	4644      	mov	r4, r8
 8005770:	b1fb      	cbz	r3, 80057b2 <_vfiprintf_r+0xaa>
 8005772:	2b25      	cmp	r3, #37	; 0x25
 8005774:	d102      	bne.n	800577c <_vfiprintf_r+0x74>
 8005776:	e01c      	b.n	80057b2 <_vfiprintf_r+0xaa>
 8005778:	2b25      	cmp	r3, #37	; 0x25
 800577a:	d003      	beq.n	8005784 <_vfiprintf_r+0x7c>
 800577c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f9      	bne.n	8005778 <_vfiprintf_r+0x70>
 8005784:	ebc8 0504 	rsb	r5, r8, r4
 8005788:	b19d      	cbz	r5, 80057b2 <_vfiprintf_r+0xaa>
 800578a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800578c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800578e:	f8ca 8000 	str.w	r8, [sl]
 8005792:	3301      	adds	r3, #1
 8005794:	442a      	add	r2, r5
 8005796:	2b07      	cmp	r3, #7
 8005798:	f8ca 5004 	str.w	r5, [sl, #4]
 800579c:	920f      	str	r2, [sp, #60]	; 0x3c
 800579e:	930e      	str	r3, [sp, #56]	; 0x38
 80057a0:	dd7b      	ble.n	800589a <_vfiprintf_r+0x192>
 80057a2:	2a00      	cmp	r2, #0
 80057a4:	f040 8528 	bne.w	80061f8 <_vfiprintf_r+0xaf0>
 80057a8:	9b02      	ldr	r3, [sp, #8]
 80057aa:	920e      	str	r2, [sp, #56]	; 0x38
 80057ac:	442b      	add	r3, r5
 80057ae:	46da      	mov	sl, fp
 80057b0:	9302      	str	r3, [sp, #8]
 80057b2:	7823      	ldrb	r3, [r4, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 843e 	beq.w	8006036 <_vfiprintf_r+0x92e>
 80057ba:	2100      	movs	r1, #0
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80057c8:	f104 0801 	add.w	r8, r4, #1
 80057cc:	7863      	ldrb	r3, [r4, #1]
 80057ce:	9201      	str	r2, [sp, #4]
 80057d0:	4608      	mov	r0, r1
 80057d2:	460e      	mov	r6, r1
 80057d4:	460c      	mov	r4, r1
 80057d6:	f108 0801 	add.w	r8, r8, #1
 80057da:	f1a3 0220 	sub.w	r2, r3, #32
 80057de:	2a58      	cmp	r2, #88	; 0x58
 80057e0:	f200 8393 	bhi.w	8005f0a <_vfiprintf_r+0x802>
 80057e4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80057e8:	03910346 	.word	0x03910346
 80057ec:	034e0391 	.word	0x034e0391
 80057f0:	03910391 	.word	0x03910391
 80057f4:	03910391 	.word	0x03910391
 80057f8:	03910391 	.word	0x03910391
 80057fc:	02670289 	.word	0x02670289
 8005800:	00800391 	.word	0x00800391
 8005804:	0391026c 	.word	0x0391026c
 8005808:	025901c6 	.word	0x025901c6
 800580c:	02590259 	.word	0x02590259
 8005810:	02590259 	.word	0x02590259
 8005814:	02590259 	.word	0x02590259
 8005818:	02590259 	.word	0x02590259
 800581c:	03910391 	.word	0x03910391
 8005820:	03910391 	.word	0x03910391
 8005824:	03910391 	.word	0x03910391
 8005828:	03910391 	.word	0x03910391
 800582c:	03910391 	.word	0x03910391
 8005830:	039101cb 	.word	0x039101cb
 8005834:	03910391 	.word	0x03910391
 8005838:	03910391 	.word	0x03910391
 800583c:	03910391 	.word	0x03910391
 8005840:	03910391 	.word	0x03910391
 8005844:	02140391 	.word	0x02140391
 8005848:	03910391 	.word	0x03910391
 800584c:	03910391 	.word	0x03910391
 8005850:	02ee0391 	.word	0x02ee0391
 8005854:	03910391 	.word	0x03910391
 8005858:	03910311 	.word	0x03910311
 800585c:	03910391 	.word	0x03910391
 8005860:	03910391 	.word	0x03910391
 8005864:	03910391 	.word	0x03910391
 8005868:	03910391 	.word	0x03910391
 800586c:	03340391 	.word	0x03340391
 8005870:	0391038a 	.word	0x0391038a
 8005874:	03910391 	.word	0x03910391
 8005878:	038a0367 	.word	0x038a0367
 800587c:	03910391 	.word	0x03910391
 8005880:	0391036c 	.word	0x0391036c
 8005884:	02950379 	.word	0x02950379
 8005888:	02e90085 	.word	0x02e90085
 800588c:	029b0391 	.word	0x029b0391
 8005890:	02ba0391 	.word	0x02ba0391
 8005894:	03910391 	.word	0x03910391
 8005898:	0353      	.short	0x0353
 800589a:	f10a 0a08 	add.w	sl, sl, #8
 800589e:	9b02      	ldr	r3, [sp, #8]
 80058a0:	442b      	add	r3, r5
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	e785      	b.n	80057b2 <_vfiprintf_r+0xaa>
 80058a6:	9900      	ldr	r1, [sp, #0]
 80058a8:	9805      	ldr	r0, [sp, #20]
 80058aa:	f7fc fc53 	bl	8002154 <__swsetup_r>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	f040 8558 	bne.w	8006364 <_vfiprintf_r+0xc5c>
 80058b4:	9b00      	ldr	r3, [sp, #0]
 80058b6:	899a      	ldrh	r2, [r3, #12]
 80058b8:	f002 021a 	and.w	r2, r2, #26
 80058bc:	2a0a      	cmp	r2, #10
 80058be:	f47f af4b 	bne.w	8005758 <_vfiprintf_r+0x50>
 80058c2:	9900      	ldr	r1, [sp, #0]
 80058c4:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f6ff af45 	blt.w	8005758 <_vfiprintf_r+0x50>
 80058ce:	4623      	mov	r3, r4
 80058d0:	4642      	mov	r2, r8
 80058d2:	9805      	ldr	r0, [sp, #20]
 80058d4:	f000 fe22 	bl	800651c <__sbprintf>
 80058d8:	b02b      	add	sp, #172	; 0xac
 80058da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058de:	f7fd fe51 	bl	8003584 <__sinit>
 80058e2:	e71e      	b.n	8005722 <_vfiprintf_r+0x1a>
 80058e4:	4264      	negs	r4, r4
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	f046 0604 	orr.w	r6, r6, #4
 80058ec:	f898 3000 	ldrb.w	r3, [r8]
 80058f0:	e771      	b.n	80057d6 <_vfiprintf_r+0xce>
 80058f2:	2130      	movs	r1, #48	; 0x30
 80058f4:	9804      	ldr	r0, [sp, #16]
 80058f6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 80058fa:	9901      	ldr	r1, [sp, #4]
 80058fc:	9406      	str	r4, [sp, #24]
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	2278      	movs	r2, #120	; 0x78
 8005904:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005908:	2900      	cmp	r1, #0
 800590a:	4603      	mov	r3, r0
 800590c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8005910:	6804      	ldr	r4, [r0, #0]
 8005912:	f103 0304 	add.w	r3, r3, #4
 8005916:	f04f 0500 	mov.w	r5, #0
 800591a:	f046 0202 	orr.w	r2, r6, #2
 800591e:	f2c0 8525 	blt.w	800636c <_vfiprintf_r+0xc64>
 8005922:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8005926:	ea54 0205 	orrs.w	r2, r4, r5
 800592a:	f046 0602 	orr.w	r6, r6, #2
 800592e:	9304      	str	r3, [sp, #16]
 8005930:	f040 84bf 	bne.w	80062b2 <_vfiprintf_r+0xbaa>
 8005934:	48b3      	ldr	r0, [pc, #716]	; (8005c04 <_vfiprintf_r+0x4fc>)
 8005936:	9b01      	ldr	r3, [sp, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	f040 841c 	bne.w	8006176 <_vfiprintf_r+0xa6e>
 800593e:	4699      	mov	r9, r3
 8005940:	2300      	movs	r3, #0
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	9303      	str	r3, [sp, #12]
 8005946:	465f      	mov	r7, fp
 8005948:	9b01      	ldr	r3, [sp, #4]
 800594a:	9a03      	ldr	r2, [sp, #12]
 800594c:	4293      	cmp	r3, r2
 800594e:	bfb8      	it	lt
 8005950:	4613      	movlt	r3, r2
 8005952:	461d      	mov	r5, r3
 8005954:	f1b9 0f00 	cmp.w	r9, #0
 8005958:	d000      	beq.n	800595c <_vfiprintf_r+0x254>
 800595a:	3501      	adds	r5, #1
 800595c:	f016 0302 	ands.w	r3, r6, #2
 8005960:	9307      	str	r3, [sp, #28]
 8005962:	bf18      	it	ne
 8005964:	3502      	addne	r5, #2
 8005966:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 800596a:	9308      	str	r3, [sp, #32]
 800596c:	f040 82f1 	bne.w	8005f52 <_vfiprintf_r+0x84a>
 8005970:	9b06      	ldr	r3, [sp, #24]
 8005972:	1b5c      	subs	r4, r3, r5
 8005974:	2c00      	cmp	r4, #0
 8005976:	f340 82ec 	ble.w	8005f52 <_vfiprintf_r+0x84a>
 800597a:	2c10      	cmp	r4, #16
 800597c:	f340 8556 	ble.w	800642c <_vfiprintf_r+0xd24>
 8005980:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8005c08 <_vfiprintf_r+0x500>
 8005984:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8005988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800598a:	46d4      	mov	ip, sl
 800598c:	2310      	movs	r3, #16
 800598e:	46c2      	mov	sl, r8
 8005990:	4670      	mov	r0, lr
 8005992:	46a8      	mov	r8, r5
 8005994:	464d      	mov	r5, r9
 8005996:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800599a:	e007      	b.n	80059ac <_vfiprintf_r+0x2a4>
 800599c:	f100 0e02 	add.w	lr, r0, #2
 80059a0:	f10c 0c08 	add.w	ip, ip, #8
 80059a4:	4608      	mov	r0, r1
 80059a6:	3c10      	subs	r4, #16
 80059a8:	2c10      	cmp	r4, #16
 80059aa:	dd13      	ble.n	80059d4 <_vfiprintf_r+0x2cc>
 80059ac:	1c41      	adds	r1, r0, #1
 80059ae:	3210      	adds	r2, #16
 80059b0:	2907      	cmp	r1, #7
 80059b2:	920f      	str	r2, [sp, #60]	; 0x3c
 80059b4:	f8cc 5000 	str.w	r5, [ip]
 80059b8:	f8cc 3004 	str.w	r3, [ip, #4]
 80059bc:	910e      	str	r1, [sp, #56]	; 0x38
 80059be:	dded      	ble.n	800599c <_vfiprintf_r+0x294>
 80059c0:	2a00      	cmp	r2, #0
 80059c2:	f040 82b7 	bne.w	8005f34 <_vfiprintf_r+0x82c>
 80059c6:	3c10      	subs	r4, #16
 80059c8:	2c10      	cmp	r4, #16
 80059ca:	4610      	mov	r0, r2
 80059cc:	f04f 0e01 	mov.w	lr, #1
 80059d0:	46dc      	mov	ip, fp
 80059d2:	dceb      	bgt.n	80059ac <_vfiprintf_r+0x2a4>
 80059d4:	46a9      	mov	r9, r5
 80059d6:	4670      	mov	r0, lr
 80059d8:	4645      	mov	r5, r8
 80059da:	46d0      	mov	r8, sl
 80059dc:	46e2      	mov	sl, ip
 80059de:	4422      	add	r2, r4
 80059e0:	2807      	cmp	r0, #7
 80059e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80059e4:	f8ca 9000 	str.w	r9, [sl]
 80059e8:	f8ca 4004 	str.w	r4, [sl, #4]
 80059ec:	900e      	str	r0, [sp, #56]	; 0x38
 80059ee:	f300 8375 	bgt.w	80060dc <_vfiprintf_r+0x9d4>
 80059f2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80059f6:	f10a 0a08 	add.w	sl, sl, #8
 80059fa:	f100 0e01 	add.w	lr, r0, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f040 82b0 	bne.w	8005f64 <_vfiprintf_r+0x85c>
 8005a04:	9b07      	ldr	r3, [sp, #28]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 82c3 	beq.w	8005f92 <_vfiprintf_r+0x88a>
 8005a0c:	3202      	adds	r2, #2
 8005a0e:	a90c      	add	r1, sp, #48	; 0x30
 8005a10:	2302      	movs	r3, #2
 8005a12:	f1be 0f07 	cmp.w	lr, #7
 8005a16:	920f      	str	r2, [sp, #60]	; 0x3c
 8005a18:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8005a1c:	e88a 000a 	stmia.w	sl, {r1, r3}
 8005a20:	f340 8378 	ble.w	8006114 <_vfiprintf_r+0xa0c>
 8005a24:	2a00      	cmp	r2, #0
 8005a26:	f040 840a 	bne.w	800623e <_vfiprintf_r+0xb36>
 8005a2a:	9b08      	ldr	r3, [sp, #32]
 8005a2c:	2b80      	cmp	r3, #128	; 0x80
 8005a2e:	f04f 0e01 	mov.w	lr, #1
 8005a32:	4610      	mov	r0, r2
 8005a34:	46da      	mov	sl, fp
 8005a36:	f040 82b0 	bne.w	8005f9a <_vfiprintf_r+0x892>
 8005a3a:	9b06      	ldr	r3, [sp, #24]
 8005a3c:	1b5c      	subs	r4, r3, r5
 8005a3e:	2c00      	cmp	r4, #0
 8005a40:	f340 82ab 	ble.w	8005f9a <_vfiprintf_r+0x892>
 8005a44:	2c10      	cmp	r4, #16
 8005a46:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8005c0c <_vfiprintf_r+0x504>
 8005a4a:	f340 850b 	ble.w	8006464 <_vfiprintf_r+0xd5c>
 8005a4e:	46d6      	mov	lr, sl
 8005a50:	2310      	movs	r3, #16
 8005a52:	46c2      	mov	sl, r8
 8005a54:	46a8      	mov	r8, r5
 8005a56:	464d      	mov	r5, r9
 8005a58:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005a5c:	e007      	b.n	8005a6e <_vfiprintf_r+0x366>
 8005a5e:	f100 0c02 	add.w	ip, r0, #2
 8005a62:	f10e 0e08 	add.w	lr, lr, #8
 8005a66:	4608      	mov	r0, r1
 8005a68:	3c10      	subs	r4, #16
 8005a6a:	2c10      	cmp	r4, #16
 8005a6c:	dd13      	ble.n	8005a96 <_vfiprintf_r+0x38e>
 8005a6e:	1c41      	adds	r1, r0, #1
 8005a70:	3210      	adds	r2, #16
 8005a72:	2907      	cmp	r1, #7
 8005a74:	920f      	str	r2, [sp, #60]	; 0x3c
 8005a76:	f8ce 5000 	str.w	r5, [lr]
 8005a7a:	f8ce 3004 	str.w	r3, [lr, #4]
 8005a7e:	910e      	str	r1, [sp, #56]	; 0x38
 8005a80:	dded      	ble.n	8005a5e <_vfiprintf_r+0x356>
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	f040 8315 	bne.w	80060b2 <_vfiprintf_r+0x9aa>
 8005a88:	3c10      	subs	r4, #16
 8005a8a:	2c10      	cmp	r4, #16
 8005a8c:	f04f 0c01 	mov.w	ip, #1
 8005a90:	4610      	mov	r0, r2
 8005a92:	46de      	mov	lr, fp
 8005a94:	dceb      	bgt.n	8005a6e <_vfiprintf_r+0x366>
 8005a96:	46a9      	mov	r9, r5
 8005a98:	4645      	mov	r5, r8
 8005a9a:	46d0      	mov	r8, sl
 8005a9c:	46f2      	mov	sl, lr
 8005a9e:	4422      	add	r2, r4
 8005aa0:	f1bc 0f07 	cmp.w	ip, #7
 8005aa4:	920f      	str	r2, [sp, #60]	; 0x3c
 8005aa6:	f8ca 9000 	str.w	r9, [sl]
 8005aaa:	f8ca 4004 	str.w	r4, [sl, #4]
 8005aae:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8005ab2:	f300 83d2 	bgt.w	800625a <_vfiprintf_r+0xb52>
 8005ab6:	9b01      	ldr	r3, [sp, #4]
 8005ab8:	9903      	ldr	r1, [sp, #12]
 8005aba:	1a5c      	subs	r4, r3, r1
 8005abc:	2c00      	cmp	r4, #0
 8005abe:	f10a 0a08 	add.w	sl, sl, #8
 8005ac2:	f10c 0e01 	add.w	lr, ip, #1
 8005ac6:	4660      	mov	r0, ip
 8005ac8:	f300 826d 	bgt.w	8005fa6 <_vfiprintf_r+0x89e>
 8005acc:	9903      	ldr	r1, [sp, #12]
 8005ace:	f8ca 7000 	str.w	r7, [sl]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f1be 0f07 	cmp.w	lr, #7
 8005ad8:	920f      	str	r2, [sp, #60]	; 0x3c
 8005ada:	f8ca 1004 	str.w	r1, [sl, #4]
 8005ade:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8005ae2:	f340 82ce 	ble.w	8006082 <_vfiprintf_r+0x97a>
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	f040 833a 	bne.w	8006160 <_vfiprintf_r+0xa58>
 8005aec:	0770      	lsls	r0, r6, #29
 8005aee:	920e      	str	r2, [sp, #56]	; 0x38
 8005af0:	d538      	bpl.n	8005b64 <_vfiprintf_r+0x45c>
 8005af2:	9b06      	ldr	r3, [sp, #24]
 8005af4:	1b5c      	subs	r4, r3, r5
 8005af6:	2c00      	cmp	r4, #0
 8005af8:	dd34      	ble.n	8005b64 <_vfiprintf_r+0x45c>
 8005afa:	46da      	mov	sl, fp
 8005afc:	2c10      	cmp	r4, #16
 8005afe:	f340 84ab 	ble.w	8006458 <_vfiprintf_r+0xd50>
 8005b02:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8005c08 <_vfiprintf_r+0x500>
 8005b06:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b08:	464f      	mov	r7, r9
 8005b0a:	2610      	movs	r6, #16
 8005b0c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005b10:	e006      	b.n	8005b20 <_vfiprintf_r+0x418>
 8005b12:	1c88      	adds	r0, r1, #2
 8005b14:	f10a 0a08 	add.w	sl, sl, #8
 8005b18:	4619      	mov	r1, r3
 8005b1a:	3c10      	subs	r4, #16
 8005b1c:	2c10      	cmp	r4, #16
 8005b1e:	dd13      	ble.n	8005b48 <_vfiprintf_r+0x440>
 8005b20:	1c4b      	adds	r3, r1, #1
 8005b22:	3210      	adds	r2, #16
 8005b24:	2b07      	cmp	r3, #7
 8005b26:	920f      	str	r2, [sp, #60]	; 0x3c
 8005b28:	f8ca 7000 	str.w	r7, [sl]
 8005b2c:	f8ca 6004 	str.w	r6, [sl, #4]
 8005b30:	930e      	str	r3, [sp, #56]	; 0x38
 8005b32:	ddee      	ble.n	8005b12 <_vfiprintf_r+0x40a>
 8005b34:	2a00      	cmp	r2, #0
 8005b36:	f040 828e 	bne.w	8006056 <_vfiprintf_r+0x94e>
 8005b3a:	3c10      	subs	r4, #16
 8005b3c:	2c10      	cmp	r4, #16
 8005b3e:	f04f 0001 	mov.w	r0, #1
 8005b42:	4611      	mov	r1, r2
 8005b44:	46da      	mov	sl, fp
 8005b46:	dceb      	bgt.n	8005b20 <_vfiprintf_r+0x418>
 8005b48:	46b9      	mov	r9, r7
 8005b4a:	4422      	add	r2, r4
 8005b4c:	2807      	cmp	r0, #7
 8005b4e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005b50:	f8ca 9000 	str.w	r9, [sl]
 8005b54:	f8ca 4004 	str.w	r4, [sl, #4]
 8005b58:	900e      	str	r0, [sp, #56]	; 0x38
 8005b5a:	f340 829b 	ble.w	8006094 <_vfiprintf_r+0x98c>
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	f040 8425 	bne.w	80063ae <_vfiprintf_r+0xca6>
 8005b64:	9b02      	ldr	r3, [sp, #8]
 8005b66:	9a06      	ldr	r2, [sp, #24]
 8005b68:	42aa      	cmp	r2, r5
 8005b6a:	bfac      	ite	ge
 8005b6c:	189b      	addge	r3, r3, r2
 8005b6e:	195b      	addlt	r3, r3, r5
 8005b70:	9302      	str	r3, [sp, #8]
 8005b72:	e299      	b.n	80060a8 <_vfiprintf_r+0x9a0>
 8005b74:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8005b78:	f898 3000 	ldrb.w	r3, [r8]
 8005b7c:	e62b      	b.n	80057d6 <_vfiprintf_r+0xce>
 8005b7e:	9406      	str	r4, [sp, #24]
 8005b80:	2900      	cmp	r1, #0
 8005b82:	f040 84af 	bne.w	80064e4 <_vfiprintf_r+0xddc>
 8005b86:	f046 0610 	orr.w	r6, r6, #16
 8005b8a:	06b3      	lsls	r3, r6, #26
 8005b8c:	f140 8312 	bpl.w	80061b4 <_vfiprintf_r+0xaac>
 8005b90:	9904      	ldr	r1, [sp, #16]
 8005b92:	3107      	adds	r1, #7
 8005b94:	f021 0107 	bic.w	r1, r1, #7
 8005b98:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005b9c:	3108      	adds	r1, #8
 8005b9e:	9104      	str	r1, [sp, #16]
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	461d      	mov	r5, r3
 8005ba4:	2a00      	cmp	r2, #0
 8005ba6:	f173 0300 	sbcs.w	r3, r3, #0
 8005baa:	f2c0 8386 	blt.w	80062ba <_vfiprintf_r+0xbb2>
 8005bae:	9b01      	ldr	r3, [sp, #4]
 8005bb0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f2c0 831a 	blt.w	80061ee <_vfiprintf_r+0xae6>
 8005bba:	ea54 0305 	orrs.w	r3, r4, r5
 8005bbe:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8005bc2:	f000 80ed 	beq.w	8005da0 <_vfiprintf_r+0x698>
 8005bc6:	2d00      	cmp	r5, #0
 8005bc8:	bf08      	it	eq
 8005bca:	2c0a      	cmpeq	r4, #10
 8005bcc:	f0c0 80ed 	bcc.w	8005daa <_vfiprintf_r+0x6a2>
 8005bd0:	465f      	mov	r7, fp
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	220a      	movs	r2, #10
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f001 fb39 	bl	8007250 <__aeabi_uldivmod>
 8005bde:	3230      	adds	r2, #48	; 0x30
 8005be0:	f807 2d01 	strb.w	r2, [r7, #-1]!
 8005be4:	4620      	mov	r0, r4
 8005be6:	4629      	mov	r1, r5
 8005be8:	2300      	movs	r3, #0
 8005bea:	220a      	movs	r2, #10
 8005bec:	f001 fb30 	bl	8007250 <__aeabi_uldivmod>
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	460d      	mov	r5, r1
 8005bf4:	ea54 0305 	orrs.w	r3, r4, r5
 8005bf8:	d1eb      	bne.n	8005bd2 <_vfiprintf_r+0x4ca>
 8005bfa:	ebc7 030b 	rsb	r3, r7, fp
 8005bfe:	9303      	str	r3, [sp, #12]
 8005c00:	e6a2      	b.n	8005948 <_vfiprintf_r+0x240>
 8005c02:	bf00      	nop
 8005c04:	0801bb04 	.word	0x0801bb04
 8005c08:	0800c870 	.word	0x0800c870
 8005c0c:	0800c880 	.word	0x0800c880
 8005c10:	9406      	str	r4, [sp, #24]
 8005c12:	2900      	cmp	r1, #0
 8005c14:	f040 8462 	bne.w	80064dc <_vfiprintf_r+0xdd4>
 8005c18:	f046 0610 	orr.w	r6, r6, #16
 8005c1c:	f016 0320 	ands.w	r3, r6, #32
 8005c20:	f000 82ae 	beq.w	8006180 <_vfiprintf_r+0xa78>
 8005c24:	9b04      	ldr	r3, [sp, #16]
 8005c26:	3307      	adds	r3, #7
 8005c28:	f023 0307 	bic.w	r3, r3, #7
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8005c34:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c38:	f103 0208 	add.w	r2, r3, #8
 8005c3c:	9b01      	ldr	r3, [sp, #4]
 8005c3e:	9204      	str	r2, [sp, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f2c0 8174 	blt.w	8005f2e <_vfiprintf_r+0x826>
 8005c46:	ea54 0305 	orrs.w	r3, r4, r5
 8005c4a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8005c4e:	f040 816e 	bne.w	8005f2e <_vfiprintf_r+0x826>
 8005c52:	9b01      	ldr	r3, [sp, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8430 	beq.w	80064ba <_vfiprintf_r+0xdb2>
 8005c5a:	f04f 0900 	mov.w	r9, #0
 8005c5e:	2400      	movs	r4, #0
 8005c60:	2500      	movs	r5, #0
 8005c62:	465f      	mov	r7, fp
 8005c64:	08e2      	lsrs	r2, r4, #3
 8005c66:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8005c6a:	08e9      	lsrs	r1, r5, #3
 8005c6c:	f004 0307 	and.w	r3, r4, #7
 8005c70:	460d      	mov	r5, r1
 8005c72:	4614      	mov	r4, r2
 8005c74:	3330      	adds	r3, #48	; 0x30
 8005c76:	ea54 0205 	orrs.w	r2, r4, r5
 8005c7a:	f807 3d01 	strb.w	r3, [r7, #-1]!
 8005c7e:	d1f1      	bne.n	8005c64 <_vfiprintf_r+0x55c>
 8005c80:	07f4      	lsls	r4, r6, #31
 8005c82:	d5ba      	bpl.n	8005bfa <_vfiprintf_r+0x4f2>
 8005c84:	2b30      	cmp	r3, #48	; 0x30
 8005c86:	d0b8      	beq.n	8005bfa <_vfiprintf_r+0x4f2>
 8005c88:	2230      	movs	r2, #48	; 0x30
 8005c8a:	1e7b      	subs	r3, r7, #1
 8005c8c:	f807 2c01 	strb.w	r2, [r7, #-1]
 8005c90:	ebc3 020b 	rsb	r2, r3, fp
 8005c94:	9203      	str	r2, [sp, #12]
 8005c96:	461f      	mov	r7, r3
 8005c98:	e656      	b.n	8005948 <_vfiprintf_r+0x240>
 8005c9a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005c9e:	2400      	movs	r4, #0
 8005ca0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005ca4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005ca8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005cac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005cb0:	2a09      	cmp	r2, #9
 8005cb2:	d9f5      	bls.n	8005ca0 <_vfiprintf_r+0x598>
 8005cb4:	e591      	b.n	80057da <_vfiprintf_r+0xd2>
 8005cb6:	f898 3000 	ldrb.w	r3, [r8]
 8005cba:	2101      	movs	r1, #1
 8005cbc:	202b      	movs	r0, #43	; 0x2b
 8005cbe:	e58a      	b.n	80057d6 <_vfiprintf_r+0xce>
 8005cc0:	f898 3000 	ldrb.w	r3, [r8]
 8005cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc6:	f108 0501 	add.w	r5, r8, #1
 8005cca:	f000 83dd 	beq.w	8006488 <_vfiprintf_r+0xd80>
 8005cce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005cd2:	2a09      	cmp	r2, #9
 8005cd4:	46a8      	mov	r8, r5
 8005cd6:	bf98      	it	ls
 8005cd8:	2500      	movls	r5, #0
 8005cda:	f200 83ce 	bhi.w	800647a <_vfiprintf_r+0xd72>
 8005cde:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005ce2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005ce6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8005cea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005cee:	2a09      	cmp	r2, #9
 8005cf0:	d9f5      	bls.n	8005cde <_vfiprintf_r+0x5d6>
 8005cf2:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
 8005cf6:	9201      	str	r2, [sp, #4]
 8005cf8:	e56f      	b.n	80057da <_vfiprintf_r+0xd2>
 8005cfa:	9a04      	ldr	r2, [sp, #16]
 8005cfc:	6814      	ldr	r4, [r2, #0]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	2c00      	cmp	r4, #0
 8005d02:	f103 0304 	add.w	r3, r3, #4
 8005d06:	f6ff aded 	blt.w	80058e4 <_vfiprintf_r+0x1dc>
 8005d0a:	9304      	str	r3, [sp, #16]
 8005d0c:	f898 3000 	ldrb.w	r3, [r8]
 8005d10:	e561      	b.n	80057d6 <_vfiprintf_r+0xce>
 8005d12:	9406      	str	r4, [sp, #24]
 8005d14:	2900      	cmp	r1, #0
 8005d16:	d081      	beq.n	8005c1c <_vfiprintf_r+0x514>
 8005d18:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8005d1c:	e77e      	b.n	8005c1c <_vfiprintf_r+0x514>
 8005d1e:	9a04      	ldr	r2, [sp, #16]
 8005d20:	9406      	str	r4, [sp, #24]
 8005d22:	6817      	ldr	r7, [r2, #0]
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005d2c:	1d14      	adds	r4, r2, #4
 8005d2e:	9b01      	ldr	r3, [sp, #4]
 8005d30:	2f00      	cmp	r7, #0
 8005d32:	f000 8386 	beq.w	8006442 <_vfiprintf_r+0xd3a>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f2c0 835f 	blt.w	80063fa <_vfiprintf_r+0xcf2>
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4638      	mov	r0, r7
 8005d42:	f7fe fac5 	bl	80042d0 <memchr>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f000 838f 	beq.w	800646a <_vfiprintf_r+0xd62>
 8005d4c:	1bc3      	subs	r3, r0, r7
 8005d4e:	9303      	str	r3, [sp, #12]
 8005d50:	2300      	movs	r3, #0
 8005d52:	9404      	str	r4, [sp, #16]
 8005d54:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8005d58:	9301      	str	r3, [sp, #4]
 8005d5a:	e5f5      	b.n	8005948 <_vfiprintf_r+0x240>
 8005d5c:	9406      	str	r4, [sp, #24]
 8005d5e:	2900      	cmp	r1, #0
 8005d60:	f040 83b9 	bne.w	80064d6 <_vfiprintf_r+0xdce>
 8005d64:	f016 0920 	ands.w	r9, r6, #32
 8005d68:	d135      	bne.n	8005dd6 <_vfiprintf_r+0x6ce>
 8005d6a:	f016 0310 	ands.w	r3, r6, #16
 8005d6e:	d103      	bne.n	8005d78 <_vfiprintf_r+0x670>
 8005d70:	f016 0940 	ands.w	r9, r6, #64	; 0x40
 8005d74:	f040 832a 	bne.w	80063cc <_vfiprintf_r+0xcc4>
 8005d78:	9a04      	ldr	r2, [sp, #16]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	6814      	ldr	r4, [r2, #0]
 8005d7e:	9a01      	ldr	r2, [sp, #4]
 8005d80:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	f103 0304 	add.w	r3, r3, #4
 8005d8a:	f04f 0500 	mov.w	r5, #0
 8005d8e:	f2c0 8332 	blt.w	80063f6 <_vfiprintf_r+0xcee>
 8005d92:	ea54 0205 	orrs.w	r2, r4, r5
 8005d96:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8005d9a:	9304      	str	r3, [sp, #16]
 8005d9c:	f47f af13 	bne.w	8005bc6 <_vfiprintf_r+0x4be>
 8005da0:	9b01      	ldr	r3, [sp, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f43f adcc 	beq.w	8005940 <_vfiprintf_r+0x238>
 8005da8:	2400      	movs	r4, #0
 8005daa:	af2a      	add	r7, sp, #168	; 0xa8
 8005dac:	3430      	adds	r4, #48	; 0x30
 8005dae:	f807 4d41 	strb.w	r4, [r7, #-65]!
 8005db2:	ebc7 030b 	rsb	r3, r7, fp
 8005db6:	9303      	str	r3, [sp, #12]
 8005db8:	e5c6      	b.n	8005948 <_vfiprintf_r+0x240>
 8005dba:	f046 0620 	orr.w	r6, r6, #32
 8005dbe:	f898 3000 	ldrb.w	r3, [r8]
 8005dc2:	e508      	b.n	80057d6 <_vfiprintf_r+0xce>
 8005dc4:	9406      	str	r4, [sp, #24]
 8005dc6:	2900      	cmp	r1, #0
 8005dc8:	f040 836e 	bne.w	80064a8 <_vfiprintf_r+0xda0>
 8005dcc:	f046 0610 	orr.w	r6, r6, #16
 8005dd0:	f016 0920 	ands.w	r9, r6, #32
 8005dd4:	d0c9      	beq.n	8005d6a <_vfiprintf_r+0x662>
 8005dd6:	9b04      	ldr	r3, [sp, #16]
 8005dd8:	3307      	adds	r3, #7
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8005de6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005dea:	f103 0208 	add.w	r2, r3, #8
 8005dee:	9b01      	ldr	r3, [sp, #4]
 8005df0:	9204      	str	r2, [sp, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f2c0 81f9 	blt.w	80061ea <_vfiprintf_r+0xae2>
 8005df8:	ea54 0305 	orrs.w	r3, r4, r5
 8005dfc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8005e00:	f04f 0900 	mov.w	r9, #0
 8005e04:	f47f aedf 	bne.w	8005bc6 <_vfiprintf_r+0x4be>
 8005e08:	e7ca      	b.n	8005da0 <_vfiprintf_r+0x698>
 8005e0a:	9406      	str	r4, [sp, #24]
 8005e0c:	2900      	cmp	r1, #0
 8005e0e:	f040 8351 	bne.w	80064b4 <_vfiprintf_r+0xdac>
 8005e12:	06b2      	lsls	r2, r6, #26
 8005e14:	48ae      	ldr	r0, [pc, #696]	; (80060d0 <_vfiprintf_r+0x9c8>)
 8005e16:	d541      	bpl.n	8005e9c <_vfiprintf_r+0x794>
 8005e18:	9a04      	ldr	r2, [sp, #16]
 8005e1a:	3207      	adds	r2, #7
 8005e1c:	f022 0207 	bic.w	r2, r2, #7
 8005e20:	e9d2 4500 	ldrd	r4, r5, [r2]
 8005e24:	f102 0108 	add.w	r1, r2, #8
 8005e28:	9104      	str	r1, [sp, #16]
 8005e2a:	f016 0901 	ands.w	r9, r6, #1
 8005e2e:	f000 8177 	beq.w	8006120 <_vfiprintf_r+0xa18>
 8005e32:	ea54 0205 	orrs.w	r2, r4, r5
 8005e36:	f040 8226 	bne.w	8006286 <_vfiprintf_r+0xb7e>
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005e42:	9b01      	ldr	r3, [sp, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f2c0 8196 	blt.w	8006176 <_vfiprintf_r+0xa6e>
 8005e4a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8005e4e:	e572      	b.n	8005936 <_vfiprintf_r+0x22e>
 8005e50:	9a04      	ldr	r2, [sp, #16]
 8005e52:	9406      	str	r4, [sp, #24]
 8005e54:	6813      	ldr	r3, [r2, #0]
 8005e56:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	f04f 0100 	mov.w	r1, #0
 8005e60:	2501      	movs	r5, #1
 8005e62:	3304      	adds	r3, #4
 8005e64:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8005e68:	9304      	str	r3, [sp, #16]
 8005e6a:	9503      	str	r5, [sp, #12]
 8005e6c:	af10      	add	r7, sp, #64	; 0x40
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	e573      	b.n	800595c <_vfiprintf_r+0x254>
 8005e74:	f898 3000 	ldrb.w	r3, [r8]
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	f47f acac 	bne.w	80057d6 <_vfiprintf_r+0xce>
 8005e7e:	2101      	movs	r1, #1
 8005e80:	2020      	movs	r0, #32
 8005e82:	e4a8      	b.n	80057d6 <_vfiprintf_r+0xce>
 8005e84:	f046 0601 	orr.w	r6, r6, #1
 8005e88:	f898 3000 	ldrb.w	r3, [r8]
 8005e8c:	e4a3      	b.n	80057d6 <_vfiprintf_r+0xce>
 8005e8e:	9406      	str	r4, [sp, #24]
 8005e90:	2900      	cmp	r1, #0
 8005e92:	f040 830c 	bne.w	80064ae <_vfiprintf_r+0xda6>
 8005e96:	06b2      	lsls	r2, r6, #26
 8005e98:	488e      	ldr	r0, [pc, #568]	; (80060d4 <_vfiprintf_r+0x9cc>)
 8005e9a:	d4bd      	bmi.n	8005e18 <_vfiprintf_r+0x710>
 8005e9c:	9904      	ldr	r1, [sp, #16]
 8005e9e:	06f7      	lsls	r7, r6, #27
 8005ea0:	460a      	mov	r2, r1
 8005ea2:	f100 819d 	bmi.w	80061e0 <_vfiprintf_r+0xad8>
 8005ea6:	0675      	lsls	r5, r6, #25
 8005ea8:	f140 819a 	bpl.w	80061e0 <_vfiprintf_r+0xad8>
 8005eac:	3204      	adds	r2, #4
 8005eae:	880c      	ldrh	r4, [r1, #0]
 8005eb0:	9204      	str	r2, [sp, #16]
 8005eb2:	2500      	movs	r5, #0
 8005eb4:	e7b9      	b.n	8005e2a <_vfiprintf_r+0x722>
 8005eb6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 8005eba:	f898 3000 	ldrb.w	r3, [r8]
 8005ebe:	e48a      	b.n	80057d6 <_vfiprintf_r+0xce>
 8005ec0:	f898 3000 	ldrb.w	r3, [r8]
 8005ec4:	2b6c      	cmp	r3, #108	; 0x6c
 8005ec6:	bf03      	ittte	eq
 8005ec8:	f898 3001 	ldrbeq.w	r3, [r8, #1]
 8005ecc:	f046 0620 	orreq.w	r6, r6, #32
 8005ed0:	f108 0801 	addeq.w	r8, r8, #1
 8005ed4:	f046 0610 	orrne.w	r6, r6, #16
 8005ed8:	e47d      	b.n	80057d6 <_vfiprintf_r+0xce>
 8005eda:	2900      	cmp	r1, #0
 8005edc:	f040 8309 	bne.w	80064f2 <_vfiprintf_r+0xdea>
 8005ee0:	06b4      	lsls	r4, r6, #26
 8005ee2:	f140 821c 	bpl.w	800631e <_vfiprintf_r+0xc16>
 8005ee6:	9a04      	ldr	r2, [sp, #16]
 8005ee8:	9902      	ldr	r1, [sp, #8]
 8005eea:	6813      	ldr	r3, [r2, #0]
 8005eec:	17cd      	asrs	r5, r1, #31
 8005eee:	4608      	mov	r0, r1
 8005ef0:	3204      	adds	r2, #4
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	9204      	str	r2, [sp, #16]
 8005ef6:	e9c3 0100 	strd	r0, r1, [r3]
 8005efa:	e436      	b.n	800576a <_vfiprintf_r+0x62>
 8005efc:	9406      	str	r4, [sp, #24]
 8005efe:	2900      	cmp	r1, #0
 8005f00:	f43f ae43 	beq.w	8005b8a <_vfiprintf_r+0x482>
 8005f04:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8005f08:	e63f      	b.n	8005b8a <_vfiprintf_r+0x482>
 8005f0a:	9406      	str	r4, [sp, #24]
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	f040 82ed 	bne.w	80064ec <_vfiprintf_r+0xde4>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 808f 	beq.w	8006036 <_vfiprintf_r+0x92e>
 8005f18:	2501      	movs	r5, #1
 8005f1a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005f26:	9503      	str	r5, [sp, #12]
 8005f28:	af10      	add	r7, sp, #64	; 0x40
 8005f2a:	e7a0      	b.n	8005e6e <_vfiprintf_r+0x766>
 8005f2c:	9304      	str	r3, [sp, #16]
 8005f2e:	f04f 0900 	mov.w	r9, #0
 8005f32:	e696      	b.n	8005c62 <_vfiprintf_r+0x55a>
 8005f34:	aa0d      	add	r2, sp, #52	; 0x34
 8005f36:	9900      	ldr	r1, [sp, #0]
 8005f38:	9309      	str	r3, [sp, #36]	; 0x24
 8005f3a:	4648      	mov	r0, r9
 8005f3c:	f7ff fb9e 	bl	800567c <__sprint_r.part.0>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d17f      	bne.n	8006044 <_vfiprintf_r+0x93c>
 8005f44:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005f46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4a:	f100 0e01 	add.w	lr, r0, #1
 8005f4e:	46dc      	mov	ip, fp
 8005f50:	e529      	b.n	80059a6 <_vfiprintf_r+0x29e>
 8005f52:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005f54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f56:	f100 0e01 	add.w	lr, r0, #1
 8005f5a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f43f ad50 	beq.w	8005a04 <_vfiprintf_r+0x2fc>
 8005f64:	3201      	adds	r2, #1
 8005f66:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f1be 0f07 	cmp.w	lr, #7
 8005f70:	920f      	str	r2, [sp, #60]	; 0x3c
 8005f72:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8005f76:	e88a 000a 	stmia.w	sl, {r1, r3}
 8005f7a:	f340 80bf 	ble.w	80060fc <_vfiprintf_r+0x9f4>
 8005f7e:	2a00      	cmp	r2, #0
 8005f80:	f040 814e 	bne.w	8006220 <_vfiprintf_r+0xb18>
 8005f84:	9907      	ldr	r1, [sp, #28]
 8005f86:	2900      	cmp	r1, #0
 8005f88:	f040 80be 	bne.w	8006108 <_vfiprintf_r+0xa00>
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4610      	mov	r0, r2
 8005f90:	46da      	mov	sl, fp
 8005f92:	9b08      	ldr	r3, [sp, #32]
 8005f94:	2b80      	cmp	r3, #128	; 0x80
 8005f96:	f43f ad50 	beq.w	8005a3a <_vfiprintf_r+0x332>
 8005f9a:	9b01      	ldr	r3, [sp, #4]
 8005f9c:	9903      	ldr	r1, [sp, #12]
 8005f9e:	1a5c      	subs	r4, r3, r1
 8005fa0:	2c00      	cmp	r4, #0
 8005fa2:	f77f ad93 	ble.w	8005acc <_vfiprintf_r+0x3c4>
 8005fa6:	2c10      	cmp	r4, #16
 8005fa8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80060d8 <_vfiprintf_r+0x9d0>
 8005fac:	dd25      	ble.n	8005ffa <_vfiprintf_r+0x8f2>
 8005fae:	46d4      	mov	ip, sl
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	46c2      	mov	sl, r8
 8005fb4:	46a8      	mov	r8, r5
 8005fb6:	464d      	mov	r5, r9
 8005fb8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005fbc:	e007      	b.n	8005fce <_vfiprintf_r+0x8c6>
 8005fbe:	f100 0e02 	add.w	lr, r0, #2
 8005fc2:	f10c 0c08 	add.w	ip, ip, #8
 8005fc6:	4608      	mov	r0, r1
 8005fc8:	3c10      	subs	r4, #16
 8005fca:	2c10      	cmp	r4, #16
 8005fcc:	dd11      	ble.n	8005ff2 <_vfiprintf_r+0x8ea>
 8005fce:	1c41      	adds	r1, r0, #1
 8005fd0:	3210      	adds	r2, #16
 8005fd2:	2907      	cmp	r1, #7
 8005fd4:	920f      	str	r2, [sp, #60]	; 0x3c
 8005fd6:	f8cc 5000 	str.w	r5, [ip]
 8005fda:	f8cc 3004 	str.w	r3, [ip, #4]
 8005fde:	910e      	str	r1, [sp, #56]	; 0x38
 8005fe0:	dded      	ble.n	8005fbe <_vfiprintf_r+0x8b6>
 8005fe2:	b9d2      	cbnz	r2, 800601a <_vfiprintf_r+0x912>
 8005fe4:	3c10      	subs	r4, #16
 8005fe6:	2c10      	cmp	r4, #16
 8005fe8:	f04f 0e01 	mov.w	lr, #1
 8005fec:	4610      	mov	r0, r2
 8005fee:	46dc      	mov	ip, fp
 8005ff0:	dced      	bgt.n	8005fce <_vfiprintf_r+0x8c6>
 8005ff2:	46a9      	mov	r9, r5
 8005ff4:	4645      	mov	r5, r8
 8005ff6:	46d0      	mov	r8, sl
 8005ff8:	46e2      	mov	sl, ip
 8005ffa:	4422      	add	r2, r4
 8005ffc:	f1be 0f07 	cmp.w	lr, #7
 8006000:	920f      	str	r2, [sp, #60]	; 0x3c
 8006002:	f8ca 9000 	str.w	r9, [sl]
 8006006:	f8ca 4004 	str.w	r4, [sl, #4]
 800600a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800600e:	dc2e      	bgt.n	800606e <_vfiprintf_r+0x966>
 8006010:	f10a 0a08 	add.w	sl, sl, #8
 8006014:	f10e 0e01 	add.w	lr, lr, #1
 8006018:	e558      	b.n	8005acc <_vfiprintf_r+0x3c4>
 800601a:	aa0d      	add	r2, sp, #52	; 0x34
 800601c:	9900      	ldr	r1, [sp, #0]
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	4648      	mov	r0, r9
 8006022:	f7ff fb2b 	bl	800567c <__sprint_r.part.0>
 8006026:	b968      	cbnz	r0, 8006044 <_vfiprintf_r+0x93c>
 8006028:	980e      	ldr	r0, [sp, #56]	; 0x38
 800602a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800602c:	9b01      	ldr	r3, [sp, #4]
 800602e:	f100 0e01 	add.w	lr, r0, #1
 8006032:	46dc      	mov	ip, fp
 8006034:	e7c8      	b.n	8005fc8 <_vfiprintf_r+0x8c0>
 8006036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006038:	b123      	cbz	r3, 8006044 <_vfiprintf_r+0x93c>
 800603a:	9805      	ldr	r0, [sp, #20]
 800603c:	9900      	ldr	r1, [sp, #0]
 800603e:	aa0d      	add	r2, sp, #52	; 0x34
 8006040:	f7ff fb1c 	bl	800567c <__sprint_r.part.0>
 8006044:	9b00      	ldr	r3, [sp, #0]
 8006046:	899b      	ldrh	r3, [r3, #12]
 8006048:	065a      	lsls	r2, r3, #25
 800604a:	f100 818b 	bmi.w	8006364 <_vfiprintf_r+0xc5c>
 800604e:	9802      	ldr	r0, [sp, #8]
 8006050:	b02b      	add	sp, #172	; 0xac
 8006052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006056:	aa0d      	add	r2, sp, #52	; 0x34
 8006058:	9900      	ldr	r1, [sp, #0]
 800605a:	4648      	mov	r0, r9
 800605c:	f7ff fb0e 	bl	800567c <__sprint_r.part.0>
 8006060:	2800      	cmp	r0, #0
 8006062:	d1ef      	bne.n	8006044 <_vfiprintf_r+0x93c>
 8006064:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006066:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006068:	1c48      	adds	r0, r1, #1
 800606a:	46da      	mov	sl, fp
 800606c:	e555      	b.n	8005b1a <_vfiprintf_r+0x412>
 800606e:	2a00      	cmp	r2, #0
 8006070:	f040 80fb 	bne.w	800626a <_vfiprintf_r+0xb62>
 8006074:	9a03      	ldr	r2, [sp, #12]
 8006076:	921b      	str	r2, [sp, #108]	; 0x6c
 8006078:	2301      	movs	r3, #1
 800607a:	920f      	str	r2, [sp, #60]	; 0x3c
 800607c:	971a      	str	r7, [sp, #104]	; 0x68
 800607e:	930e      	str	r3, [sp, #56]	; 0x38
 8006080:	46da      	mov	sl, fp
 8006082:	f10a 0a08 	add.w	sl, sl, #8
 8006086:	0771      	lsls	r1, r6, #29
 8006088:	d504      	bpl.n	8006094 <_vfiprintf_r+0x98c>
 800608a:	9b06      	ldr	r3, [sp, #24]
 800608c:	1b5c      	subs	r4, r3, r5
 800608e:	2c00      	cmp	r4, #0
 8006090:	f73f ad34 	bgt.w	8005afc <_vfiprintf_r+0x3f4>
 8006094:	9b02      	ldr	r3, [sp, #8]
 8006096:	9906      	ldr	r1, [sp, #24]
 8006098:	42a9      	cmp	r1, r5
 800609a:	bfac      	ite	ge
 800609c:	185b      	addge	r3, r3, r1
 800609e:	195b      	addlt	r3, r3, r5
 80060a0:	9302      	str	r3, [sp, #8]
 80060a2:	2a00      	cmp	r2, #0
 80060a4:	f040 80b3 	bne.w	800620e <_vfiprintf_r+0xb06>
 80060a8:	2300      	movs	r3, #0
 80060aa:	930e      	str	r3, [sp, #56]	; 0x38
 80060ac:	46da      	mov	sl, fp
 80060ae:	f7ff bb5c 	b.w	800576a <_vfiprintf_r+0x62>
 80060b2:	aa0d      	add	r2, sp, #52	; 0x34
 80060b4:	9900      	ldr	r1, [sp, #0]
 80060b6:	9307      	str	r3, [sp, #28]
 80060b8:	4648      	mov	r0, r9
 80060ba:	f7ff fadf 	bl	800567c <__sprint_r.part.0>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d1c0      	bne.n	8006044 <_vfiprintf_r+0x93c>
 80060c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80060c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060c6:	9b07      	ldr	r3, [sp, #28]
 80060c8:	f100 0c01 	add.w	ip, r0, #1
 80060cc:	46de      	mov	lr, fp
 80060ce:	e4cb      	b.n	8005a68 <_vfiprintf_r+0x360>
 80060d0:	0801baf0 	.word	0x0801baf0
 80060d4:	0801bb04 	.word	0x0801bb04
 80060d8:	0800c880 	.word	0x0800c880
 80060dc:	2a00      	cmp	r2, #0
 80060de:	f040 8133 	bne.w	8006348 <_vfiprintf_r+0xc40>
 80060e2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80f5 	beq.w	80062d6 <_vfiprintf_r+0xbce>
 80060ec:	2301      	movs	r3, #1
 80060ee:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80060f2:	461a      	mov	r2, r3
 80060f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80060f6:	469e      	mov	lr, r3
 80060f8:	911a      	str	r1, [sp, #104]	; 0x68
 80060fa:	46da      	mov	sl, fp
 80060fc:	4670      	mov	r0, lr
 80060fe:	f10a 0a08 	add.w	sl, sl, #8
 8006102:	f10e 0e01 	add.w	lr, lr, #1
 8006106:	e47d      	b.n	8005a04 <_vfiprintf_r+0x2fc>
 8006108:	a90c      	add	r1, sp, #48	; 0x30
 800610a:	2202      	movs	r2, #2
 800610c:	469e      	mov	lr, r3
 800610e:	911a      	str	r1, [sp, #104]	; 0x68
 8006110:	921b      	str	r2, [sp, #108]	; 0x6c
 8006112:	46da      	mov	sl, fp
 8006114:	4670      	mov	r0, lr
 8006116:	f10a 0a08 	add.w	sl, sl, #8
 800611a:	f10e 0e01 	add.w	lr, lr, #1
 800611e:	e738      	b.n	8005f92 <_vfiprintf_r+0x88a>
 8006120:	9b01      	ldr	r3, [sp, #4]
 8006122:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
 8006126:	2b00      	cmp	r3, #0
 8006128:	f2c0 812a 	blt.w	8006380 <_vfiprintf_r+0xc78>
 800612c:	ea54 0305 	orrs.w	r3, r4, r5
 8006130:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006134:	f43f abff 	beq.w	8005936 <_vfiprintf_r+0x22e>
 8006138:	465f      	mov	r7, fp
 800613a:	0923      	lsrs	r3, r4, #4
 800613c:	f004 010f 	and.w	r1, r4, #15
 8006140:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006144:	092a      	lsrs	r2, r5, #4
 8006146:	461c      	mov	r4, r3
 8006148:	4615      	mov	r5, r2
 800614a:	5c43      	ldrb	r3, [r0, r1]
 800614c:	f807 3d01 	strb.w	r3, [r7, #-1]!
 8006150:	ea54 0305 	orrs.w	r3, r4, r5
 8006154:	d1f1      	bne.n	800613a <_vfiprintf_r+0xa32>
 8006156:	ebc7 030b 	rsb	r3, r7, fp
 800615a:	9303      	str	r3, [sp, #12]
 800615c:	f7ff bbf4 	b.w	8005948 <_vfiprintf_r+0x240>
 8006160:	aa0d      	add	r2, sp, #52	; 0x34
 8006162:	9900      	ldr	r1, [sp, #0]
 8006164:	9805      	ldr	r0, [sp, #20]
 8006166:	f7ff fa89 	bl	800567c <__sprint_r.part.0>
 800616a:	2800      	cmp	r0, #0
 800616c:	f47f af6a 	bne.w	8006044 <_vfiprintf_r+0x93c>
 8006170:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006172:	46da      	mov	sl, fp
 8006174:	e787      	b.n	8006086 <_vfiprintf_r+0x97e>
 8006176:	f04f 0900 	mov.w	r9, #0
 800617a:	2400      	movs	r4, #0
 800617c:	2500      	movs	r5, #0
 800617e:	e7db      	b.n	8006138 <_vfiprintf_r+0xa30>
 8006180:	f016 0210 	ands.w	r2, r6, #16
 8006184:	f000 80b2 	beq.w	80062ec <_vfiprintf_r+0xbe4>
 8006188:	9904      	ldr	r1, [sp, #16]
 800618a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800618e:	460a      	mov	r2, r1
 8006190:	680c      	ldr	r4, [r1, #0]
 8006192:	9901      	ldr	r1, [sp, #4]
 8006194:	2900      	cmp	r1, #0
 8006196:	f102 0204 	add.w	r2, r2, #4
 800619a:	f04f 0500 	mov.w	r5, #0
 800619e:	f2c0 8159 	blt.w	8006454 <_vfiprintf_r+0xd4c>
 80061a2:	ea54 0105 	orrs.w	r1, r4, r5
 80061a6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80061aa:	9204      	str	r2, [sp, #16]
 80061ac:	f43f ad51 	beq.w	8005c52 <_vfiprintf_r+0x54a>
 80061b0:	4699      	mov	r9, r3
 80061b2:	e556      	b.n	8005c62 <_vfiprintf_r+0x55a>
 80061b4:	06f7      	lsls	r7, r6, #27
 80061b6:	d40a      	bmi.n	80061ce <_vfiprintf_r+0xac6>
 80061b8:	0675      	lsls	r5, r6, #25
 80061ba:	d508      	bpl.n	80061ce <_vfiprintf_r+0xac6>
 80061bc:	9904      	ldr	r1, [sp, #16]
 80061be:	f9b1 4000 	ldrsh.w	r4, [r1]
 80061c2:	3104      	adds	r1, #4
 80061c4:	17e5      	asrs	r5, r4, #31
 80061c6:	4622      	mov	r2, r4
 80061c8:	462b      	mov	r3, r5
 80061ca:	9104      	str	r1, [sp, #16]
 80061cc:	e4ea      	b.n	8005ba4 <_vfiprintf_r+0x49c>
 80061ce:	9a04      	ldr	r2, [sp, #16]
 80061d0:	6814      	ldr	r4, [r2, #0]
 80061d2:	4613      	mov	r3, r2
 80061d4:	3304      	adds	r3, #4
 80061d6:	17e5      	asrs	r5, r4, #31
 80061d8:	9304      	str	r3, [sp, #16]
 80061da:	4622      	mov	r2, r4
 80061dc:	462b      	mov	r3, r5
 80061de:	e4e1      	b.n	8005ba4 <_vfiprintf_r+0x49c>
 80061e0:	6814      	ldr	r4, [r2, #0]
 80061e2:	3204      	adds	r2, #4
 80061e4:	9204      	str	r2, [sp, #16]
 80061e6:	2500      	movs	r5, #0
 80061e8:	e61f      	b.n	8005e2a <_vfiprintf_r+0x722>
 80061ea:	f04f 0900 	mov.w	r9, #0
 80061ee:	ea54 0305 	orrs.w	r3, r4, r5
 80061f2:	f47f ace8 	bne.w	8005bc6 <_vfiprintf_r+0x4be>
 80061f6:	e5d8      	b.n	8005daa <_vfiprintf_r+0x6a2>
 80061f8:	aa0d      	add	r2, sp, #52	; 0x34
 80061fa:	9900      	ldr	r1, [sp, #0]
 80061fc:	9805      	ldr	r0, [sp, #20]
 80061fe:	f7ff fa3d 	bl	800567c <__sprint_r.part.0>
 8006202:	2800      	cmp	r0, #0
 8006204:	f47f af1e 	bne.w	8006044 <_vfiprintf_r+0x93c>
 8006208:	46da      	mov	sl, fp
 800620a:	f7ff bb48 	b.w	800589e <_vfiprintf_r+0x196>
 800620e:	aa0d      	add	r2, sp, #52	; 0x34
 8006210:	9900      	ldr	r1, [sp, #0]
 8006212:	9805      	ldr	r0, [sp, #20]
 8006214:	f7ff fa32 	bl	800567c <__sprint_r.part.0>
 8006218:	2800      	cmp	r0, #0
 800621a:	f43f af45 	beq.w	80060a8 <_vfiprintf_r+0x9a0>
 800621e:	e711      	b.n	8006044 <_vfiprintf_r+0x93c>
 8006220:	aa0d      	add	r2, sp, #52	; 0x34
 8006222:	9900      	ldr	r1, [sp, #0]
 8006224:	9805      	ldr	r0, [sp, #20]
 8006226:	f7ff fa29 	bl	800567c <__sprint_r.part.0>
 800622a:	2800      	cmp	r0, #0
 800622c:	f47f af0a 	bne.w	8006044 <_vfiprintf_r+0x93c>
 8006230:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006232:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006234:	f100 0e01 	add.w	lr, r0, #1
 8006238:	46da      	mov	sl, fp
 800623a:	f7ff bbe3 	b.w	8005a04 <_vfiprintf_r+0x2fc>
 800623e:	aa0d      	add	r2, sp, #52	; 0x34
 8006240:	9900      	ldr	r1, [sp, #0]
 8006242:	9805      	ldr	r0, [sp, #20]
 8006244:	f7ff fa1a 	bl	800567c <__sprint_r.part.0>
 8006248:	2800      	cmp	r0, #0
 800624a:	f47f aefb 	bne.w	8006044 <_vfiprintf_r+0x93c>
 800624e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006250:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006252:	f100 0e01 	add.w	lr, r0, #1
 8006256:	46da      	mov	sl, fp
 8006258:	e69b      	b.n	8005f92 <_vfiprintf_r+0x88a>
 800625a:	2a00      	cmp	r2, #0
 800625c:	f040 80d8 	bne.w	8006410 <_vfiprintf_r+0xd08>
 8006260:	f04f 0e01 	mov.w	lr, #1
 8006264:	4610      	mov	r0, r2
 8006266:	46da      	mov	sl, fp
 8006268:	e697      	b.n	8005f9a <_vfiprintf_r+0x892>
 800626a:	aa0d      	add	r2, sp, #52	; 0x34
 800626c:	9900      	ldr	r1, [sp, #0]
 800626e:	9805      	ldr	r0, [sp, #20]
 8006270:	f7ff fa04 	bl	800567c <__sprint_r.part.0>
 8006274:	2800      	cmp	r0, #0
 8006276:	f47f aee5 	bne.w	8006044 <_vfiprintf_r+0x93c>
 800627a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800627c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800627e:	f103 0e01 	add.w	lr, r3, #1
 8006282:	46da      	mov	sl, fp
 8006284:	e422      	b.n	8005acc <_vfiprintf_r+0x3c4>
 8006286:	2230      	movs	r2, #48	; 0x30
 8006288:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800628c:	9a01      	ldr	r2, [sp, #4]
 800628e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8006292:	2a00      	cmp	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800629c:	f046 0302 	orr.w	r3, r6, #2
 80062a0:	f2c0 80cb 	blt.w	800643a <_vfiprintf_r+0xd32>
 80062a4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80062a8:	f046 0602 	orr.w	r6, r6, #2
 80062ac:	f04f 0900 	mov.w	r9, #0
 80062b0:	e742      	b.n	8006138 <_vfiprintf_r+0xa30>
 80062b2:	f04f 0900 	mov.w	r9, #0
 80062b6:	4890      	ldr	r0, [pc, #576]	; (80064f8 <_vfiprintf_r+0xdf0>)
 80062b8:	e73e      	b.n	8006138 <_vfiprintf_r+0xa30>
 80062ba:	9b01      	ldr	r3, [sp, #4]
 80062bc:	4264      	negs	r4, r4
 80062be:	f04f 092d 	mov.w	r9, #45	; 0x2d
 80062c2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
 80062cc:	f6ff ac7b 	blt.w	8005bc6 <_vfiprintf_r+0x4be>
 80062d0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80062d4:	e477      	b.n	8005bc6 <_vfiprintf_r+0x4be>
 80062d6:	9b07      	ldr	r3, [sp, #28]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d072      	beq.n	80063c2 <_vfiprintf_r+0xcba>
 80062dc:	ab0c      	add	r3, sp, #48	; 0x30
 80062de:	2202      	movs	r2, #2
 80062e0:	931a      	str	r3, [sp, #104]	; 0x68
 80062e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80062e4:	f04f 0e01 	mov.w	lr, #1
 80062e8:	46da      	mov	sl, fp
 80062ea:	e713      	b.n	8006114 <_vfiprintf_r+0xa0c>
 80062ec:	f016 0940 	ands.w	r9, r6, #64	; 0x40
 80062f0:	d048      	beq.n	8006384 <_vfiprintf_r+0xc7c>
 80062f2:	9904      	ldr	r1, [sp, #16]
 80062f4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 80062f8:	460b      	mov	r3, r1
 80062fa:	880c      	ldrh	r4, [r1, #0]
 80062fc:	9901      	ldr	r1, [sp, #4]
 80062fe:	2900      	cmp	r1, #0
 8006300:	f103 0304 	add.w	r3, r3, #4
 8006304:	f04f 0500 	mov.w	r5, #0
 8006308:	f6ff ae10 	blt.w	8005f2c <_vfiprintf_r+0x824>
 800630c:	ea54 0105 	orrs.w	r1, r4, r5
 8006310:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	f43f ac9c 	beq.w	8005c52 <_vfiprintf_r+0x54a>
 800631a:	4691      	mov	r9, r2
 800631c:	e4a1      	b.n	8005c62 <_vfiprintf_r+0x55a>
 800631e:	06f0      	lsls	r0, r6, #27
 8006320:	d40a      	bmi.n	8006338 <_vfiprintf_r+0xc30>
 8006322:	0671      	lsls	r1, r6, #25
 8006324:	d508      	bpl.n	8006338 <_vfiprintf_r+0xc30>
 8006326:	9a04      	ldr	r2, [sp, #16]
 8006328:	6813      	ldr	r3, [r2, #0]
 800632a:	3204      	adds	r2, #4
 800632c:	9204      	str	r2, [sp, #16]
 800632e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	f7ff ba19 	b.w	800576a <_vfiprintf_r+0x62>
 8006338:	9a04      	ldr	r2, [sp, #16]
 800633a:	6813      	ldr	r3, [r2, #0]
 800633c:	3204      	adds	r2, #4
 800633e:	9204      	str	r2, [sp, #16]
 8006340:	9a02      	ldr	r2, [sp, #8]
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	f7ff ba11 	b.w	800576a <_vfiprintf_r+0x62>
 8006348:	aa0d      	add	r2, sp, #52	; 0x34
 800634a:	9900      	ldr	r1, [sp, #0]
 800634c:	9805      	ldr	r0, [sp, #20]
 800634e:	f7ff f995 	bl	800567c <__sprint_r.part.0>
 8006352:	2800      	cmp	r0, #0
 8006354:	f47f ae76 	bne.w	8006044 <_vfiprintf_r+0x93c>
 8006358:	980e      	ldr	r0, [sp, #56]	; 0x38
 800635a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800635c:	f100 0e01 	add.w	lr, r0, #1
 8006360:	46da      	mov	sl, fp
 8006362:	e5fa      	b.n	8005f5a <_vfiprintf_r+0x852>
 8006364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006368:	f7ff bab6 	b.w	80058d8 <_vfiprintf_r+0x1d0>
 800636c:	4862      	ldr	r0, [pc, #392]	; (80064f8 <_vfiprintf_r+0xdf0>)
 800636e:	4616      	mov	r6, r2
 8006370:	ea54 0205 	orrs.w	r2, r4, r5
 8006374:	9304      	str	r3, [sp, #16]
 8006376:	f04f 0900 	mov.w	r9, #0
 800637a:	f47f aedd 	bne.w	8006138 <_vfiprintf_r+0xa30>
 800637e:	e6fc      	b.n	800617a <_vfiprintf_r+0xa72>
 8006380:	9b04      	ldr	r3, [sp, #16]
 8006382:	e7f5      	b.n	8006370 <_vfiprintf_r+0xc68>
 8006384:	9a04      	ldr	r2, [sp, #16]
 8006386:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
 800638a:	4613      	mov	r3, r2
 800638c:	6814      	ldr	r4, [r2, #0]
 800638e:	9a01      	ldr	r2, [sp, #4]
 8006390:	2a00      	cmp	r2, #0
 8006392:	f103 0304 	add.w	r3, r3, #4
 8006396:	f04f 0500 	mov.w	r5, #0
 800639a:	f6ff adc7 	blt.w	8005f2c <_vfiprintf_r+0x824>
 800639e:	ea54 0205 	orrs.w	r2, r4, r5
 80063a2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80063a6:	9304      	str	r3, [sp, #16]
 80063a8:	f47f ac5b 	bne.w	8005c62 <_vfiprintf_r+0x55a>
 80063ac:	e451      	b.n	8005c52 <_vfiprintf_r+0x54a>
 80063ae:	aa0d      	add	r2, sp, #52	; 0x34
 80063b0:	9900      	ldr	r1, [sp, #0]
 80063b2:	9805      	ldr	r0, [sp, #20]
 80063b4:	f7ff f962 	bl	800567c <__sprint_r.part.0>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	f47f ae43 	bne.w	8006044 <_vfiprintf_r+0x93c>
 80063be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063c0:	e668      	b.n	8006094 <_vfiprintf_r+0x98c>
 80063c2:	4610      	mov	r0, r2
 80063c4:	f04f 0e01 	mov.w	lr, #1
 80063c8:	46da      	mov	sl, fp
 80063ca:	e5e6      	b.n	8005f9a <_vfiprintf_r+0x892>
 80063cc:	9904      	ldr	r1, [sp, #16]
 80063ce:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80063d2:	460a      	mov	r2, r1
 80063d4:	880c      	ldrh	r4, [r1, #0]
 80063d6:	9901      	ldr	r1, [sp, #4]
 80063d8:	2900      	cmp	r1, #0
 80063da:	f102 0204 	add.w	r2, r2, #4
 80063de:	f04f 0500 	mov.w	r5, #0
 80063e2:	db4e      	blt.n	8006482 <_vfiprintf_r+0xd7a>
 80063e4:	ea54 0105 	orrs.w	r1, r4, r5
 80063e8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80063ec:	9204      	str	r2, [sp, #16]
 80063ee:	4699      	mov	r9, r3
 80063f0:	f47f abe9 	bne.w	8005bc6 <_vfiprintf_r+0x4be>
 80063f4:	e4d4      	b.n	8005da0 <_vfiprintf_r+0x698>
 80063f6:	9304      	str	r3, [sp, #16]
 80063f8:	e6f9      	b.n	80061ee <_vfiprintf_r+0xae6>
 80063fa:	4638      	mov	r0, r7
 80063fc:	9404      	str	r4, [sp, #16]
 80063fe:	f7fa f97f 	bl	8000700 <strlen>
 8006402:	2300      	movs	r3, #0
 8006404:	9003      	str	r0, [sp, #12]
 8006406:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800640a:	9301      	str	r3, [sp, #4]
 800640c:	f7ff ba9c 	b.w	8005948 <_vfiprintf_r+0x240>
 8006410:	aa0d      	add	r2, sp, #52	; 0x34
 8006412:	9900      	ldr	r1, [sp, #0]
 8006414:	9805      	ldr	r0, [sp, #20]
 8006416:	f7ff f931 	bl	800567c <__sprint_r.part.0>
 800641a:	2800      	cmp	r0, #0
 800641c:	f47f ae12 	bne.w	8006044 <_vfiprintf_r+0x93c>
 8006420:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006422:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006424:	f100 0e01 	add.w	lr, r0, #1
 8006428:	46da      	mov	sl, fp
 800642a:	e5b6      	b.n	8005f9a <_vfiprintf_r+0x892>
 800642c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800642e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006430:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8006500 <_vfiprintf_r+0xdf8>
 8006434:	3001      	adds	r0, #1
 8006436:	f7ff bad2 	b.w	80059de <_vfiprintf_r+0x2d6>
 800643a:	461e      	mov	r6, r3
 800643c:	f04f 0900 	mov.w	r9, #0
 8006440:	e67a      	b.n	8006138 <_vfiprintf_r+0xa30>
 8006442:	2b06      	cmp	r3, #6
 8006444:	bf28      	it	cs
 8006446:	2306      	movcs	r3, #6
 8006448:	9303      	str	r3, [sp, #12]
 800644a:	9404      	str	r4, [sp, #16]
 800644c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8006450:	4f2a      	ldr	r7, [pc, #168]	; (80064fc <_vfiprintf_r+0xdf4>)
 8006452:	e50c      	b.n	8005e6e <_vfiprintf_r+0x766>
 8006454:	9204      	str	r2, [sp, #16]
 8006456:	e56a      	b.n	8005f2e <_vfiprintf_r+0x826>
 8006458:	980e      	ldr	r0, [sp, #56]	; 0x38
 800645a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8006500 <_vfiprintf_r+0xdf8>
 800645e:	3001      	adds	r0, #1
 8006460:	f7ff bb73 	b.w	8005b4a <_vfiprintf_r+0x442>
 8006464:	46f4      	mov	ip, lr
 8006466:	f7ff bb1a 	b.w	8005a9e <_vfiprintf_r+0x396>
 800646a:	9b01      	ldr	r3, [sp, #4]
 800646c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8006470:	9303      	str	r3, [sp, #12]
 8006472:	9404      	str	r4, [sp, #16]
 8006474:	9001      	str	r0, [sp, #4]
 8006476:	f7ff ba67 	b.w	8005948 <_vfiprintf_r+0x240>
 800647a:	2200      	movs	r2, #0
 800647c:	9201      	str	r2, [sp, #4]
 800647e:	f7ff b9ac 	b.w	80057da <_vfiprintf_r+0xd2>
 8006482:	9204      	str	r2, [sp, #16]
 8006484:	4699      	mov	r9, r3
 8006486:	e6b2      	b.n	80061ee <_vfiprintf_r+0xae6>
 8006488:	9a04      	ldr	r2, [sp, #16]
 800648a:	6813      	ldr	r3, [r2, #0]
 800648c:	9301      	str	r3, [sp, #4]
 800648e:	3204      	adds	r2, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	9204      	str	r2, [sp, #16]
 8006494:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006498:	46a8      	mov	r8, r5
 800649a:	f6bf a99c 	bge.w	80057d6 <_vfiprintf_r+0xce>
 800649e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064a2:	9201      	str	r2, [sp, #4]
 80064a4:	f7ff b997 	b.w	80057d6 <_vfiprintf_r+0xce>
 80064a8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80064ac:	e48e      	b.n	8005dcc <_vfiprintf_r+0x6c4>
 80064ae:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80064b2:	e4f0      	b.n	8005e96 <_vfiprintf_r+0x78e>
 80064b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80064b8:	e4ab      	b.n	8005e12 <_vfiprintf_r+0x70a>
 80064ba:	4699      	mov	r9, r3
 80064bc:	07f3      	lsls	r3, r6, #31
 80064be:	d505      	bpl.n	80064cc <_vfiprintf_r+0xdc4>
 80064c0:	af2a      	add	r7, sp, #168	; 0xa8
 80064c2:	2330      	movs	r3, #48	; 0x30
 80064c4:	f807 3d41 	strb.w	r3, [r7, #-65]!
 80064c8:	f7ff bb97 	b.w	8005bfa <_vfiprintf_r+0x4f2>
 80064cc:	9b01      	ldr	r3, [sp, #4]
 80064ce:	9303      	str	r3, [sp, #12]
 80064d0:	465f      	mov	r7, fp
 80064d2:	f7ff ba39 	b.w	8005948 <_vfiprintf_r+0x240>
 80064d6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80064da:	e443      	b.n	8005d64 <_vfiprintf_r+0x65c>
 80064dc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80064e0:	f7ff bb9a 	b.w	8005c18 <_vfiprintf_r+0x510>
 80064e4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80064e8:	f7ff bb4d 	b.w	8005b86 <_vfiprintf_r+0x47e>
 80064ec:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80064f0:	e50f      	b.n	8005f12 <_vfiprintf_r+0x80a>
 80064f2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80064f6:	e4f3      	b.n	8005ee0 <_vfiprintf_r+0x7d8>
 80064f8:	0801bb04 	.word	0x0801bb04
 80064fc:	0801bb18 	.word	0x0801bb18
 8006500:	0800c870 	.word	0x0800c870

08006504 <vfiprintf>:
 8006504:	b410      	push	{r4}
 8006506:	4c04      	ldr	r4, [pc, #16]	; (8006518 <vfiprintf+0x14>)
 8006508:	4613      	mov	r3, r2
 800650a:	460a      	mov	r2, r1
 800650c:	4601      	mov	r1, r0
 800650e:	6820      	ldr	r0, [r4, #0]
 8006510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006514:	f7ff b8f8 	b.w	8005708 <_vfiprintf_r>
 8006518:	20000008 	.word	0x20000008

0800651c <__sbprintf>:
 800651c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651e:	460c      	mov	r4, r1
 8006520:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8006524:	8989      	ldrh	r1, [r1, #12]
 8006526:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8006528:	89e5      	ldrh	r5, [r4, #14]
 800652a:	9619      	str	r6, [sp, #100]	; 0x64
 800652c:	f021 0102 	bic.w	r1, r1, #2
 8006530:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006532:	f8ad 500e 	strh.w	r5, [sp, #14]
 8006536:	2500      	movs	r5, #0
 8006538:	69e7      	ldr	r7, [r4, #28]
 800653a:	f8ad 100c 	strh.w	r1, [sp, #12]
 800653e:	9609      	str	r6, [sp, #36]	; 0x24
 8006540:	9506      	str	r5, [sp, #24]
 8006542:	ae1a      	add	r6, sp, #104	; 0x68
 8006544:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8006548:	4669      	mov	r1, sp
 800654a:	9600      	str	r6, [sp, #0]
 800654c:	9604      	str	r6, [sp, #16]
 800654e:	9502      	str	r5, [sp, #8]
 8006550:	9505      	str	r5, [sp, #20]
 8006552:	9707      	str	r7, [sp, #28]
 8006554:	4606      	mov	r6, r0
 8006556:	f7ff f8d7 	bl	8005708 <_vfiprintf_r>
 800655a:	1e05      	subs	r5, r0, #0
 800655c:	db07      	blt.n	800656e <__sbprintf+0x52>
 800655e:	4630      	mov	r0, r6
 8006560:	4669      	mov	r1, sp
 8006562:	f7fc feff 	bl	8003364 <_fflush_r>
 8006566:	2800      	cmp	r0, #0
 8006568:	bf18      	it	ne
 800656a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800656e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006572:	065b      	lsls	r3, r3, #25
 8006574:	d503      	bpl.n	800657e <__sbprintf+0x62>
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657c:	81a3      	strh	r3, [r4, #12]
 800657e:	4628      	mov	r0, r5
 8006580:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8006584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006586:	bf00      	nop

08006588 <__swbuf_r>:
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658a:	460d      	mov	r5, r1
 800658c:	4614      	mov	r4, r2
 800658e:	4606      	mov	r6, r0
 8006590:	b110      	cbz	r0, 8006598 <__swbuf_r+0x10>
 8006592:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006594:	2b00      	cmp	r3, #0
 8006596:	d04a      	beq.n	800662e <__swbuf_r+0xa6>
 8006598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800659c:	69a3      	ldr	r3, [r4, #24]
 800659e:	60a3      	str	r3, [r4, #8]
 80065a0:	b291      	uxth	r1, r2
 80065a2:	0708      	lsls	r0, r1, #28
 80065a4:	d538      	bpl.n	8006618 <__swbuf_r+0x90>
 80065a6:	6923      	ldr	r3, [r4, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d035      	beq.n	8006618 <__swbuf_r+0x90>
 80065ac:	0489      	lsls	r1, r1, #18
 80065ae:	b2ef      	uxtb	r7, r5
 80065b0:	d515      	bpl.n	80065de <__swbuf_r+0x56>
 80065b2:	6822      	ldr	r2, [r4, #0]
 80065b4:	6961      	ldr	r1, [r4, #20]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	428b      	cmp	r3, r1
 80065ba:	da1c      	bge.n	80065f6 <__swbuf_r+0x6e>
 80065bc:	3301      	adds	r3, #1
 80065be:	68a1      	ldr	r1, [r4, #8]
 80065c0:	1c50      	adds	r0, r2, #1
 80065c2:	3901      	subs	r1, #1
 80065c4:	60a1      	str	r1, [r4, #8]
 80065c6:	6020      	str	r0, [r4, #0]
 80065c8:	7015      	strb	r5, [r2, #0]
 80065ca:	6962      	ldr	r2, [r4, #20]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d01a      	beq.n	8006606 <__swbuf_r+0x7e>
 80065d0:	89a3      	ldrh	r3, [r4, #12]
 80065d2:	07db      	lsls	r3, r3, #31
 80065d4:	d501      	bpl.n	80065da <__swbuf_r+0x52>
 80065d6:	2f0a      	cmp	r7, #10
 80065d8:	d015      	beq.n	8006606 <__swbuf_r+0x7e>
 80065da:	4638      	mov	r0, r7
 80065dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065de:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80065e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065e4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80065e8:	81a2      	strh	r2, [r4, #12]
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	6661      	str	r1, [r4, #100]	; 0x64
 80065ee:	6961      	ldr	r1, [r4, #20]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	428b      	cmp	r3, r1
 80065f4:	dbe2      	blt.n	80065bc <__swbuf_r+0x34>
 80065f6:	4621      	mov	r1, r4
 80065f8:	4630      	mov	r0, r6
 80065fa:	f7fc feb3 	bl	8003364 <_fflush_r>
 80065fe:	b940      	cbnz	r0, 8006612 <__swbuf_r+0x8a>
 8006600:	6822      	ldr	r2, [r4, #0]
 8006602:	2301      	movs	r3, #1
 8006604:	e7db      	b.n	80065be <__swbuf_r+0x36>
 8006606:	4621      	mov	r1, r4
 8006608:	4630      	mov	r0, r6
 800660a:	f7fc feab 	bl	8003364 <_fflush_r>
 800660e:	2800      	cmp	r0, #0
 8006610:	d0e3      	beq.n	80065da <__swbuf_r+0x52>
 8006612:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006616:	e7e0      	b.n	80065da <__swbuf_r+0x52>
 8006618:	4621      	mov	r1, r4
 800661a:	4630      	mov	r0, r6
 800661c:	f7fb fd9a 	bl	8002154 <__swsetup_r>
 8006620:	2800      	cmp	r0, #0
 8006622:	d1f6      	bne.n	8006612 <__swbuf_r+0x8a>
 8006624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006628:	6923      	ldr	r3, [r4, #16]
 800662a:	b291      	uxth	r1, r2
 800662c:	e7be      	b.n	80065ac <__swbuf_r+0x24>
 800662e:	f7fc ffa9 	bl	8003584 <__sinit>
 8006632:	e7b1      	b.n	8006598 <__swbuf_r+0x10>

08006634 <__swbuf>:
 8006634:	4b02      	ldr	r3, [pc, #8]	; (8006640 <__swbuf+0xc>)
 8006636:	460a      	mov	r2, r1
 8006638:	4601      	mov	r1, r0
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	f7ff bfa4 	b.w	8006588 <__swbuf_r>
 8006640:	20000008 	.word	0x20000008

08006644 <_calloc_r>:
 8006644:	b510      	push	{r4, lr}
 8006646:	fb02 f101 	mul.w	r1, r2, r1
 800664a:	f7fd fb87 	bl	8003d5c <_malloc_r>
 800664e:	4604      	mov	r4, r0
 8006650:	b1d8      	cbz	r0, 800668a <_calloc_r+0x46>
 8006652:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006656:	f022 0203 	bic.w	r2, r2, #3
 800665a:	3a04      	subs	r2, #4
 800665c:	2a24      	cmp	r2, #36	; 0x24
 800665e:	d818      	bhi.n	8006692 <_calloc_r+0x4e>
 8006660:	2a13      	cmp	r2, #19
 8006662:	d914      	bls.n	800668e <_calloc_r+0x4a>
 8006664:	2300      	movs	r3, #0
 8006666:	2a1b      	cmp	r2, #27
 8006668:	6003      	str	r3, [r0, #0]
 800666a:	6043      	str	r3, [r0, #4]
 800666c:	d916      	bls.n	800669c <_calloc_r+0x58>
 800666e:	2a24      	cmp	r2, #36	; 0x24
 8006670:	6083      	str	r3, [r0, #8]
 8006672:	60c3      	str	r3, [r0, #12]
 8006674:	bf11      	iteee	ne
 8006676:	f100 0210 	addne.w	r2, r0, #16
 800667a:	6103      	streq	r3, [r0, #16]
 800667c:	6143      	streq	r3, [r0, #20]
 800667e:	f100 0218 	addeq.w	r2, r0, #24
 8006682:	2300      	movs	r3, #0
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	6053      	str	r3, [r2, #4]
 8006688:	6093      	str	r3, [r2, #8]
 800668a:	4620      	mov	r0, r4
 800668c:	bd10      	pop	{r4, pc}
 800668e:	4602      	mov	r2, r0
 8006690:	e7f7      	b.n	8006682 <_calloc_r+0x3e>
 8006692:	2100      	movs	r1, #0
 8006694:	f7f9 fe4a 	bl	800032c <memset>
 8006698:	4620      	mov	r0, r4
 800669a:	bd10      	pop	{r4, pc}
 800669c:	f100 0208 	add.w	r2, r0, #8
 80066a0:	e7ef      	b.n	8006682 <_calloc_r+0x3e>
 80066a2:	bf00      	nop

080066a4 <_fclose_r>:
 80066a4:	2900      	cmp	r1, #0
 80066a6:	d03d      	beq.n	8006724 <_fclose_r+0x80>
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	4605      	mov	r5, r0
 80066ac:	460c      	mov	r4, r1
 80066ae:	b108      	cbz	r0, 80066b4 <_fclose_r+0x10>
 80066b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80066b2:	b37b      	cbz	r3, 8006714 <_fclose_r+0x70>
 80066b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b8:	b90b      	cbnz	r3, 80066be <_fclose_r+0x1a>
 80066ba:	2000      	movs	r0, #0
 80066bc:	bd70      	pop	{r4, r5, r6, pc}
 80066be:	4621      	mov	r1, r4
 80066c0:	4628      	mov	r0, r5
 80066c2:	f7fc fdab 	bl	800321c <__sflush_r>
 80066c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066c8:	4606      	mov	r6, r0
 80066ca:	b133      	cbz	r3, 80066da <_fclose_r+0x36>
 80066cc:	69e1      	ldr	r1, [r4, #28]
 80066ce:	4628      	mov	r0, r5
 80066d0:	4798      	blx	r3
 80066d2:	2800      	cmp	r0, #0
 80066d4:	bfb8      	it	lt
 80066d6:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	061b      	lsls	r3, r3, #24
 80066de:	d41c      	bmi.n	800671a <_fclose_r+0x76>
 80066e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80066e2:	b141      	cbz	r1, 80066f6 <_fclose_r+0x52>
 80066e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80066e8:	4299      	cmp	r1, r3
 80066ea:	d002      	beq.n	80066f2 <_fclose_r+0x4e>
 80066ec:	4628      	mov	r0, r5
 80066ee:	f7fc ffb7 	bl	8003660 <_free_r>
 80066f2:	2300      	movs	r3, #0
 80066f4:	6323      	str	r3, [r4, #48]	; 0x30
 80066f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80066f8:	b121      	cbz	r1, 8006704 <_fclose_r+0x60>
 80066fa:	4628      	mov	r0, r5
 80066fc:	f7fc ffb0 	bl	8003660 <_free_r>
 8006700:	2300      	movs	r3, #0
 8006702:	6463      	str	r3, [r4, #68]	; 0x44
 8006704:	f7fc ff42 	bl	800358c <__sfp_lock_acquire>
 8006708:	2300      	movs	r3, #0
 800670a:	81a3      	strh	r3, [r4, #12]
 800670c:	f7fc ff40 	bl	8003590 <__sfp_lock_release>
 8006710:	4630      	mov	r0, r6
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	f7fc ff36 	bl	8003584 <__sinit>
 8006718:	e7cc      	b.n	80066b4 <_fclose_r+0x10>
 800671a:	6921      	ldr	r1, [r4, #16]
 800671c:	4628      	mov	r0, r5
 800671e:	f7fc ff9f 	bl	8003660 <_free_r>
 8006722:	e7dd      	b.n	80066e0 <_fclose_r+0x3c>
 8006724:	2000      	movs	r0, #0
 8006726:	4770      	bx	lr

08006728 <fclose>:
 8006728:	4b02      	ldr	r3, [pc, #8]	; (8006734 <fclose+0xc>)
 800672a:	4601      	mov	r1, r0
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	f7ff bfb9 	b.w	80066a4 <_fclose_r>
 8006732:	bf00      	nop
 8006734:	20000008 	.word	0x20000008

08006738 <__fputwc>:
 8006738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800673c:	b082      	sub	sp, #8
 800673e:	4680      	mov	r8, r0
 8006740:	4689      	mov	r9, r1
 8006742:	4614      	mov	r4, r2
 8006744:	f7fd fa6a 	bl	8003c1c <__locale_mb_cur_max>
 8006748:	2801      	cmp	r0, #1
 800674a:	d033      	beq.n	80067b4 <__fputwc+0x7c>
 800674c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8006750:	464a      	mov	r2, r9
 8006752:	a901      	add	r1, sp, #4
 8006754:	4640      	mov	r0, r8
 8006756:	f000 f86f 	bl	8006838 <_wcrtomb_r>
 800675a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800675e:	4682      	mov	sl, r0
 8006760:	d021      	beq.n	80067a6 <__fputwc+0x6e>
 8006762:	b388      	cbz	r0, 80067c8 <__fputwc+0x90>
 8006764:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8006768:	2500      	movs	r5, #0
 800676a:	e008      	b.n	800677e <__fputwc+0x46>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	6022      	str	r2, [r4, #0]
 8006772:	701e      	strb	r6, [r3, #0]
 8006774:	3501      	adds	r5, #1
 8006776:	4555      	cmp	r5, sl
 8006778:	d226      	bcs.n	80067c8 <__fputwc+0x90>
 800677a:	ab01      	add	r3, sp, #4
 800677c:	5d5e      	ldrb	r6, [r3, r5]
 800677e:	68a3      	ldr	r3, [r4, #8]
 8006780:	3b01      	subs	r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	60a3      	str	r3, [r4, #8]
 8006786:	daf1      	bge.n	800676c <__fputwc+0x34>
 8006788:	69a7      	ldr	r7, [r4, #24]
 800678a:	42bb      	cmp	r3, r7
 800678c:	4631      	mov	r1, r6
 800678e:	4622      	mov	r2, r4
 8006790:	4640      	mov	r0, r8
 8006792:	db01      	blt.n	8006798 <__fputwc+0x60>
 8006794:	2e0a      	cmp	r6, #10
 8006796:	d1e9      	bne.n	800676c <__fputwc+0x34>
 8006798:	f7ff fef6 	bl	8006588 <__swbuf_r>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d1e9      	bne.n	8006774 <__fputwc+0x3c>
 80067a0:	b002      	add	sp, #8
 80067a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ac:	81a3      	strh	r3, [r4, #12]
 80067ae:	b002      	add	sp, #8
 80067b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b4:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80067b8:	2bfe      	cmp	r3, #254	; 0xfe
 80067ba:	d8c7      	bhi.n	800674c <__fputwc+0x14>
 80067bc:	fa5f f689 	uxtb.w	r6, r9
 80067c0:	4682      	mov	sl, r0
 80067c2:	f88d 6004 	strb.w	r6, [sp, #4]
 80067c6:	e7cf      	b.n	8006768 <__fputwc+0x30>
 80067c8:	4648      	mov	r0, r9
 80067ca:	b002      	add	sp, #8
 80067cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080067d0 <_fputwc_r>:
 80067d0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80067d4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80067d8:	d10b      	bne.n	80067f2 <_fputwc_r+0x22>
 80067da:	b410      	push	{r4}
 80067dc:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80067de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80067e2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80067e6:	6654      	str	r4, [r2, #100]	; 0x64
 80067e8:	8193      	strh	r3, [r2, #12]
 80067ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ee:	f7ff bfa3 	b.w	8006738 <__fputwc>
 80067f2:	f7ff bfa1 	b.w	8006738 <__fputwc>
 80067f6:	bf00      	nop

080067f8 <fputwc>:
 80067f8:	4b0e      	ldr	r3, [pc, #56]	; (8006834 <fputwc+0x3c>)
 80067fa:	b570      	push	{r4, r5, r6, lr}
 80067fc:	681d      	ldr	r5, [r3, #0]
 80067fe:	4606      	mov	r6, r0
 8006800:	460c      	mov	r4, r1
 8006802:	b10d      	cbz	r5, 8006808 <fputwc+0x10>
 8006804:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006806:	b18b      	cbz	r3, 800682c <fputwc+0x34>
 8006808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680c:	049a      	lsls	r2, r3, #18
 800680e:	d406      	bmi.n	800681e <fputwc+0x26>
 8006810:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006816:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800681a:	81a3      	strh	r3, [r4, #12]
 800681c:	6662      	str	r2, [r4, #100]	; 0x64
 800681e:	4622      	mov	r2, r4
 8006820:	4631      	mov	r1, r6
 8006822:	4628      	mov	r0, r5
 8006824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006828:	f7ff bf86 	b.w	8006738 <__fputwc>
 800682c:	4628      	mov	r0, r5
 800682e:	f7fc fea9 	bl	8003584 <__sinit>
 8006832:	e7e9      	b.n	8006808 <fputwc+0x10>
 8006834:	20000008 	.word	0x20000008

08006838 <_wcrtomb_r>:
 8006838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800683c:	4605      	mov	r5, r0
 800683e:	b086      	sub	sp, #24
 8006840:	461e      	mov	r6, r3
 8006842:	460c      	mov	r4, r1
 8006844:	b1a1      	cbz	r1, 8006870 <_wcrtomb_r+0x38>
 8006846:	4b10      	ldr	r3, [pc, #64]	; (8006888 <_wcrtomb_r+0x50>)
 8006848:	4617      	mov	r7, r2
 800684a:	f8d3 8000 	ldr.w	r8, [r3]
 800684e:	f7fd f9e1 	bl	8003c14 <__locale_charset>
 8006852:	9600      	str	r6, [sp, #0]
 8006854:	4603      	mov	r3, r0
 8006856:	463a      	mov	r2, r7
 8006858:	4621      	mov	r1, r4
 800685a:	4628      	mov	r0, r5
 800685c:	47c0      	blx	r8
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	d103      	bne.n	800686a <_wcrtomb_r+0x32>
 8006862:	2200      	movs	r2, #0
 8006864:	238a      	movs	r3, #138	; 0x8a
 8006866:	6032      	str	r2, [r6, #0]
 8006868:	602b      	str	r3, [r5, #0]
 800686a:	b006      	add	sp, #24
 800686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006870:	4b05      	ldr	r3, [pc, #20]	; (8006888 <_wcrtomb_r+0x50>)
 8006872:	681f      	ldr	r7, [r3, #0]
 8006874:	f7fd f9ce 	bl	8003c14 <__locale_charset>
 8006878:	9600      	str	r6, [sp, #0]
 800687a:	4603      	mov	r3, r0
 800687c:	4622      	mov	r2, r4
 800687e:	a903      	add	r1, sp, #12
 8006880:	4628      	mov	r0, r5
 8006882:	47b8      	blx	r7
 8006884:	e7eb      	b.n	800685e <_wcrtomb_r+0x26>
 8006886:	bf00      	nop
 8006888:	200008c4 	.word	0x200008c4

0800688c <wcrtomb>:
 800688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006890:	4b12      	ldr	r3, [pc, #72]	; (80068dc <wcrtomb+0x50>)
 8006892:	b086      	sub	sp, #24
 8006894:	4616      	mov	r6, r2
 8006896:	681d      	ldr	r5, [r3, #0]
 8006898:	4604      	mov	r4, r0
 800689a:	b1a0      	cbz	r0, 80068c6 <wcrtomb+0x3a>
 800689c:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <wcrtomb+0x54>)
 800689e:	460f      	mov	r7, r1
 80068a0:	f8d3 8000 	ldr.w	r8, [r3]
 80068a4:	f7fd f9b6 	bl	8003c14 <__locale_charset>
 80068a8:	9600      	str	r6, [sp, #0]
 80068aa:	4603      	mov	r3, r0
 80068ac:	463a      	mov	r2, r7
 80068ae:	4621      	mov	r1, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	47c0      	blx	r8
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d103      	bne.n	80068c0 <wcrtomb+0x34>
 80068b8:	2200      	movs	r2, #0
 80068ba:	238a      	movs	r3, #138	; 0x8a
 80068bc:	6032      	str	r2, [r6, #0]
 80068be:	602b      	str	r3, [r5, #0]
 80068c0:	b006      	add	sp, #24
 80068c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c6:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <wcrtomb+0x54>)
 80068c8:	681f      	ldr	r7, [r3, #0]
 80068ca:	f7fd f9a3 	bl	8003c14 <__locale_charset>
 80068ce:	9600      	str	r6, [sp, #0]
 80068d0:	4603      	mov	r3, r0
 80068d2:	4622      	mov	r2, r4
 80068d4:	a903      	add	r1, sp, #12
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	e7eb      	b.n	80068b4 <wcrtomb+0x28>
 80068dc:	20000008 	.word	0x20000008
 80068e0:	200008c4 	.word	0x200008c4

080068e4 <__ascii_wctomb>:
 80068e4:	b121      	cbz	r1, 80068f0 <__ascii_wctomb+0xc>
 80068e6:	2aff      	cmp	r2, #255	; 0xff
 80068e8:	d804      	bhi.n	80068f4 <__ascii_wctomb+0x10>
 80068ea:	700a      	strb	r2, [r1, #0]
 80068ec:	2001      	movs	r0, #1
 80068ee:	4770      	bx	lr
 80068f0:	4608      	mov	r0, r1
 80068f2:	4770      	bx	lr
 80068f4:	238a      	movs	r3, #138	; 0x8a
 80068f6:	6003      	str	r3, [r0, #0]
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop

08006900 <_wctomb_r>:
 8006900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006904:	4c09      	ldr	r4, [pc, #36]	; (800692c <_wctomb_r+0x2c>)
 8006906:	b082      	sub	sp, #8
 8006908:	4698      	mov	r8, r3
 800690a:	4605      	mov	r5, r0
 800690c:	460e      	mov	r6, r1
 800690e:	4617      	mov	r7, r2
 8006910:	6824      	ldr	r4, [r4, #0]
 8006912:	f7fd f97f 	bl	8003c14 <__locale_charset>
 8006916:	f8cd 8000 	str.w	r8, [sp]
 800691a:	4603      	mov	r3, r0
 800691c:	463a      	mov	r2, r7
 800691e:	4631      	mov	r1, r6
 8006920:	4628      	mov	r0, r5
 8006922:	47a0      	blx	r4
 8006924:	b002      	add	sp, #8
 8006926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800692a:	bf00      	nop
 800692c:	200008c4 	.word	0x200008c4

08006930 <__aeabi_drsub>:
 8006930:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006934:	e002      	b.n	800693c <__adddf3>
 8006936:	bf00      	nop

08006938 <__aeabi_dsub>:
 8006938:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800693c <__adddf3>:
 800693c:	b530      	push	{r4, r5, lr}
 800693e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006942:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006946:	ea94 0f05 	teq	r4, r5
 800694a:	bf08      	it	eq
 800694c:	ea90 0f02 	teqeq	r0, r2
 8006950:	bf1f      	itttt	ne
 8006952:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006956:	ea55 0c02 	orrsne.w	ip, r5, r2
 800695a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800695e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006962:	f000 80e2 	beq.w	8006b2a <__adddf3+0x1ee>
 8006966:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800696a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800696e:	bfb8      	it	lt
 8006970:	426d      	neglt	r5, r5
 8006972:	dd0c      	ble.n	800698e <__adddf3+0x52>
 8006974:	442c      	add	r4, r5
 8006976:	ea80 0202 	eor.w	r2, r0, r2
 800697a:	ea81 0303 	eor.w	r3, r1, r3
 800697e:	ea82 0000 	eor.w	r0, r2, r0
 8006982:	ea83 0101 	eor.w	r1, r3, r1
 8006986:	ea80 0202 	eor.w	r2, r0, r2
 800698a:	ea81 0303 	eor.w	r3, r1, r3
 800698e:	2d36      	cmp	r5, #54	; 0x36
 8006990:	bf88      	it	hi
 8006992:	bd30      	pophi	{r4, r5, pc}
 8006994:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800699c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80069a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80069a4:	d002      	beq.n	80069ac <__adddf3+0x70>
 80069a6:	4240      	negs	r0, r0
 80069a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80069ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80069b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80069b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80069b8:	d002      	beq.n	80069c0 <__adddf3+0x84>
 80069ba:	4252      	negs	r2, r2
 80069bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80069c0:	ea94 0f05 	teq	r4, r5
 80069c4:	f000 80a7 	beq.w	8006b16 <__adddf3+0x1da>
 80069c8:	f1a4 0401 	sub.w	r4, r4, #1
 80069cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80069d0:	db0d      	blt.n	80069ee <__adddf3+0xb2>
 80069d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80069d6:	fa22 f205 	lsr.w	r2, r2, r5
 80069da:	1880      	adds	r0, r0, r2
 80069dc:	f141 0100 	adc.w	r1, r1, #0
 80069e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80069e4:	1880      	adds	r0, r0, r2
 80069e6:	fa43 f305 	asr.w	r3, r3, r5
 80069ea:	4159      	adcs	r1, r3
 80069ec:	e00e      	b.n	8006a0c <__adddf3+0xd0>
 80069ee:	f1a5 0520 	sub.w	r5, r5, #32
 80069f2:	f10e 0e20 	add.w	lr, lr, #32
 80069f6:	2a01      	cmp	r2, #1
 80069f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80069fc:	bf28      	it	cs
 80069fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006a02:	fa43 f305 	asr.w	r3, r3, r5
 8006a06:	18c0      	adds	r0, r0, r3
 8006a08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006a0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006a10:	d507      	bpl.n	8006a22 <__adddf3+0xe6>
 8006a12:	f04f 0e00 	mov.w	lr, #0
 8006a16:	f1dc 0c00 	rsbs	ip, ip, #0
 8006a1a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006a1e:	eb6e 0101 	sbc.w	r1, lr, r1
 8006a22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006a26:	d31b      	bcc.n	8006a60 <__adddf3+0x124>
 8006a28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006a2c:	d30c      	bcc.n	8006a48 <__adddf3+0x10c>
 8006a2e:	0849      	lsrs	r1, r1, #1
 8006a30:	ea5f 0030 	movs.w	r0, r0, rrx
 8006a34:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006a38:	f104 0401 	add.w	r4, r4, #1
 8006a3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006a40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006a44:	f080 809a 	bcs.w	8006b7c <__adddf3+0x240>
 8006a48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006a4c:	bf08      	it	eq
 8006a4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006a52:	f150 0000 	adcs.w	r0, r0, #0
 8006a56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a5a:	ea41 0105 	orr.w	r1, r1, r5
 8006a5e:	bd30      	pop	{r4, r5, pc}
 8006a60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006a64:	4140      	adcs	r0, r0
 8006a66:	eb41 0101 	adc.w	r1, r1, r1
 8006a6a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a6e:	f1a4 0401 	sub.w	r4, r4, #1
 8006a72:	d1e9      	bne.n	8006a48 <__adddf3+0x10c>
 8006a74:	f091 0f00 	teq	r1, #0
 8006a78:	bf04      	itt	eq
 8006a7a:	4601      	moveq	r1, r0
 8006a7c:	2000      	moveq	r0, #0
 8006a7e:	fab1 f381 	clz	r3, r1
 8006a82:	bf08      	it	eq
 8006a84:	3320      	addeq	r3, #32
 8006a86:	f1a3 030b 	sub.w	r3, r3, #11
 8006a8a:	f1b3 0220 	subs.w	r2, r3, #32
 8006a8e:	da0c      	bge.n	8006aaa <__adddf3+0x16e>
 8006a90:	320c      	adds	r2, #12
 8006a92:	dd08      	ble.n	8006aa6 <__adddf3+0x16a>
 8006a94:	f102 0c14 	add.w	ip, r2, #20
 8006a98:	f1c2 020c 	rsb	r2, r2, #12
 8006a9c:	fa01 f00c 	lsl.w	r0, r1, ip
 8006aa0:	fa21 f102 	lsr.w	r1, r1, r2
 8006aa4:	e00c      	b.n	8006ac0 <__adddf3+0x184>
 8006aa6:	f102 0214 	add.w	r2, r2, #20
 8006aaa:	bfd8      	it	le
 8006aac:	f1c2 0c20 	rsble	ip, r2, #32
 8006ab0:	fa01 f102 	lsl.w	r1, r1, r2
 8006ab4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006ab8:	bfdc      	itt	le
 8006aba:	ea41 010c 	orrle.w	r1, r1, ip
 8006abe:	4090      	lslle	r0, r2
 8006ac0:	1ae4      	subs	r4, r4, r3
 8006ac2:	bfa2      	ittt	ge
 8006ac4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006ac8:	4329      	orrge	r1, r5
 8006aca:	bd30      	popge	{r4, r5, pc}
 8006acc:	ea6f 0404 	mvn.w	r4, r4
 8006ad0:	3c1f      	subs	r4, #31
 8006ad2:	da1c      	bge.n	8006b0e <__adddf3+0x1d2>
 8006ad4:	340c      	adds	r4, #12
 8006ad6:	dc0e      	bgt.n	8006af6 <__adddf3+0x1ba>
 8006ad8:	f104 0414 	add.w	r4, r4, #20
 8006adc:	f1c4 0220 	rsb	r2, r4, #32
 8006ae0:	fa20 f004 	lsr.w	r0, r0, r4
 8006ae4:	fa01 f302 	lsl.w	r3, r1, r2
 8006ae8:	ea40 0003 	orr.w	r0, r0, r3
 8006aec:	fa21 f304 	lsr.w	r3, r1, r4
 8006af0:	ea45 0103 	orr.w	r1, r5, r3
 8006af4:	bd30      	pop	{r4, r5, pc}
 8006af6:	f1c4 040c 	rsb	r4, r4, #12
 8006afa:	f1c4 0220 	rsb	r2, r4, #32
 8006afe:	fa20 f002 	lsr.w	r0, r0, r2
 8006b02:	fa01 f304 	lsl.w	r3, r1, r4
 8006b06:	ea40 0003 	orr.w	r0, r0, r3
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	bd30      	pop	{r4, r5, pc}
 8006b0e:	fa21 f004 	lsr.w	r0, r1, r4
 8006b12:	4629      	mov	r1, r5
 8006b14:	bd30      	pop	{r4, r5, pc}
 8006b16:	f094 0f00 	teq	r4, #0
 8006b1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006b1e:	bf06      	itte	eq
 8006b20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006b24:	3401      	addeq	r4, #1
 8006b26:	3d01      	subne	r5, #1
 8006b28:	e74e      	b.n	80069c8 <__adddf3+0x8c>
 8006b2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006b2e:	bf18      	it	ne
 8006b30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006b34:	d029      	beq.n	8006b8a <__adddf3+0x24e>
 8006b36:	ea94 0f05 	teq	r4, r5
 8006b3a:	bf08      	it	eq
 8006b3c:	ea90 0f02 	teqeq	r0, r2
 8006b40:	d005      	beq.n	8006b4e <__adddf3+0x212>
 8006b42:	ea54 0c00 	orrs.w	ip, r4, r0
 8006b46:	bf04      	itt	eq
 8006b48:	4619      	moveq	r1, r3
 8006b4a:	4610      	moveq	r0, r2
 8006b4c:	bd30      	pop	{r4, r5, pc}
 8006b4e:	ea91 0f03 	teq	r1, r3
 8006b52:	bf1e      	ittt	ne
 8006b54:	2100      	movne	r1, #0
 8006b56:	2000      	movne	r0, #0
 8006b58:	bd30      	popne	{r4, r5, pc}
 8006b5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006b5e:	d105      	bne.n	8006b6c <__adddf3+0x230>
 8006b60:	0040      	lsls	r0, r0, #1
 8006b62:	4149      	adcs	r1, r1
 8006b64:	bf28      	it	cs
 8006b66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006b6a:	bd30      	pop	{r4, r5, pc}
 8006b6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006b70:	bf3c      	itt	cc
 8006b72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006b76:	bd30      	popcc	{r4, r5, pc}
 8006b78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006b7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006b80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b84:	f04f 0000 	mov.w	r0, #0
 8006b88:	bd30      	pop	{r4, r5, pc}
 8006b8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006b8e:	bf1a      	itte	ne
 8006b90:	4619      	movne	r1, r3
 8006b92:	4610      	movne	r0, r2
 8006b94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006b98:	bf1c      	itt	ne
 8006b9a:	460b      	movne	r3, r1
 8006b9c:	4602      	movne	r2, r0
 8006b9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006ba2:	bf06      	itte	eq
 8006ba4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006ba8:	ea91 0f03 	teqeq	r1, r3
 8006bac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006bb0:	bd30      	pop	{r4, r5, pc}
 8006bb2:	bf00      	nop

08006bb4 <__aeabi_ui2d>:
 8006bb4:	f090 0f00 	teq	r0, #0
 8006bb8:	bf04      	itt	eq
 8006bba:	2100      	moveq	r1, #0
 8006bbc:	4770      	bxeq	lr
 8006bbe:	b530      	push	{r4, r5, lr}
 8006bc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006bc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006bc8:	f04f 0500 	mov.w	r5, #0
 8006bcc:	f04f 0100 	mov.w	r1, #0
 8006bd0:	e750      	b.n	8006a74 <__adddf3+0x138>
 8006bd2:	bf00      	nop

08006bd4 <__aeabi_i2d>:
 8006bd4:	f090 0f00 	teq	r0, #0
 8006bd8:	bf04      	itt	eq
 8006bda:	2100      	moveq	r1, #0
 8006bdc:	4770      	bxeq	lr
 8006bde:	b530      	push	{r4, r5, lr}
 8006be0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006be4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006be8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006bec:	bf48      	it	mi
 8006bee:	4240      	negmi	r0, r0
 8006bf0:	f04f 0100 	mov.w	r1, #0
 8006bf4:	e73e      	b.n	8006a74 <__adddf3+0x138>
 8006bf6:	bf00      	nop

08006bf8 <__aeabi_f2d>:
 8006bf8:	0042      	lsls	r2, r0, #1
 8006bfa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006bfe:	ea4f 0131 	mov.w	r1, r1, rrx
 8006c02:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006c06:	bf1f      	itttt	ne
 8006c08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006c0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006c10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006c14:	4770      	bxne	lr
 8006c16:	f092 0f00 	teq	r2, #0
 8006c1a:	bf14      	ite	ne
 8006c1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006c20:	4770      	bxeq	lr
 8006c22:	b530      	push	{r4, r5, lr}
 8006c24:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006c28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006c2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006c30:	e720      	b.n	8006a74 <__adddf3+0x138>
 8006c32:	bf00      	nop

08006c34 <__aeabi_ul2d>:
 8006c34:	ea50 0201 	orrs.w	r2, r0, r1
 8006c38:	bf08      	it	eq
 8006c3a:	4770      	bxeq	lr
 8006c3c:	b530      	push	{r4, r5, lr}
 8006c3e:	f04f 0500 	mov.w	r5, #0
 8006c42:	e00a      	b.n	8006c5a <__aeabi_l2d+0x16>

08006c44 <__aeabi_l2d>:
 8006c44:	ea50 0201 	orrs.w	r2, r0, r1
 8006c48:	bf08      	it	eq
 8006c4a:	4770      	bxeq	lr
 8006c4c:	b530      	push	{r4, r5, lr}
 8006c4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006c52:	d502      	bpl.n	8006c5a <__aeabi_l2d+0x16>
 8006c54:	4240      	negs	r0, r0
 8006c56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006c5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006c62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006c66:	f43f aedc 	beq.w	8006a22 <__adddf3+0xe6>
 8006c6a:	f04f 0203 	mov.w	r2, #3
 8006c6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c72:	bf18      	it	ne
 8006c74:	3203      	addne	r2, #3
 8006c76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c7a:	bf18      	it	ne
 8006c7c:	3203      	addne	r2, #3
 8006c7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006c82:	f1c2 0320 	rsb	r3, r2, #32
 8006c86:	fa00 fc03 	lsl.w	ip, r0, r3
 8006c8a:	fa20 f002 	lsr.w	r0, r0, r2
 8006c8e:	fa01 fe03 	lsl.w	lr, r1, r3
 8006c92:	ea40 000e 	orr.w	r0, r0, lr
 8006c96:	fa21 f102 	lsr.w	r1, r1, r2
 8006c9a:	4414      	add	r4, r2
 8006c9c:	e6c1      	b.n	8006a22 <__adddf3+0xe6>
 8006c9e:	bf00      	nop

08006ca0 <__aeabi_dmul>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006ca6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006caa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006cae:	bf1d      	ittte	ne
 8006cb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006cb4:	ea94 0f0c 	teqne	r4, ip
 8006cb8:	ea95 0f0c 	teqne	r5, ip
 8006cbc:	f000 f8de 	bleq	8006e7c <__aeabi_dmul+0x1dc>
 8006cc0:	442c      	add	r4, r5
 8006cc2:	ea81 0603 	eor.w	r6, r1, r3
 8006cc6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006cca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006cce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006cd2:	bf18      	it	ne
 8006cd4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006cd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ce0:	d038      	beq.n	8006d54 <__aeabi_dmul+0xb4>
 8006ce2:	fba0 ce02 	umull	ip, lr, r0, r2
 8006ce6:	f04f 0500 	mov.w	r5, #0
 8006cea:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006cee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006cf2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006cf6:	f04f 0600 	mov.w	r6, #0
 8006cfa:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006cfe:	f09c 0f00 	teq	ip, #0
 8006d02:	bf18      	it	ne
 8006d04:	f04e 0e01 	orrne.w	lr, lr, #1
 8006d08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006d0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006d10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006d14:	d204      	bcs.n	8006d20 <__aeabi_dmul+0x80>
 8006d16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006d1a:	416d      	adcs	r5, r5
 8006d1c:	eb46 0606 	adc.w	r6, r6, r6
 8006d20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006d24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006d28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006d2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006d30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006d34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006d38:	bf88      	it	hi
 8006d3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006d3e:	d81e      	bhi.n	8006d7e <__aeabi_dmul+0xde>
 8006d40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006d44:	bf08      	it	eq
 8006d46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006d4a:	f150 0000 	adcs.w	r0, r0, #0
 8006d4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006d58:	ea46 0101 	orr.w	r1, r6, r1
 8006d5c:	ea40 0002 	orr.w	r0, r0, r2
 8006d60:	ea81 0103 	eor.w	r1, r1, r3
 8006d64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006d68:	bfc2      	ittt	gt
 8006d6a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006d6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006d72:	bd70      	popgt	{r4, r5, r6, pc}
 8006d74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d78:	f04f 0e00 	mov.w	lr, #0
 8006d7c:	3c01      	subs	r4, #1
 8006d7e:	f300 80ab 	bgt.w	8006ed8 <__aeabi_dmul+0x238>
 8006d82:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006d86:	bfde      	ittt	le
 8006d88:	2000      	movle	r0, #0
 8006d8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006d8e:	bd70      	pople	{r4, r5, r6, pc}
 8006d90:	f1c4 0400 	rsb	r4, r4, #0
 8006d94:	3c20      	subs	r4, #32
 8006d96:	da35      	bge.n	8006e04 <__aeabi_dmul+0x164>
 8006d98:	340c      	adds	r4, #12
 8006d9a:	dc1b      	bgt.n	8006dd4 <__aeabi_dmul+0x134>
 8006d9c:	f104 0414 	add.w	r4, r4, #20
 8006da0:	f1c4 0520 	rsb	r5, r4, #32
 8006da4:	fa00 f305 	lsl.w	r3, r0, r5
 8006da8:	fa20 f004 	lsr.w	r0, r0, r4
 8006dac:	fa01 f205 	lsl.w	r2, r1, r5
 8006db0:	ea40 0002 	orr.w	r0, r0, r2
 8006db4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006db8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006dbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006dc0:	fa21 f604 	lsr.w	r6, r1, r4
 8006dc4:	eb42 0106 	adc.w	r1, r2, r6
 8006dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006dcc:	bf08      	it	eq
 8006dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006dd2:	bd70      	pop	{r4, r5, r6, pc}
 8006dd4:	f1c4 040c 	rsb	r4, r4, #12
 8006dd8:	f1c4 0520 	rsb	r5, r4, #32
 8006ddc:	fa00 f304 	lsl.w	r3, r0, r4
 8006de0:	fa20 f005 	lsr.w	r0, r0, r5
 8006de4:	fa01 f204 	lsl.w	r2, r1, r4
 8006de8:	ea40 0002 	orr.w	r0, r0, r2
 8006dec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006df0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006df4:	f141 0100 	adc.w	r1, r1, #0
 8006df8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006dfc:	bf08      	it	eq
 8006dfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006e02:	bd70      	pop	{r4, r5, r6, pc}
 8006e04:	f1c4 0520 	rsb	r5, r4, #32
 8006e08:	fa00 f205 	lsl.w	r2, r0, r5
 8006e0c:	ea4e 0e02 	orr.w	lr, lr, r2
 8006e10:	fa20 f304 	lsr.w	r3, r0, r4
 8006e14:	fa01 f205 	lsl.w	r2, r1, r5
 8006e18:	ea43 0302 	orr.w	r3, r3, r2
 8006e1c:	fa21 f004 	lsr.w	r0, r1, r4
 8006e20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006e24:	fa21 f204 	lsr.w	r2, r1, r4
 8006e28:	ea20 0002 	bic.w	r0, r0, r2
 8006e2c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006e30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006e34:	bf08      	it	eq
 8006e36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
 8006e3c:	f094 0f00 	teq	r4, #0
 8006e40:	d10f      	bne.n	8006e62 <__aeabi_dmul+0x1c2>
 8006e42:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006e46:	0040      	lsls	r0, r0, #1
 8006e48:	eb41 0101 	adc.w	r1, r1, r1
 8006e4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006e50:	bf08      	it	eq
 8006e52:	3c01      	subeq	r4, #1
 8006e54:	d0f7      	beq.n	8006e46 <__aeabi_dmul+0x1a6>
 8006e56:	ea41 0106 	orr.w	r1, r1, r6
 8006e5a:	f095 0f00 	teq	r5, #0
 8006e5e:	bf18      	it	ne
 8006e60:	4770      	bxne	lr
 8006e62:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006e66:	0052      	lsls	r2, r2, #1
 8006e68:	eb43 0303 	adc.w	r3, r3, r3
 8006e6c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006e70:	bf08      	it	eq
 8006e72:	3d01      	subeq	r5, #1
 8006e74:	d0f7      	beq.n	8006e66 <__aeabi_dmul+0x1c6>
 8006e76:	ea43 0306 	orr.w	r3, r3, r6
 8006e7a:	4770      	bx	lr
 8006e7c:	ea94 0f0c 	teq	r4, ip
 8006e80:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006e84:	bf18      	it	ne
 8006e86:	ea95 0f0c 	teqne	r5, ip
 8006e8a:	d00c      	beq.n	8006ea6 <__aeabi_dmul+0x206>
 8006e8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006e90:	bf18      	it	ne
 8006e92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006e96:	d1d1      	bne.n	8006e3c <__aeabi_dmul+0x19c>
 8006e98:	ea81 0103 	eor.w	r1, r1, r3
 8006e9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006ea0:	f04f 0000 	mov.w	r0, #0
 8006ea4:	bd70      	pop	{r4, r5, r6, pc}
 8006ea6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006eaa:	bf06      	itte	eq
 8006eac:	4610      	moveq	r0, r2
 8006eae:	4619      	moveq	r1, r3
 8006eb0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006eb4:	d019      	beq.n	8006eea <__aeabi_dmul+0x24a>
 8006eb6:	ea94 0f0c 	teq	r4, ip
 8006eba:	d102      	bne.n	8006ec2 <__aeabi_dmul+0x222>
 8006ebc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006ec0:	d113      	bne.n	8006eea <__aeabi_dmul+0x24a>
 8006ec2:	ea95 0f0c 	teq	r5, ip
 8006ec6:	d105      	bne.n	8006ed4 <__aeabi_dmul+0x234>
 8006ec8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006ecc:	bf1c      	itt	ne
 8006ece:	4610      	movne	r0, r2
 8006ed0:	4619      	movne	r1, r3
 8006ed2:	d10a      	bne.n	8006eea <__aeabi_dmul+0x24a>
 8006ed4:	ea81 0103 	eor.w	r1, r1, r3
 8006ed8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006edc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006ee0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ee4:	f04f 0000 	mov.w	r0, #0
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}
 8006eea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006eee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}

08006ef4 <__aeabi_ddiv>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006efa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006efe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006f02:	bf1d      	ittte	ne
 8006f04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006f08:	ea94 0f0c 	teqne	r4, ip
 8006f0c:	ea95 0f0c 	teqne	r5, ip
 8006f10:	f000 f8a7 	bleq	8007062 <__aeabi_ddiv+0x16e>
 8006f14:	eba4 0405 	sub.w	r4, r4, r5
 8006f18:	ea81 0e03 	eor.w	lr, r1, r3
 8006f1c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006f20:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006f24:	f000 8088 	beq.w	8007038 <__aeabi_ddiv+0x144>
 8006f28:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006f2c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006f30:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006f34:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006f38:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006f3c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006f40:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006f44:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006f48:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006f4c:	429d      	cmp	r5, r3
 8006f4e:	bf08      	it	eq
 8006f50:	4296      	cmpeq	r6, r2
 8006f52:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006f56:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006f5a:	d202      	bcs.n	8006f62 <__aeabi_ddiv+0x6e>
 8006f5c:	085b      	lsrs	r3, r3, #1
 8006f5e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f62:	1ab6      	subs	r6, r6, r2
 8006f64:	eb65 0503 	sbc.w	r5, r5, r3
 8006f68:	085b      	lsrs	r3, r3, #1
 8006f6a:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006f72:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006f76:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f7e:	bf22      	ittt	cs
 8006f80:	1ab6      	subcs	r6, r6, r2
 8006f82:	4675      	movcs	r5, lr
 8006f84:	ea40 000c 	orrcs.w	r0, r0, ip
 8006f88:	085b      	lsrs	r3, r3, #1
 8006f8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f96:	bf22      	ittt	cs
 8006f98:	1ab6      	subcs	r6, r6, r2
 8006f9a:	4675      	movcs	r5, lr
 8006f9c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006fa0:	085b      	lsrs	r3, r3, #1
 8006fa2:	ea4f 0232 	mov.w	r2, r2, rrx
 8006fa6:	ebb6 0e02 	subs.w	lr, r6, r2
 8006faa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006fae:	bf22      	ittt	cs
 8006fb0:	1ab6      	subcs	r6, r6, r2
 8006fb2:	4675      	movcs	r5, lr
 8006fb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006fb8:	085b      	lsrs	r3, r3, #1
 8006fba:	ea4f 0232 	mov.w	r2, r2, rrx
 8006fbe:	ebb6 0e02 	subs.w	lr, r6, r2
 8006fc2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006fc6:	bf22      	ittt	cs
 8006fc8:	1ab6      	subcs	r6, r6, r2
 8006fca:	4675      	movcs	r5, lr
 8006fcc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006fd0:	ea55 0e06 	orrs.w	lr, r5, r6
 8006fd4:	d018      	beq.n	8007008 <__aeabi_ddiv+0x114>
 8006fd6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006fda:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006fde:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006fe2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006fe6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006fea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006fee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006ff2:	d1c0      	bne.n	8006f76 <__aeabi_ddiv+0x82>
 8006ff4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ff8:	d10b      	bne.n	8007012 <__aeabi_ddiv+0x11e>
 8006ffa:	ea41 0100 	orr.w	r1, r1, r0
 8006ffe:	f04f 0000 	mov.w	r0, #0
 8007002:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007006:	e7b6      	b.n	8006f76 <__aeabi_ddiv+0x82>
 8007008:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800700c:	bf04      	itt	eq
 800700e:	4301      	orreq	r1, r0
 8007010:	2000      	moveq	r0, #0
 8007012:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007016:	bf88      	it	hi
 8007018:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800701c:	f63f aeaf 	bhi.w	8006d7e <__aeabi_dmul+0xde>
 8007020:	ebb5 0c03 	subs.w	ip, r5, r3
 8007024:	bf04      	itt	eq
 8007026:	ebb6 0c02 	subseq.w	ip, r6, r2
 800702a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800702e:	f150 0000 	adcs.w	r0, r0, #0
 8007032:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800703c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007040:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007044:	bfc2      	ittt	gt
 8007046:	ebd4 050c 	rsbsgt	r5, r4, ip
 800704a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800704e:	bd70      	popgt	{r4, r5, r6, pc}
 8007050:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007054:	f04f 0e00 	mov.w	lr, #0
 8007058:	3c01      	subs	r4, #1
 800705a:	e690      	b.n	8006d7e <__aeabi_dmul+0xde>
 800705c:	ea45 0e06 	orr.w	lr, r5, r6
 8007060:	e68d      	b.n	8006d7e <__aeabi_dmul+0xde>
 8007062:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007066:	ea94 0f0c 	teq	r4, ip
 800706a:	bf08      	it	eq
 800706c:	ea95 0f0c 	teqeq	r5, ip
 8007070:	f43f af3b 	beq.w	8006eea <__aeabi_dmul+0x24a>
 8007074:	ea94 0f0c 	teq	r4, ip
 8007078:	d10a      	bne.n	8007090 <__aeabi_ddiv+0x19c>
 800707a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800707e:	f47f af34 	bne.w	8006eea <__aeabi_dmul+0x24a>
 8007082:	ea95 0f0c 	teq	r5, ip
 8007086:	f47f af25 	bne.w	8006ed4 <__aeabi_dmul+0x234>
 800708a:	4610      	mov	r0, r2
 800708c:	4619      	mov	r1, r3
 800708e:	e72c      	b.n	8006eea <__aeabi_dmul+0x24a>
 8007090:	ea95 0f0c 	teq	r5, ip
 8007094:	d106      	bne.n	80070a4 <__aeabi_ddiv+0x1b0>
 8007096:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800709a:	f43f aefd 	beq.w	8006e98 <__aeabi_dmul+0x1f8>
 800709e:	4610      	mov	r0, r2
 80070a0:	4619      	mov	r1, r3
 80070a2:	e722      	b.n	8006eea <__aeabi_dmul+0x24a>
 80070a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80070a8:	bf18      	it	ne
 80070aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80070ae:	f47f aec5 	bne.w	8006e3c <__aeabi_dmul+0x19c>
 80070b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80070b6:	f47f af0d 	bne.w	8006ed4 <__aeabi_dmul+0x234>
 80070ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80070be:	f47f aeeb 	bne.w	8006e98 <__aeabi_dmul+0x1f8>
 80070c2:	e712      	b.n	8006eea <__aeabi_dmul+0x24a>

080070c4 <__gedf2>:
 80070c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80070c8:	e006      	b.n	80070d8 <__cmpdf2+0x4>
 80070ca:	bf00      	nop

080070cc <__ledf2>:
 80070cc:	f04f 0c01 	mov.w	ip, #1
 80070d0:	e002      	b.n	80070d8 <__cmpdf2+0x4>
 80070d2:	bf00      	nop

080070d4 <__cmpdf2>:
 80070d4:	f04f 0c01 	mov.w	ip, #1
 80070d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80070dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80070e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80070e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80070e8:	bf18      	it	ne
 80070ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80070ee:	d01b      	beq.n	8007128 <__cmpdf2+0x54>
 80070f0:	b001      	add	sp, #4
 80070f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80070f6:	bf0c      	ite	eq
 80070f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80070fc:	ea91 0f03 	teqne	r1, r3
 8007100:	bf02      	ittt	eq
 8007102:	ea90 0f02 	teqeq	r0, r2
 8007106:	2000      	moveq	r0, #0
 8007108:	4770      	bxeq	lr
 800710a:	f110 0f00 	cmn.w	r0, #0
 800710e:	ea91 0f03 	teq	r1, r3
 8007112:	bf58      	it	pl
 8007114:	4299      	cmppl	r1, r3
 8007116:	bf08      	it	eq
 8007118:	4290      	cmpeq	r0, r2
 800711a:	bf2c      	ite	cs
 800711c:	17d8      	asrcs	r0, r3, #31
 800711e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8007122:	f040 0001 	orr.w	r0, r0, #1
 8007126:	4770      	bx	lr
 8007128:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800712c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007130:	d102      	bne.n	8007138 <__cmpdf2+0x64>
 8007132:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007136:	d107      	bne.n	8007148 <__cmpdf2+0x74>
 8007138:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800713c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007140:	d1d6      	bne.n	80070f0 <__cmpdf2+0x1c>
 8007142:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007146:	d0d3      	beq.n	80070f0 <__cmpdf2+0x1c>
 8007148:	f85d 0b04 	ldr.w	r0, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop

08007150 <__aeabi_cdrcmple>:
 8007150:	4684      	mov	ip, r0
 8007152:	4610      	mov	r0, r2
 8007154:	4662      	mov	r2, ip
 8007156:	468c      	mov	ip, r1
 8007158:	4619      	mov	r1, r3
 800715a:	4663      	mov	r3, ip
 800715c:	e000      	b.n	8007160 <__aeabi_cdcmpeq>
 800715e:	bf00      	nop

08007160 <__aeabi_cdcmpeq>:
 8007160:	b501      	push	{r0, lr}
 8007162:	f7ff ffb7 	bl	80070d4 <__cmpdf2>
 8007166:	2800      	cmp	r0, #0
 8007168:	bf48      	it	mi
 800716a:	f110 0f00 	cmnmi.w	r0, #0
 800716e:	bd01      	pop	{r0, pc}

08007170 <__aeabi_dcmpeq>:
 8007170:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007174:	f7ff fff4 	bl	8007160 <__aeabi_cdcmpeq>
 8007178:	bf0c      	ite	eq
 800717a:	2001      	moveq	r0, #1
 800717c:	2000      	movne	r0, #0
 800717e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007182:	bf00      	nop

08007184 <__aeabi_dcmplt>:
 8007184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007188:	f7ff ffea 	bl	8007160 <__aeabi_cdcmpeq>
 800718c:	bf34      	ite	cc
 800718e:	2001      	movcc	r0, #1
 8007190:	2000      	movcs	r0, #0
 8007192:	f85d fb08 	ldr.w	pc, [sp], #8
 8007196:	bf00      	nop

08007198 <__aeabi_dcmple>:
 8007198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800719c:	f7ff ffe0 	bl	8007160 <__aeabi_cdcmpeq>
 80071a0:	bf94      	ite	ls
 80071a2:	2001      	movls	r0, #1
 80071a4:	2000      	movhi	r0, #0
 80071a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80071aa:	bf00      	nop

080071ac <__aeabi_dcmpge>:
 80071ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80071b0:	f7ff ffce 	bl	8007150 <__aeabi_cdrcmple>
 80071b4:	bf94      	ite	ls
 80071b6:	2001      	movls	r0, #1
 80071b8:	2000      	movhi	r0, #0
 80071ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80071be:	bf00      	nop

080071c0 <__aeabi_dcmpgt>:
 80071c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80071c4:	f7ff ffc4 	bl	8007150 <__aeabi_cdrcmple>
 80071c8:	bf34      	ite	cc
 80071ca:	2001      	movcc	r0, #1
 80071cc:	2000      	movcs	r0, #0
 80071ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80071d2:	bf00      	nop

080071d4 <__aeabi_dcmpun>:
 80071d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80071d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80071dc:	d102      	bne.n	80071e4 <__aeabi_dcmpun+0x10>
 80071de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80071e2:	d10a      	bne.n	80071fa <__aeabi_dcmpun+0x26>
 80071e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80071e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80071ec:	d102      	bne.n	80071f4 <__aeabi_dcmpun+0x20>
 80071ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80071f2:	d102      	bne.n	80071fa <__aeabi_dcmpun+0x26>
 80071f4:	f04f 0000 	mov.w	r0, #0
 80071f8:	4770      	bx	lr
 80071fa:	f04f 0001 	mov.w	r0, #1
 80071fe:	4770      	bx	lr

08007200 <__aeabi_d2iz>:
 8007200:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007204:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007208:	d215      	bcs.n	8007236 <__aeabi_d2iz+0x36>
 800720a:	d511      	bpl.n	8007230 <__aeabi_d2iz+0x30>
 800720c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007210:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007214:	d912      	bls.n	800723c <__aeabi_d2iz+0x3c>
 8007216:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800721a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800721e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007222:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007226:	fa23 f002 	lsr.w	r0, r3, r2
 800722a:	bf18      	it	ne
 800722c:	4240      	negne	r0, r0
 800722e:	4770      	bx	lr
 8007230:	f04f 0000 	mov.w	r0, #0
 8007234:	4770      	bx	lr
 8007236:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800723a:	d105      	bne.n	8007248 <__aeabi_d2iz+0x48>
 800723c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007240:	bf08      	it	eq
 8007242:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007246:	4770      	bx	lr
 8007248:	f04f 0000 	mov.w	r0, #0
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop

08007250 <__aeabi_uldivmod>:
 8007250:	b953      	cbnz	r3, 8007268 <__aeabi_uldivmod+0x18>
 8007252:	b94a      	cbnz	r2, 8007268 <__aeabi_uldivmod+0x18>
 8007254:	2900      	cmp	r1, #0
 8007256:	bf08      	it	eq
 8007258:	2800      	cmpeq	r0, #0
 800725a:	bf1c      	itt	ne
 800725c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007260:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007264:	f000 b97e 	b.w	8007564 <__aeabi_idiv0>
 8007268:	f1ad 0c08 	sub.w	ip, sp, #8
 800726c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007270:	f000 f806 	bl	8007280 <__udivmoddi4>
 8007274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800727c:	b004      	add	sp, #16
 800727e:	4770      	bx	lr

08007280 <__udivmoddi4>:
 8007280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007284:	468c      	mov	ip, r1
 8007286:	460e      	mov	r6, r1
 8007288:	4604      	mov	r4, r0
 800728a:	9d08      	ldr	r5, [sp, #32]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d150      	bne.n	8007332 <__udivmoddi4+0xb2>
 8007290:	428a      	cmp	r2, r1
 8007292:	4617      	mov	r7, r2
 8007294:	d96c      	bls.n	8007370 <__udivmoddi4+0xf0>
 8007296:	fab2 fe82 	clz	lr, r2
 800729a:	f1be 0f00 	cmp.w	lr, #0
 800729e:	d00b      	beq.n	80072b8 <__udivmoddi4+0x38>
 80072a0:	f1ce 0420 	rsb	r4, lr, #32
 80072a4:	fa20 f404 	lsr.w	r4, r0, r4
 80072a8:	fa01 f60e 	lsl.w	r6, r1, lr
 80072ac:	ea44 0c06 	orr.w	ip, r4, r6
 80072b0:	fa02 f70e 	lsl.w	r7, r2, lr
 80072b4:	fa00 f40e 	lsl.w	r4, r0, lr
 80072b8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80072bc:	0c22      	lsrs	r2, r4, #16
 80072be:	fbbc f0f9 	udiv	r0, ip, r9
 80072c2:	fa1f f887 	uxth.w	r8, r7
 80072c6:	fb09 c610 	mls	r6, r9, r0, ip
 80072ca:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80072ce:	fb00 f308 	mul.w	r3, r0, r8
 80072d2:	42b3      	cmp	r3, r6
 80072d4:	d909      	bls.n	80072ea <__udivmoddi4+0x6a>
 80072d6:	19f6      	adds	r6, r6, r7
 80072d8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80072dc:	f080 8122 	bcs.w	8007524 <__udivmoddi4+0x2a4>
 80072e0:	42b3      	cmp	r3, r6
 80072e2:	f240 811f 	bls.w	8007524 <__udivmoddi4+0x2a4>
 80072e6:	3802      	subs	r0, #2
 80072e8:	443e      	add	r6, r7
 80072ea:	1af6      	subs	r6, r6, r3
 80072ec:	b2a2      	uxth	r2, r4
 80072ee:	fbb6 f3f9 	udiv	r3, r6, r9
 80072f2:	fb09 6613 	mls	r6, r9, r3, r6
 80072f6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80072fa:	fb03 f808 	mul.w	r8, r3, r8
 80072fe:	45a0      	cmp	r8, r4
 8007300:	d909      	bls.n	8007316 <__udivmoddi4+0x96>
 8007302:	19e4      	adds	r4, r4, r7
 8007304:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007308:	f080 810a 	bcs.w	8007520 <__udivmoddi4+0x2a0>
 800730c:	45a0      	cmp	r8, r4
 800730e:	f240 8107 	bls.w	8007520 <__udivmoddi4+0x2a0>
 8007312:	3b02      	subs	r3, #2
 8007314:	443c      	add	r4, r7
 8007316:	ebc8 0404 	rsb	r4, r8, r4
 800731a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800731e:	2100      	movs	r1, #0
 8007320:	2d00      	cmp	r5, #0
 8007322:	d062      	beq.n	80073ea <__udivmoddi4+0x16a>
 8007324:	fa24 f40e 	lsr.w	r4, r4, lr
 8007328:	2300      	movs	r3, #0
 800732a:	602c      	str	r4, [r5, #0]
 800732c:	606b      	str	r3, [r5, #4]
 800732e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007332:	428b      	cmp	r3, r1
 8007334:	d907      	bls.n	8007346 <__udivmoddi4+0xc6>
 8007336:	2d00      	cmp	r5, #0
 8007338:	d055      	beq.n	80073e6 <__udivmoddi4+0x166>
 800733a:	2100      	movs	r1, #0
 800733c:	e885 0041 	stmia.w	r5, {r0, r6}
 8007340:	4608      	mov	r0, r1
 8007342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007346:	fab3 f183 	clz	r1, r3
 800734a:	2900      	cmp	r1, #0
 800734c:	f040 8090 	bne.w	8007470 <__udivmoddi4+0x1f0>
 8007350:	42b3      	cmp	r3, r6
 8007352:	d302      	bcc.n	800735a <__udivmoddi4+0xda>
 8007354:	4282      	cmp	r2, r0
 8007356:	f200 80f8 	bhi.w	800754a <__udivmoddi4+0x2ca>
 800735a:	1a84      	subs	r4, r0, r2
 800735c:	eb66 0603 	sbc.w	r6, r6, r3
 8007360:	2001      	movs	r0, #1
 8007362:	46b4      	mov	ip, r6
 8007364:	2d00      	cmp	r5, #0
 8007366:	d040      	beq.n	80073ea <__udivmoddi4+0x16a>
 8007368:	e885 1010 	stmia.w	r5, {r4, ip}
 800736c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007370:	b912      	cbnz	r2, 8007378 <__udivmoddi4+0xf8>
 8007372:	2701      	movs	r7, #1
 8007374:	fbb7 f7f2 	udiv	r7, r7, r2
 8007378:	fab7 fe87 	clz	lr, r7
 800737c:	f1be 0f00 	cmp.w	lr, #0
 8007380:	d135      	bne.n	80073ee <__udivmoddi4+0x16e>
 8007382:	1bf3      	subs	r3, r6, r7
 8007384:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8007388:	fa1f fc87 	uxth.w	ip, r7
 800738c:	2101      	movs	r1, #1
 800738e:	fbb3 f0f8 	udiv	r0, r3, r8
 8007392:	0c22      	lsrs	r2, r4, #16
 8007394:	fb08 3610 	mls	r6, r8, r0, r3
 8007398:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800739c:	fb0c f300 	mul.w	r3, ip, r0
 80073a0:	42b3      	cmp	r3, r6
 80073a2:	d907      	bls.n	80073b4 <__udivmoddi4+0x134>
 80073a4:	19f6      	adds	r6, r6, r7
 80073a6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80073aa:	d202      	bcs.n	80073b2 <__udivmoddi4+0x132>
 80073ac:	42b3      	cmp	r3, r6
 80073ae:	f200 80ce 	bhi.w	800754e <__udivmoddi4+0x2ce>
 80073b2:	4610      	mov	r0, r2
 80073b4:	1af6      	subs	r6, r6, r3
 80073b6:	b2a2      	uxth	r2, r4
 80073b8:	fbb6 f3f8 	udiv	r3, r6, r8
 80073bc:	fb08 6613 	mls	r6, r8, r3, r6
 80073c0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80073c4:	fb0c fc03 	mul.w	ip, ip, r3
 80073c8:	45a4      	cmp	ip, r4
 80073ca:	d907      	bls.n	80073dc <__udivmoddi4+0x15c>
 80073cc:	19e4      	adds	r4, r4, r7
 80073ce:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80073d2:	d202      	bcs.n	80073da <__udivmoddi4+0x15a>
 80073d4:	45a4      	cmp	ip, r4
 80073d6:	f200 80b5 	bhi.w	8007544 <__udivmoddi4+0x2c4>
 80073da:	4613      	mov	r3, r2
 80073dc:	ebcc 0404 	rsb	r4, ip, r4
 80073e0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80073e4:	e79c      	b.n	8007320 <__udivmoddi4+0xa0>
 80073e6:	4629      	mov	r1, r5
 80073e8:	4628      	mov	r0, r5
 80073ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ee:	f1ce 0120 	rsb	r1, lr, #32
 80073f2:	fa06 f30e 	lsl.w	r3, r6, lr
 80073f6:	fa07 f70e 	lsl.w	r7, r7, lr
 80073fa:	fa20 f901 	lsr.w	r9, r0, r1
 80073fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8007402:	40ce      	lsrs	r6, r1
 8007404:	ea49 0903 	orr.w	r9, r9, r3
 8007408:	fbb6 faf8 	udiv	sl, r6, r8
 800740c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8007410:	fb08 661a 	mls	r6, r8, sl, r6
 8007414:	fa1f fc87 	uxth.w	ip, r7
 8007418:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800741c:	fb0a f20c 	mul.w	r2, sl, ip
 8007420:	429a      	cmp	r2, r3
 8007422:	fa00 f40e 	lsl.w	r4, r0, lr
 8007426:	d90a      	bls.n	800743e <__udivmoddi4+0x1be>
 8007428:	19db      	adds	r3, r3, r7
 800742a:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 800742e:	f080 8087 	bcs.w	8007540 <__udivmoddi4+0x2c0>
 8007432:	429a      	cmp	r2, r3
 8007434:	f240 8084 	bls.w	8007540 <__udivmoddi4+0x2c0>
 8007438:	f1aa 0a02 	sub.w	sl, sl, #2
 800743c:	443b      	add	r3, r7
 800743e:	1a9b      	subs	r3, r3, r2
 8007440:	fa1f f989 	uxth.w	r9, r9
 8007444:	fbb3 f1f8 	udiv	r1, r3, r8
 8007448:	fb08 3311 	mls	r3, r8, r1, r3
 800744c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8007450:	fb01 f60c 	mul.w	r6, r1, ip
 8007454:	429e      	cmp	r6, r3
 8007456:	d907      	bls.n	8007468 <__udivmoddi4+0x1e8>
 8007458:	19db      	adds	r3, r3, r7
 800745a:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800745e:	d26b      	bcs.n	8007538 <__udivmoddi4+0x2b8>
 8007460:	429e      	cmp	r6, r3
 8007462:	d969      	bls.n	8007538 <__udivmoddi4+0x2b8>
 8007464:	3902      	subs	r1, #2
 8007466:	443b      	add	r3, r7
 8007468:	1b9b      	subs	r3, r3, r6
 800746a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800746e:	e78e      	b.n	800738e <__udivmoddi4+0x10e>
 8007470:	f1c1 0e20 	rsb	lr, r1, #32
 8007474:	fa22 f40e 	lsr.w	r4, r2, lr
 8007478:	408b      	lsls	r3, r1
 800747a:	4323      	orrs	r3, r4
 800747c:	fa20 f70e 	lsr.w	r7, r0, lr
 8007480:	fa06 f401 	lsl.w	r4, r6, r1
 8007484:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8007488:	fa26 f60e 	lsr.w	r6, r6, lr
 800748c:	433c      	orrs	r4, r7
 800748e:	fbb6 f9fc 	udiv	r9, r6, ip
 8007492:	0c27      	lsrs	r7, r4, #16
 8007494:	fb0c 6619 	mls	r6, ip, r9, r6
 8007498:	fa1f f883 	uxth.w	r8, r3
 800749c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 80074a0:	fb09 f708 	mul.w	r7, r9, r8
 80074a4:	42b7      	cmp	r7, r6
 80074a6:	fa02 f201 	lsl.w	r2, r2, r1
 80074aa:	fa00 fa01 	lsl.w	sl, r0, r1
 80074ae:	d908      	bls.n	80074c2 <__udivmoddi4+0x242>
 80074b0:	18f6      	adds	r6, r6, r3
 80074b2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80074b6:	d241      	bcs.n	800753c <__udivmoddi4+0x2bc>
 80074b8:	42b7      	cmp	r7, r6
 80074ba:	d93f      	bls.n	800753c <__udivmoddi4+0x2bc>
 80074bc:	f1a9 0902 	sub.w	r9, r9, #2
 80074c0:	441e      	add	r6, r3
 80074c2:	1bf6      	subs	r6, r6, r7
 80074c4:	b2a0      	uxth	r0, r4
 80074c6:	fbb6 f4fc 	udiv	r4, r6, ip
 80074ca:	fb0c 6614 	mls	r6, ip, r4, r6
 80074ce:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 80074d2:	fb04 f808 	mul.w	r8, r4, r8
 80074d6:	45b8      	cmp	r8, r7
 80074d8:	d907      	bls.n	80074ea <__udivmoddi4+0x26a>
 80074da:	18ff      	adds	r7, r7, r3
 80074dc:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
 80074e0:	d228      	bcs.n	8007534 <__udivmoddi4+0x2b4>
 80074e2:	45b8      	cmp	r8, r7
 80074e4:	d926      	bls.n	8007534 <__udivmoddi4+0x2b4>
 80074e6:	3c02      	subs	r4, #2
 80074e8:	441f      	add	r7, r3
 80074ea:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 80074ee:	ebc8 0707 	rsb	r7, r8, r7
 80074f2:	fba0 8902 	umull	r8, r9, r0, r2
 80074f6:	454f      	cmp	r7, r9
 80074f8:	4644      	mov	r4, r8
 80074fa:	464e      	mov	r6, r9
 80074fc:	d314      	bcc.n	8007528 <__udivmoddi4+0x2a8>
 80074fe:	d029      	beq.n	8007554 <__udivmoddi4+0x2d4>
 8007500:	b365      	cbz	r5, 800755c <__udivmoddi4+0x2dc>
 8007502:	ebba 0304 	subs.w	r3, sl, r4
 8007506:	eb67 0706 	sbc.w	r7, r7, r6
 800750a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800750e:	40cb      	lsrs	r3, r1
 8007510:	40cf      	lsrs	r7, r1
 8007512:	ea4e 0303 	orr.w	r3, lr, r3
 8007516:	e885 0088 	stmia.w	r5, {r3, r7}
 800751a:	2100      	movs	r1, #0
 800751c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007520:	4613      	mov	r3, r2
 8007522:	e6f8      	b.n	8007316 <__udivmoddi4+0x96>
 8007524:	4610      	mov	r0, r2
 8007526:	e6e0      	b.n	80072ea <__udivmoddi4+0x6a>
 8007528:	ebb8 0402 	subs.w	r4, r8, r2
 800752c:	eb69 0603 	sbc.w	r6, r9, r3
 8007530:	3801      	subs	r0, #1
 8007532:	e7e5      	b.n	8007500 <__udivmoddi4+0x280>
 8007534:	4604      	mov	r4, r0
 8007536:	e7d8      	b.n	80074ea <__udivmoddi4+0x26a>
 8007538:	4611      	mov	r1, r2
 800753a:	e795      	b.n	8007468 <__udivmoddi4+0x1e8>
 800753c:	4681      	mov	r9, r0
 800753e:	e7c0      	b.n	80074c2 <__udivmoddi4+0x242>
 8007540:	468a      	mov	sl, r1
 8007542:	e77c      	b.n	800743e <__udivmoddi4+0x1be>
 8007544:	3b02      	subs	r3, #2
 8007546:	443c      	add	r4, r7
 8007548:	e748      	b.n	80073dc <__udivmoddi4+0x15c>
 800754a:	4608      	mov	r0, r1
 800754c:	e70a      	b.n	8007364 <__udivmoddi4+0xe4>
 800754e:	3802      	subs	r0, #2
 8007550:	443e      	add	r6, r7
 8007552:	e72f      	b.n	80073b4 <__udivmoddi4+0x134>
 8007554:	45c2      	cmp	sl, r8
 8007556:	d3e7      	bcc.n	8007528 <__udivmoddi4+0x2a8>
 8007558:	463e      	mov	r6, r7
 800755a:	e7d1      	b.n	8007500 <__udivmoddi4+0x280>
 800755c:	4629      	mov	r1, r5
 800755e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007562:	bf00      	nop

08007564 <__aeabi_idiv0>:
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop

08007568 <CmdLED>:
    HAL_IncTick();
    my_Tick();
}

void CmdLED(int mode)
{
 8007568:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 800756a:	b9f8      	cbnz	r0, 80075ac <CmdLED+0x44>
    return;
  }

  rc = fetch_uint32_arg(&led);
 800756c:	4668      	mov	r0, sp
 800756e:	f000 fb5b 	bl	8007c28 <fetch_uint32_arg>
  if(rc) {
 8007572:	b108      	cbz	r0, 8007578 <CmdLED+0x10>
    printf("Missing LED index\n");
 8007574:	480f      	ldr	r0, [pc, #60]	; (80075b4 <CmdLED+0x4c>)
 8007576:	e004      	b.n	8007582 <CmdLED+0x1a>
    return;
  }
    
  rc = fetch_uint32_arg(&val);
 8007578:	a801      	add	r0, sp, #4
 800757a:	f000 fb55 	bl	8007c28 <fetch_uint32_arg>
  if(rc) {
 800757e:	b118      	cbz	r0, 8007588 <CmdLED+0x20>
    printf("Missing state value, 0 for Off, 1 for On\n");
 8007580:	480d      	ldr	r0, [pc, #52]	; (80075b8 <CmdLED+0x50>)
 8007582:	f7f8 ff87 	bl	8000494 <puts>
    return;
 8007586:	e011      	b.n	80075ac <CmdLED+0x44>
  }
  
  if((led < 3) || (led > 10)) {
 8007588:	9900      	ldr	r1, [sp, #0]
 800758a:	1ecb      	subs	r3, r1, #3
 800758c:	2b07      	cmp	r3, #7
 800758e:	d903      	bls.n	8007598 <CmdLED+0x30>
    printf("Led index of %u is out of the range (3..10)\n",
 8007590:	480a      	ldr	r0, [pc, #40]	; (80075bc <CmdLED+0x54>)
 8007592:	f7f8 ff29 	bl	80003e8 <printf>
	   (unsigned int)led);
    return;
 8007596:	e009      	b.n	80075ac <CmdLED+0x44>
 8007598:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <CmdLED+0x58>)
  }

  led -= 3;
  if(val) {
 800759a:	9901      	ldr	r1, [sp, #4]
  led -= 3;
 800759c:	9300      	str	r3, [sp, #0]
    BSP_LED_On(LEDs[led]);
 800759e:	5cd0      	ldrb	r0, [r2, r3]
  if(val) {
 80075a0:	b111      	cbz	r1, 80075a8 <CmdLED+0x40>
    BSP_LED_On(LEDs[led]);
 80075a2:	f004 f9b1 	bl	800b908 <BSP_LED_On>
 80075a6:	e001      	b.n	80075ac <CmdLED+0x44>
  } else {
    BSP_LED_Off(LEDs[led]);
 80075a8:	f004 f9bc 	bl	800b924 <BSP_LED_Off>
  }

} 
 80075ac:	b003      	add	sp, #12
 80075ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80075b2:	bf00      	nop
 80075b4:	0800c890 	.word	0x0800c890
 80075b8:	0800c8a2 	.word	0x0800c8a2
 80075bc:	0800c8cb 	.word	0x0800c8cb
 80075c0:	0800ca62 	.word	0x0800ca62

080075c4 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 80075c4:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80075c6:	b958      	cbnz	r0, 80075e0 <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 80075c8:	4668      	mov	r0, sp
 80075ca:	f004 fb2d 	bl	800bc28 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 80075ce:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80075d2:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80075d6:	f9bd 1000 	ldrsh.w	r1, [sp]
 80075da:	4803      	ldr	r0, [pc, #12]	; (80075e8 <CmdAccel+0x24>)
 80075dc:	f7f8 ff04 	bl	80003e8 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 80075e0:	b003      	add	sp, #12
 80075e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80075e6:	bf00      	nop
 80075e8:	0800c8f8 	.word	0x0800c8f8

080075ec <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 80075ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80075ee:	b9f8      	cbnz	r0, 8007630 <CmdGyro+0x44>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 80075f0:	a801      	add	r0, sp, #4
 80075f2:	f004 fb43 	bl	800bc7c <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
 80075f6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007638 <CmdGyro+0x4c>
 80075fa:	eddd 6a03 	vldr	s13, [sp, #12]
 80075fe:	ed9d 7a02 	vldr	s14, [sp, #8]
 8007602:	eddd 7a01 	vldr	s15, [sp, #4]
 8007606:	480d      	ldr	r0, [pc, #52]	; (800763c <CmdGyro+0x50>)
 8007608:	ee66 6a86 	vmul.f32	s13, s13, s12
 800760c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007610:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007614:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8007618:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800761c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007620:	ee16 3a90 	vmov	r3, s13
 8007624:	ee17 2a10 	vmov	r2, s14
 8007628:	ee17 1a90 	vmov	r1, s15
 800762c:	f7f8 fedc 	bl	80003e8 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8007630:	b005      	add	sp, #20
 8007632:	f85d fb04 	ldr.w	pc, [sp], #4
 8007636:	bf00      	nop
 8007638:	43800000 	.word	0x43800000
 800763c:	0800c92b 	.word	0x0800c92b

08007640 <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8007640:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 8007642:	b958      	cbnz	r0, 800765c <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8007644:	f004 f9c2 	bl	800b9cc <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 8007648:	4b05      	ldr	r3, [pc, #20]	; (8007660 <CmdButton+0x20>)
 800764a:	4906      	ldr	r1, [pc, #24]	; (8007664 <CmdButton+0x24>)
 800764c:	2800      	cmp	r0, #0
 800764e:	bf08      	it	eq
 8007650:	4619      	moveq	r1, r3
 8007652:	4805      	ldr	r0, [pc, #20]	; (8007668 <CmdButton+0x28>)
	 button ? "Pressed" : "Released");

  return;
}
 8007654:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("Button is currently: %s\n",
 8007658:	f7f8 bec6 	b.w	80003e8 <printf>
 800765c:	bd08      	pop	{r3, pc}
 800765e:	bf00      	nop
 8007660:	0800c962 	.word	0x0800c962
 8007664:	0800c95a 	.word	0x0800c95a
 8007668:	0800c96b 	.word	0x0800c96b

0800766c <Error_Handler>:
{
 800766c:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 800766e:	2003      	movs	r0, #3
 8007670:	f004 f94a 	bl	800b908 <BSP_LED_On>
 8007674:	e7fe      	b.n	8007674 <Error_Handler+0x8>
	...

08007678 <main>:
{
 8007678:	b530      	push	{r4, r5, lr}
 800767a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800767c:	2301      	movs	r3, #1
 800767e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007680:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007682:	2300      	movs	r3, #0
 8007684:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800768a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800768c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800768e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007690:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007694:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007696:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8007698:	f001 f80a 	bl	80086b0 <HAL_RCC_OscConfig>
 800769c:	bb10      	cbnz	r0, 80076e4 <main+0x6c>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800769e:	230f      	movs	r3, #15
 80076a0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80076a2:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80076a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80076a8:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80076aa:	4621      	mov	r1, r4
 80076ac:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80076ae:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80076b0:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80076b2:	f001 faeb 	bl	8008c8c <HAL_RCC_ClockConfig>
 80076b6:	4604      	mov	r4, r0
 80076b8:	b9a0      	cbnz	r0, 80076e4 <main+0x6c>
  HAL_Init();
 80076ba:	f001 fcad 	bl	8009018 <HAL_Init>
  TerminalInit();  /* Initialize UART and USB */
 80076be:	f000 fbe7 	bl	8007e90 <TerminalInit>
    BSP_LED_Init(LEDs[i]);
 80076c2:	4d0f      	ldr	r5, [pc, #60]	; (8007700 <main+0x88>)
 80076c4:	5d28      	ldrb	r0, [r5, r4]
  for(i=0; i<numLEDs; i++) {
 80076c6:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 80076c8:	f004 f8ea 	bl	800b8a0 <BSP_LED_Init>
  for(i=0; i<numLEDs; i++) {
 80076cc:	2c08      	cmp	r4, #8
 80076ce:	d1f9      	bne.n	80076c4 <main+0x4c>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80076d0:	2100      	movs	r1, #0
 80076d2:	4608      	mov	r0, r1
 80076d4:	f004 f940 	bl	800b958 <BSP_PB_Init>
  accelRc = BSP_ACCELERO_Init();
 80076d8:	f004 fa8e 	bl	800bbf8 <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 80076dc:	b120      	cbz	r0, 80076e8 <main+0x70>
    printf("Failed to initialize acceleromter\n");
 80076de:	4809      	ldr	r0, [pc, #36]	; (8007704 <main+0x8c>)
 80076e0:	f7f8 fed8 	bl	8000494 <puts>
    Error_Handler();
 80076e4:	f7ff ffc2 	bl	800766c <Error_Handler>
  gyroRc = BSP_GYRO_Init();
 80076e8:	f004 faa6 	bl	800bc38 <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 80076ec:	b108      	cbz	r0, 80076f2 <main+0x7a>
    printf("Failed to initialize Gyroscope\n");
 80076ee:	4806      	ldr	r0, [pc, #24]	; (8007708 <main+0x90>)
 80076f0:	e7f6      	b.n	80076e0 <main+0x68>
  my_Init();
 80076f2:	f7f8 fdcf 	bl	8000294 <my_Init>
    TaskInput();
 80076f6:	f000 f9ff 	bl	8007af8 <TaskInput>
    my_Loop();
 80076fa:	f7f8 fdc9 	bl	8000290 <my_Loop>
 80076fe:	e7fa      	b.n	80076f6 <main+0x7e>
 8007700:	0800ca62 	.word	0x0800ca62
 8007704:	0800c984 	.word	0x0800c984
 8007708:	0800c9a6 	.word	0x0800c9a6

0800770c <SysTick_Handler>:
{
 800770c:	b508      	push	{r3, lr}
    HAL_IncTick();
 800770e:	f001 fc95 	bl	800903c <HAL_IncTick>
}
 8007712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    my_Tick();
 8007716:	f7f8 bdb1 	b.w	800027c <my_Tick>
	...

0800771c <CMD_GPIO_INIT>:
#include "stm32f3_discovery.h"

#include "common.h"


void CMD_GPIO_INIT(int mode) {
 800771c:	b510      	push	{r4, lr}
 800771e:	b088      	sub	sp, #32
    
    if (mode != CMD_INTERACTIVE) {
 8007720:	2800      	cmp	r0, #0
 8007722:	f040 808b 	bne.w	800783c <CMD_GPIO_INIT+0x120>
        return;
    }
    
    uint32_t port = 0;
 8007726:	9001      	str	r0, [sp, #4]
    uint32_t pin = 0;
 8007728:	9002      	str	r0, [sp, #8]
    
    if (fetch_uint32_arg(&port)) {
 800772a:	a801      	add	r0, sp, #4
 800772c:	f000 fa7c 	bl	8007c28 <fetch_uint32_arg>
 8007730:	b110      	cbz	r0, 8007738 <CMD_GPIO_INIT+0x1c>
        printf("No Port specified\r\n");
 8007732:	4843      	ldr	r0, [pc, #268]	; (8007840 <CMD_GPIO_INIT+0x124>)
 8007734:	f7f8 feae 	bl	8000494 <puts>
    }
    if (fetch_uint32_arg(&pin)) {
 8007738:	a802      	add	r0, sp, #8
 800773a:	f000 fa75 	bl	8007c28 <fetch_uint32_arg>
 800773e:	b110      	cbz	r0, 8007746 <CMD_GPIO_INIT+0x2a>
        printf("No Pin specified\r\n");
 8007740:	4840      	ldr	r0, [pc, #256]	; (8007844 <CMD_GPIO_INIT+0x128>)
 8007742:	f7f8 fea7 	bl	8000494 <puts>
    }
    
	printf("The port is %d", (int)port);
 8007746:	9901      	ldr	r1, [sp, #4]
 8007748:	483f      	ldr	r0, [pc, #252]	; (8007848 <CMD_GPIO_INIT+0x12c>)
 800774a:	f7f8 fe4d 	bl	80003e8 <printf>

    GPIO_InitTypeDef GPIO_InitStruct;
	/*Configure GPIO pin : */
	switch(pin)
 800774e:	9b02      	ldr	r3, [sp, #8]
 8007750:	2401      	movs	r4, #1
 8007752:	2b0f      	cmp	r3, #15
 8007754:	d832      	bhi.n	80077bc <CMD_GPIO_INIT+0xa0>
 8007756:	e8df f003 	tbb	[pc, r3]
 800775a:	0a08      	.short	0x0a08
 800775c:	13110f0c 	.word	0x13110f0c
 8007760:	1c191715 	.word	0x1c191715
 8007764:	2825221f 	.word	0x2825221f
 8007768:	2e2b      	.short	0x2e2b
	{
		case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 800776a:	9403      	str	r4, [sp, #12]
 800776c:	e029      	b.n	80077c2 <CMD_GPIO_INIT+0xa6>
		case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 800776e:	2302      	movs	r3, #2
 8007770:	e000      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8007772:	2304      	movs	r3, #4
 8007774:	9303      	str	r3, [sp, #12]
 8007776:	e024      	b.n	80077c2 <CMD_GPIO_INIT+0xa6>
		case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8007778:	2308      	movs	r3, #8
 800777a:	e7fb      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 800777c:	2310      	movs	r3, #16
 800777e:	e7f9      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 8007780:	2320      	movs	r3, #32
 8007782:	e7f7      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8007784:	2340      	movs	r3, #64	; 0x40
 8007786:	e7f5      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8007788:	2380      	movs	r3, #128	; 0x80
 800778a:	e7f3      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 800778c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007790:	e7f0      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8007792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007796:	e7ed      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 8007798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800779c:	e7ea      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 800779e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077a2:	e7e7      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 80077a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077a8:	e7e4      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 80077aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077ae:	e7e1      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 80077b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077b4:	e7de      	b.n	8007774 <CMD_GPIO_INIT+0x58>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 80077b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ba:	e7db      	b.n	8007774 <CMD_GPIO_INIT+0x58>
            default: printf("No such a pin! Must be 0 - 15");
 80077bc:	4823      	ldr	r0, [pc, #140]	; (800784c <CMD_GPIO_INIT+0x130>)
 80077be:	f7f8 fe13 	bl	80003e8 <printf>
	}
        
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	9305      	str	r3, [sp, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
        GPIO_InitStruct.Alternate = 0;
 80077c6:	9307      	str	r3, [sp, #28]
        
	switch (port)
 80077c8:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077ca:	9404      	str	r4, [sp, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80077cc:	2203      	movs	r2, #3
	switch (port)
 80077ce:	3b41      	subs	r3, #65	; 0x41
        GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80077d0:	9206      	str	r2, [sp, #24]
	switch (port)
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d82f      	bhi.n	8007836 <CMD_GPIO_INIT+0x11a>
 80077d6:	e8df f003 	tbb	[pc, r3]
 80077da:	0c03      	.short	0x0c03
 80077dc:	1c14      	.short	0x1c14
 80077de:	24          	.byte	0x24
 80077df:	00          	.byte	0x00
	{
                case 'A': __GPIOA_CLK_ENABLE(); HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 80077e0:	4a1b      	ldr	r2, [pc, #108]	; (8007850 <CMD_GPIO_INIT+0x134>)
 80077e2:	6953      	ldr	r3, [r2, #20]
 80077e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077e8:	6153      	str	r3, [r2, #20]
 80077ea:	a903      	add	r1, sp, #12
 80077ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077f0:	e01e      	b.n	8007830 <CMD_GPIO_INIT+0x114>
                case 'B': __GPIOB_CLK_ENABLE(); HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 80077f2:	4a17      	ldr	r2, [pc, #92]	; (8007850 <CMD_GPIO_INIT+0x134>)
 80077f4:	4817      	ldr	r0, [pc, #92]	; (8007854 <CMD_GPIO_INIT+0x138>)
 80077f6:	6953      	ldr	r3, [r2, #20]
 80077f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077fc:	6153      	str	r3, [r2, #20]
 80077fe:	a903      	add	r1, sp, #12
 8007800:	e016      	b.n	8007830 <CMD_GPIO_INIT+0x114>
                case 'C': __GPIOC_CLK_ENABLE(); HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 8007802:	4a13      	ldr	r2, [pc, #76]	; (8007850 <CMD_GPIO_INIT+0x134>)
 8007804:	4814      	ldr	r0, [pc, #80]	; (8007858 <CMD_GPIO_INIT+0x13c>)
 8007806:	6953      	ldr	r3, [r2, #20]
 8007808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800780c:	6153      	str	r3, [r2, #20]
 800780e:	a903      	add	r1, sp, #12
 8007810:	e00e      	b.n	8007830 <CMD_GPIO_INIT+0x114>
                case 'D': __GPIOD_CLK_ENABLE(); HAL_GPIO_Init(GPIOD, &GPIO_InitStruct); break;
 8007812:	4a0f      	ldr	r2, [pc, #60]	; (8007850 <CMD_GPIO_INIT+0x134>)
 8007814:	4811      	ldr	r0, [pc, #68]	; (800785c <CMD_GPIO_INIT+0x140>)
 8007816:	6953      	ldr	r3, [r2, #20]
 8007818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800781c:	6153      	str	r3, [r2, #20]
 800781e:	a903      	add	r1, sp, #12
 8007820:	e006      	b.n	8007830 <CMD_GPIO_INIT+0x114>
                case 'E': __GPIOE_CLK_ENABLE(); HAL_GPIO_Init(GPIOE, &GPIO_InitStruct); break;
 8007822:	4a0b      	ldr	r2, [pc, #44]	; (8007850 <CMD_GPIO_INIT+0x134>)
 8007824:	480e      	ldr	r0, [pc, #56]	; (8007860 <CMD_GPIO_INIT+0x144>)
 8007826:	6953      	ldr	r3, [r2, #20]
 8007828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800782c:	6153      	str	r3, [r2, #20]
 800782e:	a903      	add	r1, sp, #12
 8007830:	f001 fc88 	bl	8009144 <HAL_GPIO_Init>
 8007834:	e002      	b.n	800783c <CMD_GPIO_INIT+0x120>
            default: printf("No such a pin! Must be A to E");
 8007836:	480b      	ldr	r0, [pc, #44]	; (8007864 <CMD_GPIO_INIT+0x148>)
 8007838:	f7f8 fdd6 	bl	80003e8 <printf>
	}
}
 800783c:	b008      	add	sp, #32
 800783e:	bd10      	pop	{r4, pc}
 8007840:	0800ca6a 	.word	0x0800ca6a
 8007844:	0800ca7d 	.word	0x0800ca7d
 8007848:	0800ca8f 	.word	0x0800ca8f
 800784c:	0800ca9e 	.word	0x0800ca9e
 8007850:	40021000 	.word	0x40021000
 8007854:	48000400 	.word	0x48000400
 8007858:	48000800 	.word	0x48000800
 800785c:	48000c00 	.word	0x48000c00
 8007860:	48001000 	.word	0x48001000
 8007864:	0800cabc 	.word	0x0800cabc

08007868 <CMD_GPIO_TOGGLE>:

ADD_CMD("gpioinit", CMD_GPIO_INIT, "<times> <pattern(1-3)> <delay> Turn on/off All Leds in sequence")

void CMD_GPIO_TOGGLE(int mode) {
 8007868:	b530      	push	{r4, r5, lr}
 800786a:	b085      	sub	sp, #20
    if (mode != CMD_INTERACTIVE) {
 800786c:	2800      	cmp	r0, #0
 800786e:	d172      	bne.n	8007956 <CMD_GPIO_TOGGLE+0xee>
        return;
    }
    
    uint32_t gpioPort = 0;
 8007870:	9001      	str	r0, [sp, #4]
    uint32_t gpioPin = 0;
 8007872:	9002      	str	r0, [sp, #8]
    uint32_t gpioStatus = 0;
 8007874:	9003      	str	r0, [sp, #12]
    
    if (fetch_uint32_arg(&gpioPort)) {
 8007876:	a801      	add	r0, sp, #4
 8007878:	f000 f9d6 	bl	8007c28 <fetch_uint32_arg>
 800787c:	b110      	cbz	r0, 8007884 <CMD_GPIO_TOGGLE+0x1c>
        printf("No Port specified\r\n");
 800787e:	4837      	ldr	r0, [pc, #220]	; (800795c <CMD_GPIO_TOGGLE+0xf4>)
 8007880:	f7f8 fe08 	bl	8000494 <puts>
    }
    if (fetch_uint32_arg(&gpioPin)) {
 8007884:	a802      	add	r0, sp, #8
 8007886:	f000 f9cf 	bl	8007c28 <fetch_uint32_arg>
 800788a:	b110      	cbz	r0, 8007892 <CMD_GPIO_TOGGLE+0x2a>
        printf("No Pin specified\r\n");
 800788c:	4834      	ldr	r0, [pc, #208]	; (8007960 <CMD_GPIO_TOGGLE+0xf8>)
 800788e:	f7f8 fe01 	bl	8000494 <puts>
    }
    if (fetch_uint32_arg(&gpioStatus)) {
 8007892:	a803      	add	r0, sp, #12
 8007894:	f000 f9c8 	bl	8007c28 <fetch_uint32_arg>
 8007898:	b110      	cbz	r0, 80078a0 <CMD_GPIO_TOGGLE+0x38>
        printf("No Pin specified\r\n");
 800789a:	4831      	ldr	r0, [pc, #196]	; (8007960 <CMD_GPIO_TOGGLE+0xf8>)
 800789c:	f7f8 fdfa 	bl	8000494 <puts>
    }
    
    uint16_t pin = 0;
	/*Configure GPIO pin : */
	switch(gpioPin)
 80078a0:	9b02      	ldr	r3, [sp, #8]
 80078a2:	2b0f      	cmp	r3, #15
 80078a4:	d82f      	bhi.n	8007906 <CMD_GPIO_TOGGLE+0x9e>
 80078a6:	e8df f003 	tbb	[pc, r3]
 80078aa:	0833      	.short	0x0833
 80078ac:	100e0c0a 	.word	0x100e0c0a
 80078b0:	19161412 	.word	0x19161412
 80078b4:	25221f1c 	.word	0x25221f1c
 80078b8:	2b28      	.short	0x2b28
	{
		case 0: pin = GPIO_PIN_0; break;
		case 1: pin = GPIO_PIN_1; break;
 80078ba:	2402      	movs	r4, #2
 80078bc:	e029      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 2: pin = GPIO_PIN_2; break;
 80078be:	2404      	movs	r4, #4
 80078c0:	e027      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 3: pin = GPIO_PIN_3; break;
 80078c2:	2408      	movs	r4, #8
 80078c4:	e025      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 4: pin = GPIO_PIN_4; break;
 80078c6:	2410      	movs	r4, #16
 80078c8:	e023      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 5: pin = GPIO_PIN_5; break;
 80078ca:	2420      	movs	r4, #32
 80078cc:	e021      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 6: pin = GPIO_PIN_6; break;
 80078ce:	2440      	movs	r4, #64	; 0x40
 80078d0:	e01f      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 7: pin = GPIO_PIN_7; break;
 80078d2:	2480      	movs	r4, #128	; 0x80
 80078d4:	e01d      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 8: pin = GPIO_PIN_8; break;
 80078d6:	f44f 7480 	mov.w	r4, #256	; 0x100
 80078da:	e01a      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 9: pin = GPIO_PIN_9; break;
 80078dc:	f44f 7400 	mov.w	r4, #512	; 0x200
 80078e0:	e017      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 10: pin = GPIO_PIN_10; break;
 80078e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80078e6:	e014      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 11: pin = GPIO_PIN_11; break;
 80078e8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80078ec:	e011      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 12: pin = GPIO_PIN_12; break;
 80078ee:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80078f2:	e00e      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 13: pin = GPIO_PIN_13; break;
 80078f4:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 80078f8:	e00b      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 14: pin = GPIO_PIN_14; break;
 80078fa:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 80078fe:	e008      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 15: pin= GPIO_PIN_15; break;
 8007900:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8007904:	e005      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
            default: printf("No such a pin! Must be 0 - 15");
 8007906:	4817      	ldr	r0, [pc, #92]	; (8007964 <CMD_GPIO_TOGGLE+0xfc>)
 8007908:	f7f8 fd6e 	bl	80003e8 <printf>
    uint16_t pin = 0;
 800790c:	2400      	movs	r4, #0
 800790e:	e000      	b.n	8007912 <CMD_GPIO_TOGGLE+0xaa>
		case 0: pin = GPIO_PIN_0; break;
 8007910:	2401      	movs	r4, #1
	}
        
        GPIO_TypeDef* port = GPIOE;
        
	switch (gpioPort)
 8007912:	9b01      	ldr	r3, [sp, #4]
 8007914:	3b41      	subs	r3, #65	; 0x41
 8007916:	2b04      	cmp	r3, #4
 8007918:	d80a      	bhi.n	8007930 <CMD_GPIO_TOGGLE+0xc8>
 800791a:	e8df f003 	tbb	[pc, r3]
 800791e:	030e      	.short	0x030e
 8007920:	0705      	.short	0x0705
 8007922:	0c          	.byte	0x0c
 8007923:	00          	.byte	0x00
	{
                case 'A': port = GPIOA; break;
                case 'B': port = GPIOB; break;
 8007924:	4d10      	ldr	r5, [pc, #64]	; (8007968 <CMD_GPIO_TOGGLE+0x100>)
 8007926:	e00a      	b.n	800793e <CMD_GPIO_TOGGLE+0xd6>
                case 'C': port = GPIOC; break;
 8007928:	4d10      	ldr	r5, [pc, #64]	; (800796c <CMD_GPIO_TOGGLE+0x104>)
 800792a:	e008      	b.n	800793e <CMD_GPIO_TOGGLE+0xd6>
                case 'D': port = GPIOD; break;
 800792c:	4d10      	ldr	r5, [pc, #64]	; (8007970 <CMD_GPIO_TOGGLE+0x108>)
 800792e:	e006      	b.n	800793e <CMD_GPIO_TOGGLE+0xd6>
                case 'E': port = GPIOE; break;
            default: printf("No such a pin! Must be A to E");
 8007930:	4810      	ldr	r0, [pc, #64]	; (8007974 <CMD_GPIO_TOGGLE+0x10c>)
 8007932:	f7f8 fd59 	bl	80003e8 <printf>
        GPIO_TypeDef* port = GPIOE;
 8007936:	4d10      	ldr	r5, [pc, #64]	; (8007978 <CMD_GPIO_TOGGLE+0x110>)
 8007938:	e001      	b.n	800793e <CMD_GPIO_TOGGLE+0xd6>
                case 'A': port = GPIOA; break;
 800793a:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
	}
        printf("The port is %d", (int)port);
 800793e:	4629      	mov	r1, r5
 8007940:	480e      	ldr	r0, [pc, #56]	; (800797c <CMD_GPIO_TOGGLE+0x114>)
 8007942:	f7f8 fd51 	bl	80003e8 <printf>
        switch(gpioStatus) {
            case 0 : status = GPIO_PIN_RESET; break;
            case 1 : status = GPIO_PIN_SET; break;
        }
        
    HAL_GPIO_WritePin(port, pin, status);
 8007946:	9a03      	ldr	r2, [sp, #12]
 8007948:	1e53      	subs	r3, r2, #1
 800794a:	425a      	negs	r2, r3
 800794c:	415a      	adcs	r2, r3
 800794e:	4621      	mov	r1, r4
 8007950:	4628      	mov	r0, r5
 8007952:	f001 fcc3 	bl	80092dc <HAL_GPIO_WritePin>
}
 8007956:	b005      	add	sp, #20
 8007958:	bd30      	pop	{r4, r5, pc}
 800795a:	bf00      	nop
 800795c:	0800ca6a 	.word	0x0800ca6a
 8007960:	0800ca7d 	.word	0x0800ca7d
 8007964:	0800ca9e 	.word	0x0800ca9e
 8007968:	48000400 	.word	0x48000400
 800796c:	48000800 	.word	0x48000800
 8007970:	48000c00 	.word	0x48000c00
 8007974:	0800cabc 	.word	0x0800cabc
 8007978:	48001000 	.word	0x48001000
 800797c:	0800ca8f 	.word	0x0800ca8f

08007980 <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 8007980:	2801      	cmp	r0, #1
{
 8007982:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return;
 8007984:	d00f      	beq.n	80079a6 <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 8007986:	2802      	cmp	r0, #2
 8007988:	d104      	bne.n	8007994 <CmdTest+0x14>
    printf("testasm\n\n"
 800798a:	4807      	ldr	r0, [pc, #28]	; (80079a8 <CmdTest+0x28>)
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 800798c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("testasm\n\n"
 8007990:	f7f8 bd80 	b.w	8000494 <puts>
  printf("ret val = %d\n", mytest( 77  ) );
 8007994:	204d      	movs	r0, #77	; 0x4d
 8007996:	f7f8 fc65 	bl	8000264 <mytest>
}
 800799a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("ret val = %d\n", mytest( 77  ) );
 800799e:	4601      	mov	r1, r0
 80079a0:	4802      	ldr	r0, [pc, #8]	; (80079ac <CmdTest+0x2c>)
 80079a2:	f7f8 bd21 	b.w	80003e8 <printf>
 80079a6:	bd08      	pop	{r3, pc}
 80079a8:	0800cb28 	.word	0x0800cb28
 80079ac:	0800cb61 	.word	0x0800cb61

080079b0 <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 80079b0:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 80079b2:	b940      	cbnz	r0, 80079c6 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 80079b4:	4668      	mov	r0, sp
 80079b6:	f000 f937 	bl	8007c28 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 80079ba:	a801      	add	r0, sp, #4
 80079bc:	f000 f934 	bl	8007c28 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 80079c0:	9b00      	ldr	r3, [sp, #0]
 80079c2:	9a01      	ldr	r2, [sp, #4]
 80079c4:	601a      	str	r2, [r3, #0]
}
 80079c6:	b003      	add	sp, #12
 80079c8:	f85d fb04 	ldr.w	pc, [sp], #4

080079cc <CmdR>:
{
 80079cc:	b507      	push	{r0, r1, r2, lr}
  if(mode != CMD_INTERACTIVE) return;
 80079ce:	b938      	cbnz	r0, 80079e0 <CmdR+0x14>
  fetch_uint32_arg(&addr);
 80079d0:	a801      	add	r0, sp, #4
 80079d2:	f000 f929 	bl	8007c28 <fetch_uint32_arg>
	 (unsigned int)(*((uint32_t *)addr)));
 80079d6:	9901      	ldr	r1, [sp, #4]
  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 80079d8:	4803      	ldr	r0, [pc, #12]	; (80079e8 <CmdR+0x1c>)
 80079da:	680a      	ldr	r2, [r1, #0]
 80079dc:	f7f8 fd04 	bl	80003e8 <printf>
}
 80079e0:	b003      	add	sp, #12
 80079e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80079e6:	bf00      	nop
 80079e8:	0800cb85 	.word	0x0800cb85

080079ec <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 80079ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f0:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 80079f2:	b910      	cbnz	r0, 80079fa <parse+0xe>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 80079f4:	4935      	ldr	r1, [pc, #212]	; (8007acc <parse+0xe0>)
 80079f6:	4836      	ldr	r0, [pc, #216]	; (8007ad0 <parse+0xe4>)
 80079f8:	e05c      	b.n	8007ab4 <parse+0xc8>
    return -1;
  }

  if(len==0) {
 80079fa:	b911      	cbnz	r1, 8007a02 <parse+0x16>
    printf("len == 0 in %s\n",__FUNCTION__);
 80079fc:	4933      	ldr	r1, [pc, #204]	; (8007acc <parse+0xe0>)
 80079fe:	4835      	ldr	r0, [pc, #212]	; (8007ad4 <parse+0xe8>)
 8007a00:	e058      	b.n	8007ab4 <parse+0xc8>
    return -1;
  }

  if(table == NULL) {
 8007a02:	b122      	cbz	r2, 8007a0e <parse+0x22>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8007a04:	4b34      	ldr	r3, [pc, #208]	; (8007ad8 <parse+0xec>)
 8007a06:	1e4c      	subs	r4, r1, #1
 8007a08:	681e      	ldr	r6, [r3, #0]
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	e00c      	b.n	8007a28 <parse+0x3c>
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 8007a0e:	492f      	ldr	r1, [pc, #188]	; (8007acc <parse+0xe0>)
 8007a10:	4832      	ldr	r0, [pc, #200]	; (8007adc <parse+0xf0>)
 8007a12:	e04f      	b.n	8007ab4 <parse+0xc8>
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8007a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a18:	2a00      	cmp	r2, #0
 8007a1a:	d04d      	beq.n	8007ab8 <parse+0xcc>
 8007a1c:	4432      	add	r2, r6
 8007a1e:	1e61      	subs	r1, r4, #1
 8007a20:	7852      	ldrb	r2, [r2, #1]
 8007a22:	0712      	lsls	r2, r2, #28
 8007a24:	d54b      	bpl.n	8007abe <parse+0xd2>
 8007a26:	460c      	mov	r4, r1
 8007a28:	1c61      	adds	r1, r4, #1
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	d1f2      	bne.n	8007a14 <parse+0x28>
  if((i==0) || (*buf==0)) {
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d047      	beq.n	8007ac4 <parse+0xd8>
       __FUNCTION__);
#endif
    return -1;
  }
	
  p = strtok(buf,SEPS);
 8007a34:	492a      	ldr	r1, [pc, #168]	; (8007ae0 <parse+0xf4>)
 8007a36:	f7f8 fed1 	bl	80007dc <strtok>
  if(p==NULL) {
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	b910      	cbnz	r0, 8007a44 <parse+0x58>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8007a3e:	4923      	ldr	r1, [pc, #140]	; (8007acc <parse+0xe0>)
 8007a40:	4828      	ldr	r0, [pc, #160]	; (8007ae4 <parse+0xf8>)
 8007a42:	e037      	b.n	8007ab4 <parse+0xc8>
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 8007a44:	4928      	ldr	r1, [pc, #160]	; (8007ae8 <parse+0xfc>)
 8007a46:	f7f8 fdd5 	bl	80005f4 <strcasecmp>
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	b9a0      	cbnz	r0, 8007a78 <parse+0x8c>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 8007a4e:	4924      	ldr	r1, [pc, #144]	; (8007ae0 <parse+0xf4>)
 8007a50:	f7f8 fec4 	bl	80007dc <strtok>
    if(p == NULL) {
 8007a54:	4606      	mov	r6, r0
 8007a56:	b990      	cbnz	r0, 8007a7e <parse+0x92>
 8007a58:	350c      	adds	r5, #12
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
 8007a5a:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8007a5e:	b389      	cbz	r1, 8007ac4 <parse+0xd8>
	if(t->help != NULL) {
 8007a60:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8007a64:	b11a      	cbz	r2, 8007a6e <parse+0x82>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8007a66:	4821      	ldr	r0, [pc, #132]	; (8007aec <parse+0x100>)
 8007a68:	f7f8 fcbe 	bl	80003e8 <printf>
 8007a6c:	e7f4      	b.n	8007a58 <parse+0x6c>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8007a6e:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8007a72:	2001      	movs	r0, #1
 8007a74:	4798      	blx	r3
 8007a76:	e7ef      	b.n	8007a58 <parse+0x6c>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8007a78:	f04f 0800 	mov.w	r8, #0
 8007a7c:	e009      	b.n	8007a92 <parse+0xa6>
      }
      return 0;
    } else {
      /* The user has asked for long help, call the function
       * for help */
      arg = CMD_LONG_HELP;
 8007a7e:	f04f 0802 	mov.w	r8, #2
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 8007a82:	e006      	b.n	8007a92 <parse+0xa6>
    if(strcasecmp(p,t->cmdname) == 0) {
 8007a84:	4639      	mov	r1, r7
 8007a86:	4630      	mov	r0, r6
 8007a88:	f7f8 fdb4 	bl	80005f4 <strcasecmp>
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	b120      	cbz	r0, 8007a9a <parse+0xae>
  for(t=table; t->cmdname!=NULL; t++) {
 8007a90:	350c      	adds	r5, #12
 8007a92:	682f      	ldr	r7, [r5, #0]
 8007a94:	2f00      	cmp	r7, #0
 8007a96:	d1f5      	bne.n	8007a84 <parse+0x98>
 8007a98:	e00a      	b.n	8007ab0 <parse+0xc4>
      /* Got a match, call the function */
      if(arg == CMD_LONG_HELP) {	
 8007a9a:	f1b8 0f00 	cmp.w	r8, #0
 8007a9e:	d003      	beq.n	8007aa8 <parse+0xbc>
	printf("%s:\n",t->cmdname);
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	4813      	ldr	r0, [pc, #76]	; (8007af0 <parse+0x104>)
 8007aa4:	f7f8 fca0 	bl	80003e8 <printf>
      }
      t->func(arg);
 8007aa8:	686b      	ldr	r3, [r5, #4]
 8007aaa:	4640      	mov	r0, r8
 8007aac:	4798      	blx	r3
      return 0;
 8007aae:	e009      	b.n	8007ac4 <parse+0xd8>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 8007ab0:	4810      	ldr	r0, [pc, #64]	; (8007af4 <parse+0x108>)
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	f7f8 fc98 	bl	80003e8 <printf>
    return -1;
 8007ab8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007abc:	e002      	b.n	8007ac4 <parse+0xd8>
  if((i==0) || (*buf==0)) {
 8007abe:	2c00      	cmp	r4, #0
 8007ac0:	d1b8      	bne.n	8007a34 <parse+0x48>
 8007ac2:	e7f9      	b.n	8007ab8 <parse+0xcc>
  return -1;
}
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aca:	bf00      	nop
 8007acc:	0800cbd0 	.word	0x0800cbd0
 8007ad0:	0800cbd6 	.word	0x0800cbd6
 8007ad4:	0800cbf7 	.word	0x0800cbf7
 8007ad8:	20000004 	.word	0x20000004
 8007adc:	0800cc07 	.word	0x0800cc07
 8007ae0:	0800cc2a 	.word	0x0800cc2a
 8007ae4:	0800cc31 	.word	0x0800cc31
 8007ae8:	0800cc61 	.word	0x0800cc61
 8007aec:	0800cc66 	.word	0x0800cc66
 8007af0:	0800cc72 	.word	0x0800cc72
 8007af4:	0800cc77 	.word	0x0800cc77

08007af8 <TaskInput>:
{
 8007af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(printPrompt) {
 8007afa:	4d40      	ldr	r5, [pc, #256]	; (8007bfc <TaskInput+0x104>)
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b123      	cbz	r3, 8007b0a <TaskInput+0x12>
    printf("ARMON>");
 8007b00:	483f      	ldr	r0, [pc, #252]	; (8007c00 <TaskInput+0x108>)
 8007b02:	f7f8 fc71 	bl	80003e8 <printf>
    printPrompt = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	602b      	str	r3, [r5, #0]
  rc = TerminalReadAnyNonBlock(&c);
 8007b0a:	f10d 0007 	add.w	r0, sp, #7
 8007b0e:	f000 fa30 	bl	8007f72 <TerminalReadAnyNonBlock>
  if(rc) {
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d16f      	bne.n	8007bf6 <TaskInput+0xfe>
  if(((c == 010) || (c == 0x7f)) && count) {
 8007b16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d001      	beq.n	8007b22 <TaskInput+0x2a>
 8007b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8007b20:	d10d      	bne.n	8007b3e <TaskInput+0x46>
 8007b22:	4c38      	ldr	r4, [pc, #224]	; (8007c04 <TaskInput+0x10c>)
 8007b24:	6822      	ldr	r2, [r4, #0]
 8007b26:	b152      	cbz	r2, 8007b3e <TaskInput+0x46>
    printf("\010 \010"); /* Obliterate character */
 8007b28:	4837      	ldr	r0, [pc, #220]	; (8007c08 <TaskInput+0x110>)
 8007b2a:	f7f8 fc5d 	bl	80003e8 <printf>
    buf--;     /* Then remove it from the buffer */
 8007b2e:	4a37      	ldr	r2, [pc, #220]	; (8007c0c <TaskInput+0x114>)
 8007b30:	6813      	ldr	r3, [r2, #0]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	6023      	str	r3, [r4, #0]
 8007b3c:	e05b      	b.n	8007bf6 <TaskInput+0xfe>
  } else if(c == '!') { /* '!' repeats the last command */
 8007b3e:	2b21      	cmp	r3, #33	; 0x21
 8007b40:	d115      	bne.n	8007b6e <TaskInput+0x76>
    if(saved) {  /* But only if we have something saved */
 8007b42:	4b33      	ldr	r3, [pc, #204]	; (8007c10 <TaskInput+0x118>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d055      	beq.n	8007bf6 <TaskInput+0xfe>
      strcpy(input,input_b);  /* Restore the command */
 8007b4a:	4c32      	ldr	r4, [pc, #200]	; (8007c14 <TaskInput+0x11c>)
 8007b4c:	4932      	ldr	r1, [pc, #200]	; (8007c18 <TaskInput+0x120>)
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f7f8 fd76 	bl	8000640 <strcpy>
      printf("%s",input);
 8007b54:	4621      	mov	r1, r4
 8007b56:	4831      	ldr	r0, [pc, #196]	; (8007c1c <TaskInput+0x124>)
 8007b58:	f7f8 fc46 	bl	80003e8 <printf>
      count = strlen(input);
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f7f8 fdcf 	bl	8000700 <strlen>
 8007b62:	4b28      	ldr	r3, [pc, #160]	; (8007c04 <TaskInput+0x10c>)
 8007b64:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8007b66:	4b29      	ldr	r3, [pc, #164]	; (8007c0c <TaskInput+0x114>)
 8007b68:	4404      	add	r4, r0
 8007b6a:	601c      	str	r4, [r3, #0]
      goto parseme;
 8007b6c:	e024      	b.n	8007bb8 <TaskInput+0xc0>
  } else if(isprint((unsigned int)c)) {
 8007b6e:	4a2c      	ldr	r2, [pc, #176]	; (8007c20 <TaskInput+0x128>)
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	441a      	add	r2, r3
 8007b74:	7852      	ldrb	r2, [r2, #1]
 8007b76:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 8007b7a:	d011      	beq.n	8007ba0 <TaskInput+0xa8>
    if(count >= sizeof(input)) {
 8007b7c:	4921      	ldr	r1, [pc, #132]	; (8007c04 <TaskInput+0x10c>)
 8007b7e:	680a      	ldr	r2, [r1, #0]
 8007b80:	2a4f      	cmp	r2, #79	; 0x4f
 8007b82:	d901      	bls.n	8007b88 <TaskInput+0x90>
      printf("\x07"); /* Beep */
 8007b84:	2007      	movs	r0, #7
 8007b86:	e008      	b.n	8007b9a <TaskInput+0xa2>
      *buf++ = c;
 8007b88:	4c20      	ldr	r4, [pc, #128]	; (8007c0c <TaskInput+0x114>)
 8007b8a:	6820      	ldr	r0, [r4, #0]
 8007b8c:	7003      	strb	r3, [r0, #0]
 8007b8e:	1c45      	adds	r5, r0, #1
      count++;
 8007b90:	3201      	adds	r2, #1
      printf("%c",c);
 8007b92:	f89d 0007 	ldrb.w	r0, [sp, #7]
      *buf++ = c;
 8007b96:	6025      	str	r5, [r4, #0]
      count++;
 8007b98:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8007b9a:	f7f8 fc3d 	bl	8000418 <putchar>
 8007b9e:	e02a      	b.n	8007bf6 <TaskInput+0xfe>
  } else if(c == '\r') {
 8007ba0:	2b0d      	cmp	r3, #13
 8007ba2:	d128      	bne.n	8007bf6 <TaskInput+0xfe>
    *buf = '\0';
 8007ba4:	4b19      	ldr	r3, [pc, #100]	; (8007c0c <TaskInput+0x114>)
    strcpy(input_b,input);
 8007ba6:	491b      	ldr	r1, [pc, #108]	; (8007c14 <TaskInput+0x11c>)
    *buf = '\0';
 8007ba8:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 8007baa:	481b      	ldr	r0, [pc, #108]	; (8007c18 <TaskInput+0x120>)
    *buf = '\0';
 8007bac:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 8007bae:	f7f8 fd47 	bl	8000640 <strcpy>
    saved = 1;
 8007bb2:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <TaskInput+0x118>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]
    printf("\n");
 8007bb8:	200a      	movs	r0, #10
 8007bba:	f7f8 fc2d 	bl	8000418 <putchar>
 8007bbe:	4c13      	ldr	r4, [pc, #76]	; (8007c0c <TaskInput+0x114>)
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8007bc0:	4a10      	ldr	r2, [pc, #64]	; (8007c04 <TaskInput+0x10c>)
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	6810      	ldr	r0, [r2, #0]
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	1ac0      	subs	r0, r0, r3
 8007bca:	460f      	mov	r7, r1
 8007bcc:	181e      	adds	r6, r3, r0
 8007bce:	2e4f      	cmp	r6, #79	; 0x4f
 8007bd0:	d803      	bhi.n	8007bda <TaskInput+0xe2>
 8007bd2:	f803 7b01 	strb.w	r7, [r3], #1
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	e7f8      	b.n	8007bcc <TaskInput+0xd4>
 8007bda:	b101      	cbz	r1, 8007bde <TaskInput+0xe6>
 8007bdc:	6023      	str	r3, [r4, #0]
    count = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	6013      	str	r3, [r2, #0]
    parse(input, sizeof(input), Commands);
 8007be2:	4e0c      	ldr	r6, [pc, #48]	; (8007c14 <TaskInput+0x11c>)
 8007be4:	4b0f      	ldr	r3, [pc, #60]	; (8007c24 <TaskInput+0x12c>)
 8007be6:	2150      	movs	r1, #80	; 0x50
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4630      	mov	r0, r6
 8007bec:	f7ff fefe 	bl	80079ec <parse>
    printPrompt = 1;
 8007bf0:	2301      	movs	r3, #1
    buf = input;
 8007bf2:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 8007bf4:	602b      	str	r3, [r5, #0]
}
 8007bf6:	b003      	add	sp, #12
 8007bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	200008c8 	.word	0x200008c8
 8007c00:	0800ccac 	.word	0x0800ccac
 8007c04:	20000b10 	.word	0x20000b10
 8007c08:	0800ccb3 	.word	0x0800ccb3
 8007c0c:	200008d0 	.word	0x200008d0
 8007c10:	20000b14 	.word	0x20000b14
 8007c14:	20000f80 	.word	0x20000f80
 8007c18:	20000f30 	.word	0x20000f30
 8007c1c:	0800cfa2 	.word	0x0800cfa2
 8007c20:	20000004 	.word	0x20000004
 8007c24:	200008cc 	.word	0x200008cc

08007c28 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8007c28:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8007c2a:	4908      	ldr	r1, [pc, #32]	; (8007c4c <fetch_uint32_arg+0x24>)
{
 8007c2c:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f7f8 fdd4 	bl	80007dc <strtok>
  if(p == NULL) {
 8007c34:	b130      	cbz	r0, 8007c44 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8007c36:	2200      	movs	r2, #0
 8007c38:	4611      	mov	r1, r2
 8007c3a:	f7f8 fea7 	bl	800098c <strtoul>
 8007c3e:	6020      	str	r0, [r4, #0]
  return 0;
 8007c40:	2000      	movs	r0, #0
 8007c42:	bd10      	pop	{r4, pc}
    return -1;
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}     
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	bf00      	nop
 8007c4c:	0800cc2a 	.word	0x0800cc2a

08007c50 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8007c50:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8007c52:	4906      	ldr	r1, [pc, #24]	; (8007c6c <fetch_string_arg+0x1c>)
{
 8007c54:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 8007c56:	2000      	movs	r0, #0
 8007c58:	f7f8 fdc0 	bl	80007dc <strtok>
  if(p == NULL) {
 8007c5c:	b110      	cbz	r0, 8007c64 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8007c5e:	6020      	str	r0, [r4, #0]
  return 0;
 8007c60:	2000      	movs	r0, #0
 8007c62:	bd10      	pop	{r4, pc}
    return -1;
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	bf00      	nop
 8007c6c:	0800cc2a 	.word	0x0800cc2a

08007c70 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8007c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c74:	4680      	mov	r8, r0
 8007c76:	b089      	sub	sp, #36	; 0x24
 8007c78:	4692      	mov	sl, r2
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	2900      	cmp	r1, #0
 8007c7e:	d046      	beq.n	8007d0e <DumpBuffer+0x9e>
 8007c80:	1843      	adds	r3, r0, r1
 8007c82:	ad03      	add	r5, sp, #12
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8007c84:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8007d24 <DumpBuffer+0xb4>
 8007c88:	9300      	str	r3, [sp, #0]
  if(count == 0) return;
 8007c8a:	4681      	mov	r9, r0
 8007c8c:	462f      	mov	r7, r5
  for(i=0; i<count; i++) {
 8007c8e:	9b00      	ldr	r3, [sp, #0]
 8007c90:	ebc8 010a 	rsb	r1, r8, sl
 8007c94:	4599      	cmp	r9, r3
 8007c96:	4449      	add	r1, r9
 8007c98:	ebc8 0609 	rsb	r6, r8, r9
 8007c9c:	d024      	beq.n	8007ce8 <DumpBuffer+0x78>
    if((i% BYTES_PER_LINE) == 0) {
 8007c9e:	f016 060f 	ands.w	r6, r6, #15
 8007ca2:	d103      	bne.n	8007cac <DumpBuffer+0x3c>
      printf("%08x:",(unsigned int)address);
 8007ca4:	481b      	ldr	r0, [pc, #108]	; (8007d14 <DumpBuffer+0xa4>)
 8007ca6:	f7f8 fb9f 	bl	80003e8 <printf>
      bufp = buf;
 8007caa:	463d      	mov	r5, r7
    c = *p++;
 8007cac:	f819 1b01 	ldrb.w	r1, [r9], #1
    if(isprint(c)) {
 8007cb0:	f8db 2000 	ldr.w	r2, [fp]
 8007cb4:	440a      	add	r2, r1
 8007cb6:	7852      	ldrb	r2, [r2, #1]
 8007cb8:	f012 0f97 	tst.w	r2, #151	; 0x97
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 8007cbc:	bf08      	it	eq
 8007cbe:	202e      	moveq	r0, #46	; 0x2e
 8007cc0:	f105 0201 	add.w	r2, r5, #1
 8007cc4:	bf0c      	ite	eq
 8007cc6:	7028      	strbeq	r0, [r5, #0]
      *bufp++ = c; /* Stick in the character */
 8007cc8:	7029      	strbne	r1, [r5, #0]
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8007cca:	4813      	ldr	r0, [pc, #76]	; (8007d18 <DumpBuffer+0xa8>)
 8007ccc:	9201      	str	r2, [sp, #4]
      *bufp++ = '.';
 8007cce:	4615      	mov	r5, r2
    printf(" %02x",((unsigned int)c) & 0xff);
 8007cd0:	f7f8 fb8a 	bl	80003e8 <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8007cd4:	2e0f      	cmp	r6, #15
 8007cd6:	9a01      	ldr	r2, [sp, #4]
 8007cd8:	d1d9      	bne.n	8007c8e <DumpBuffer+0x1e>
      *bufp = '\0';  /* NULL terminate buffer */
 8007cda:	2100      	movs	r1, #0
 8007cdc:	7011      	strb	r1, [r2, #0]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 8007cde:	480f      	ldr	r0, [pc, #60]	; (8007d1c <DumpBuffer+0xac>)
 8007ce0:	4639      	mov	r1, r7
 8007ce2:	f7f8 fb81 	bl	80003e8 <printf>
 8007ce6:	e7d2      	b.n	8007c8e <DumpBuffer+0x1e>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8007ce8:	2300      	movs	r3, #0
  if(count % BYTES_PER_LINE) {
 8007cea:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 8007cee:	702b      	strb	r3, [r5, #0]
  if(count % BYTES_PER_LINE) {
 8007cf0:	d00d      	beq.n	8007d0e <DumpBuffer+0x9e>
 8007cf2:	461d      	mov	r5, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8007cf4:	f1c4 0410 	rsb	r4, r4, #16
 8007cf8:	42a5      	cmp	r5, r4
 8007cfa:	d204      	bcs.n	8007d06 <DumpBuffer+0x96>
      printf("   ");
 8007cfc:	4808      	ldr	r0, [pc, #32]	; (8007d20 <DumpBuffer+0xb0>)
 8007cfe:	f7f8 fb73 	bl	80003e8 <printf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8007d02:	3501      	adds	r5, #1
 8007d04:	e7f8      	b.n	8007cf8 <DumpBuffer+0x88>
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 8007d06:	4639      	mov	r1, r7
 8007d08:	4804      	ldr	r0, [pc, #16]	; (8007d1c <DumpBuffer+0xac>)
 8007d0a:	f7f8 fb6d 	bl	80003e8 <printf>
  }



}
 8007d0e:	b009      	add	sp, #36	; 0x24
 8007d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d14:	0800ccb7 	.word	0x0800ccb7
 8007d18:	0800ccbd 	.word	0x0800ccbd
 8007d1c:	0800ccc3 	.word	0x0800ccc3
 8007d20:	0800ccc9 	.word	0x0800ccc9
 8007d24:	20000004 	.word	0x20000004

08007d28 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8007d28:	2801      	cmp	r0, #1
{
 8007d2a:	b538      	push	{r3, r4, r5, lr}
  if(action==CMD_SHORT_HELP) return;
 8007d2c:	d01d      	beq.n	8007d6a <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 8007d2e:	2802      	cmp	r0, #2
 8007d30:	4d0e      	ldr	r5, [pc, #56]	; (8007d6c <CmdDump+0x44>)
 8007d32:	4c0f      	ldr	r4, [pc, #60]	; (8007d70 <CmdDump+0x48>)
 8007d34:	d109      	bne.n	8007d4a <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 8007d36:	480f      	ldr	r0, [pc, #60]	; (8007d74 <CmdDump+0x4c>)
 8007d38:	f7f8 fbac 	bl	8000494 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8007d3c:	682a      	ldr	r2, [r5, #0]
 8007d3e:	6821      	ldr	r1, [r4, #0]
 8007d40:	480d      	ldr	r0, [pc, #52]	; (8007d78 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 8007d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf("Current address is 0x%08x, current count is 0x%x\n",
 8007d46:	f7f8 bb4f 	b.w	80003e8 <printf>
  rc = fetch_uint32_arg(&address);
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f7ff ff6c 	bl	8007c28 <fetch_uint32_arg>
  if(rc == 0) {
 8007d50:	b910      	cbnz	r0, 8007d58 <CmdDump+0x30>
    fetch_uint32_arg(&count);
 8007d52:	4628      	mov	r0, r5
 8007d54:	f7ff ff68 	bl	8007c28 <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 8007d58:	6822      	ldr	r2, [r4, #0]
 8007d5a:	6829      	ldr	r1, [r5, #0]
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7ff ff87 	bl	8007c70 <DumpBuffer>
  address = address+count;
 8007d62:	6822      	ldr	r2, [r4, #0]
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	4413      	add	r3, r2
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	200008d4 	.word	0x200008d4
 8007d70:	20000b18 	.word	0x20000b18
 8007d74:	0800cccd 	.word	0x0800cccd
 8007d78:	0800ce65 	.word	0x0800ce65

08007d7c <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8007d7c:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <_sbrk_r+0x2c>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	b90a      	cbnz	r2, 8007d88 <_sbrk_r+0xc>
                heap_end = &end;
 8007d84:	4a09      	ldr	r2, [pc, #36]	; (8007dac <_sbrk_r+0x30>)
 8007d86:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 8007d88:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 8007d8a:	466b      	mov	r3, sp
 8007d8c:	4401      	add	r1, r0
 8007d8e:	4299      	cmp	r1, r3
 8007d90:	d906      	bls.n	8007da0 <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 8007d92:	f7f8 fa89 	bl	80002a8 <__errno>
 8007d96:	230c      	movs	r3, #12
 8007d98:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8007d9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d9e:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 8007da0:	4b01      	ldr	r3, [pc, #4]	; (8007da8 <_sbrk_r+0x2c>)
 8007da2:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 8007da4:	bd08      	pop	{r3, pc}
 8007da6:	bf00      	nop
 8007da8:	20000b1c 	.word	0x20000b1c
 8007dac:	20001d1c 	.word	0x20001d1c

08007db0 <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 8007db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007db4:	4770      	bx	lr

08007db6 <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 8007db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007dba:	6053      	str	r3, [r2, #4]
        return 0;
}
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	4770      	bx	lr

08007dc0 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	4770      	bx	lr

08007dc4 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	4770      	bx	lr

08007dc8 <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8007dc8:	4b1c      	ldr	r3, [pc, #112]	; (8007e3c <USBD_CDC_DataIn+0x74>)
{
 8007dca:	b570      	push	{r4, r5, r6, lr}
  rc = (*USBDDataIn)(pdev,epnum);
 8007dcc:	681b      	ldr	r3, [r3, #0]
{
 8007dce:	4604      	mov	r4, r0
  rc = (*USBDDataIn)(pdev,epnum);
 8007dd0:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 8007dd2:	4b1b      	ldr	r3, [pc, #108]	; (8007e40 <USBD_CDC_DataIn+0x78>)
 8007dd4:	429c      	cmp	r4, r3
  rc = (*USBDDataIn)(pdev,epnum);
 8007dd6:	4606      	mov	r6, r0
  if(pdev == &hUSBDDevice) {
 8007dd8:	d12d      	bne.n	8007e36 <USBD_CDC_DataIn+0x6e>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 8007dda:	4b1a      	ldr	r3, [pc, #104]	; (8007e44 <USBD_CDC_DataIn+0x7c>)
 8007ddc:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outSending;
 8007de0:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 8007de4:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 8007de6:	fa12 f181 	uxtah	r1, r2, r1
 8007dea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007dee:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
    TerminalState[index].outCount -= count;
 8007df2:	f8b3 110a 	ldrh.w	r1, [r3, #266]	; 0x10a
 8007df6:	1a8a      	subs	r2, r1, r2
 8007df8:	b292      	uxth	r2, r2
 8007dfa:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8007e04:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outCount;
 8007e08:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8007e0c:	b292      	uxth	r2, r2
    tail = TerminalState[index].outTail;
 8007e0e:	b289      	uxth	r1, r1
 8007e10:	461c      	mov	r4, r3
    if(count != 0) {
 8007e12:	b182      	cbz	r2, 8007e36 <USBD_CDC_DataIn+0x6e>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 8007e14:	188b      	adds	r3, r1, r2
 8007e16:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 8007e18:	bf88      	it	hi
 8007e1a:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8007e1e:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8007e20:	4421      	add	r1, r4
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8007e22:	462a      	mov	r2, r5
 8007e24:	3186      	adds	r1, #134	; 0x86
 8007e26:	4806      	ldr	r0, [pc, #24]	; (8007e40 <USBD_CDC_DataIn+0x78>)
 8007e28:	f003 faa4 	bl	800b374 <USBD_CDC_SetTxBuffer>
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 8007e2c:	4804      	ldr	r0, [pc, #16]	; (8007e40 <USBD_CDC_DataIn+0x78>)
 8007e2e:	f003 faaf 	bl	800b390 <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 8007e32:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 8007e36:	4630      	mov	r0, r6
 8007e38:	bd70      	pop	{r4, r5, r6, pc}
 8007e3a:	bf00      	nop
 8007e3c:	200011f4 	.word	0x200011f4
 8007e40:	20000fd0 	.word	0x20000fd0
 8007e44:	20000b20 	.word	0x20000b20

08007e48 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8007e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8007e4c:	4604      	mov	r4, r0
{
 8007e4e:	b085      	sub	sp, #20
  if(mode != CMD_INTERACTIVE) return;
 8007e50:	b9b0      	cbnz	r0, 8007e80 <CmdStats+0x38>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007e52:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8007e54:	480c      	ldr	r0, [pc, #48]	; (8007e88 <CmdStats+0x40>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8007e56:	2214      	movs	r2, #20
    s[i] = TerminalState[i].stats;
 8007e58:	f8d0 9120 	ldr.w	r9, [r0, #288]	; 0x120
 8007e5c:	f500 7588 	add.w	r5, r0, #272	; 0x110
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8007e60:	4621      	mov	r1, r4
 8007e62:	f500 7088 	add.w	r0, r0, #272	; 0x110
    s[i] = TerminalState[i].stats;
 8007e66:	e895 01e0 	ldmia.w	r5, {r5, r6, r7, r8}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8007e6a:	f7f8 fa5f 	bl	800032c <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8007e6e:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 8007e70:	4806      	ldr	r0, [pc, #24]	; (8007e8c <CmdStats+0x44>)
 8007e72:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8007e76:	4633      	mov	r3, r6
 8007e78:	462a      	mov	r2, r5
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	f7f8 fab4 	bl	80003e8 <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 8007e80:	b005      	add	sp, #20
 8007e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e86:	bf00      	nop
 8007e88:	20000b20 	.word	0x20000b20
 8007e8c:	0800ceb3 	.word	0x0800ceb3

08007e90 <TerminalInit>:
{
 8007e90:	b510      	push	{r4, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 8007e92:	4c17      	ldr	r4, [pc, #92]	; (8007ef0 <TerminalInit+0x60>)
 8007e94:	6820      	ldr	r0, [r4, #0]
 8007e96:	2300      	movs	r3, #0
 8007e98:	4619      	mov	r1, r3
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	6840      	ldr	r0, [r0, #4]
 8007e9e:	f7f8 fb01 	bl	80004a4 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8007ea2:	6820      	ldr	r0, [r4, #0]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	6880      	ldr	r0, [r0, #8]
 8007eac:	f7f8 fafa 	bl	80004a4 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8007eb0:	6820      	ldr	r0, [r4, #0]
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8007eb2:	4c10      	ldr	r4, [pc, #64]	; (8007ef4 <TerminalInit+0x64>)
  setvbuf(stderr, NULL, _IONBF, 0);
 8007eb4:	68c0      	ldr	r0, [r0, #12]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	4619      	mov	r1, r3
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f7f8 faf2 	bl	80004a4 <setvbuf>
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	490d      	ldr	r1, [pc, #52]	; (8007ef8 <TerminalInit+0x68>)
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f002 fe76 	bl	800abb6 <USBD_Init>
  USBDDataIn = USBD_CDC.DataIn;
 8007eca:	490c      	ldr	r1, [pc, #48]	; (8007efc <TerminalInit+0x6c>)
 8007ecc:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <TerminalInit+0x70>)
 8007ece:	694a      	ldr	r2, [r1, #20]
 8007ed0:	601a      	str	r2, [r3, #0]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8007ed2:	4620      	mov	r0, r4
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 8007ed4:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <TerminalInit+0x74>)
 8007ed6:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8007ed8:	f002 fe82 	bl	800abe0 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 8007edc:	4620      	mov	r0, r4
 8007ede:	490a      	ldr	r1, [pc, #40]	; (8007f08 <TerminalInit+0x78>)
 8007ee0:	f003 fa41 	bl	800b366 <USBD_CDC_RegisterInterface>
  USBD_Start(&hUSBDDevice);
 8007ee4:	4620      	mov	r0, r4
}
 8007ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUSBDDevice);
 8007eea:	f002 be80 	b.w	800abee <USBD_Start>
 8007eee:	bf00      	nop
 8007ef0:	20000008 	.word	0x20000008
 8007ef4:	20000fd0 	.word	0x20000fd0
 8007ef8:	200009ec 	.word	0x200009ec
 8007efc:	20000920 	.word	0x20000920
 8007f00:	200011f4 	.word	0x200011f4
 8007f04:	08007dc9 	.word	0x08007dc9
 8007f08:	20000a2c 	.word	0x20000a2c

08007f0c <TerminalRead>:
{
 8007f0c:	b530      	push	{r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8007f0e:	b672      	cpsid	i
  while(TerminalState[index].inCount && (count < len)) {
 8007f10:	4d10      	ldr	r5, [pc, #64]	; (8007f54 <TerminalRead+0x48>)
 8007f12:	f44f 7392 	mov.w	r3, #292	; 0x124
 8007f16:	440a      	add	r2, r1
 8007f18:	460c      	mov	r4, r1
 8007f1a:	fb03 5300 	mla	r3, r3, r0, r5
 8007f1e:	f8b3 5084 	ldrh.w	r5, [r3, #132]	; 0x84
 8007f22:	b2ad      	uxth	r5, r5
 8007f24:	1a60      	subs	r0, r4, r1
 8007f26:	b19d      	cbz	r5, 8007f50 <TerminalRead+0x44>
 8007f28:	4294      	cmp	r4, r2
 8007f2a:	d011      	beq.n	8007f50 <TerminalRead+0x44>
    tail   = TerminalState[index].inTail;
 8007f2c:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8007f30:	b280      	uxth	r0, r0
    *ptr++ = TerminalState[index].inBuffer[tail];
 8007f32:	5c1d      	ldrb	r5, [r3, r0]
 8007f34:	f804 5b01 	strb.w	r5, [r4], #1
    TerminalState[index].inTail = TERMINALINCR(tail);
 8007f38:	3001      	adds	r0, #1
 8007f3a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007f3e:	f8a3 0082 	strh.w	r0, [r3, #130]	; 0x82
    TerminalState[index].inCount--;
 8007f42:	f8b3 0084 	ldrh.w	r0, [r3, #132]	; 0x84
 8007f46:	3801      	subs	r0, #1
 8007f48:	b280      	uxth	r0, r0
 8007f4a:	f8a3 0084 	strh.w	r0, [r3, #132]	; 0x84
 8007f4e:	e7e6      	b.n	8007f1e <TerminalRead+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 8007f50:	b662      	cpsie	i
}
 8007f52:	bd30      	pop	{r4, r5, pc}
 8007f54:	20000b20 	.word	0x20000b20

08007f58 <_read_r>:
{
 8007f58:	4611      	mov	r1, r2
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f7ff bfd5 	b.w	8007f0c <TerminalRead>

08007f62 <TerminalReadNonBlock>:
{
 8007f62:	b508      	push	{r3, lr}
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 8007f64:	2201      	movs	r2, #1
 8007f66:	f7ff ffd1 	bl	8007f0c <TerminalRead>
}
 8007f6a:	fab0 f080 	clz	r0, r0
 8007f6e:	0940      	lsrs	r0, r0, #5
 8007f70:	bd08      	pop	{r3, pc}

08007f72 <TerminalReadAnyNonBlock>:
    rc = TerminalReadNonBlock(i, c);
 8007f72:	4601      	mov	r1, r0
{
 8007f74:	b508      	push	{r3, lr}
    rc = TerminalReadNonBlock(i, c);
 8007f76:	2000      	movs	r0, #0
 8007f78:	f7ff fff3 	bl	8007f62 <TerminalReadNonBlock>
}
 8007f7c:	3000      	adds	r0, #0
 8007f7e:	bf18      	it	ne
 8007f80:	2001      	movne	r0, #1
 8007f82:	bd08      	pop	{r3, pc}

08007f84 <TerminalOutputBufferWrite>:
{
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	4e37      	ldr	r6, [pc, #220]	; (8008064 <TerminalOutputBufferWrite+0xe0>)
 8007f88:	f44f 7392 	mov.w	r3, #292	; 0x124
  if(len >= TERMINALBUFFERSIZE) {
 8007f8c:	2a7f      	cmp	r2, #127	; 0x7f
    TerminalState[index].stats.writeTooBig++;
 8007f8e:	fb03 6300 	mla	r3, r3, r0, r6
  if(len >= TERMINALBUFFERSIZE) {
 8007f92:	d906      	bls.n	8007fa2 <TerminalOutputBufferWrite+0x1e>
    TerminalState[index].stats.writeTooBig++;
 8007f94:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8007f98:	3201      	adds	r2, #1
 8007f9a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8007fa2:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8007fa6:	fa12 f484 	uxtah	r4, r2, r4
 8007faa:	2c7f      	cmp	r4, #127	; 0x7f
    TerminalState[index].stats.writeBlocked++;
 8007fac:	bf82      	ittt	hi
 8007fae:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 8007fb2:	3401      	addhi	r4, #1
 8007fb4:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 8007fb8:	f44f 7392 	mov.w	r3, #292	; 0x124
 8007fbc:	fb03 6300 	mla	r3, r3, r0, r6
 8007fc0:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8007fc4:	fa12 f484 	uxtah	r4, r2, r4
 8007fc8:	2c7f      	cmp	r4, #127	; 0x7f
 8007fca:	d8f9      	bhi.n	8007fc0 <TerminalOutputBufferWrite+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 8007fcc:	b672      	cpsid	i
  TerminalState[index].stats.written += len;  /* gather statistics */
 8007fce:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8007fd2:	4414      	add	r4, r2
 8007fd4:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8007fd8:	f44f 7492 	mov.w	r4, #292	; 0x124
 8007fdc:	440a      	add	r2, r1
 8007fde:	fb04 6400 	mla	r4, r4, r0, r6
  while((len != 0) 
 8007fe2:	4291      	cmp	r1, r2
 8007fe4:	d018      	beq.n	8008018 <TerminalOutputBufferWrite+0x94>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8007fe6:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	2b7f      	cmp	r3, #127	; 0x7f
 8007fee:	d813      	bhi.n	8008018 <TerminalOutputBufferWrite+0x94>
    head = TerminalState[index].outHead;
 8007ff0:	f8b4 5106 	ldrh.w	r5, [r4, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8007ff4:	f811 7b01 	ldrb.w	r7, [r1], #1
    head = TerminalState[index].outHead;
 8007ff8:	b2ad      	uxth	r5, r5
    TerminalState[index].outBuffer[head] = *p++;
 8007ffa:	1963      	adds	r3, r4, r5
    TerminalState[index].outHead = TERMINALINCR(head);
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8008002:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8008006:	f883 7086 	strb.w	r7, [r3, #134]	; 0x86
    TerminalState[index].outCount++;
 800800a:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 800800e:	3301      	adds	r3, #1
 8008010:	b29b      	uxth	r3, r3
 8008012:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
 8008016:	e7e4      	b.n	8007fe2 <TerminalOutputBufferWrite+0x5e>
  tail = TerminalState[index].outTail;
 8008018:	f44f 7392 	mov.w	r3, #292	; 0x124
 800801c:	fb03 6300 	mla	r3, r3, r0, r6
 8008020:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8008024:	b295      	uxth	r5, r2
  count = TerminalState[index].outCount;
 8008026:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 800802a:	b292      	uxth	r2, r2
  if((count + tail) >= TERMINALBUFFERSIZE) {
 800802c:	18ab      	adds	r3, r5, r2
 800802e:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8008030:	bf88      	it	hi
 8008032:	f1c5 0280 	rsbhi	r2, r5, #128	; 0x80
  switch(index) {
 8008036:	b990      	cbnz	r0, 800805e <TerminalOutputBufferWrite+0xda>
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8008038:	4f0b      	ldr	r7, [pc, #44]	; (8008068 <TerminalOutputBufferWrite+0xe4>)
 800803a:	f897 31fc 	ldrb.w	r3, [r7, #508]	; 0x1fc
 800803e:	2b03      	cmp	r3, #3
 8008040:	d10d      	bne.n	800805e <TerminalOutputBufferWrite+0xda>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008042:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8008044:	1971      	adds	r1, r6, r5
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008046:	4622      	mov	r2, r4
 8008048:	3186      	adds	r1, #134	; 0x86
 800804a:	4638      	mov	r0, r7
 800804c:	f003 f992 	bl	800b374 <USBD_CDC_SetTxBuffer>
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8008050:	4638      	mov	r0, r7
 8008052:	f003 f99d 	bl	800b390 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8008056:	b910      	cbnz	r0, 800805e <TerminalOutputBufferWrite+0xda>
	TerminalState[index].outSending = count;
 8008058:	4b02      	ldr	r3, [pc, #8]	; (8008064 <TerminalOutputBufferWrite+0xe0>)
 800805a:	f8a3 410c 	strh.w	r4, [r3, #268]	; 0x10c
  __ASM volatile ("cpsie i" : : : "memory");
 800805e:	b662      	cpsie	i
 8008060:	2000      	movs	r0, #0
}
 8008062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008064:	20000b20 	.word	0x20000b20
 8008068:	20000fd0 	.word	0x20000fd0

0800806c <_write_r>:
{
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	461d      	mov	r5, r3
 8008070:	4614      	mov	r4, r2
 8008072:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 8008074:	42bc      	cmp	r4, r7
 8008076:	4626      	mov	r6, r4
 8008078:	d00f      	beq.n	800809a <_write_r+0x2e>
    if(*ptr == '\n') {
 800807a:	7833      	ldrb	r3, [r6, #0]
 800807c:	2b0a      	cmp	r3, #10
 800807e:	f104 0401 	add.w	r4, r4, #1
 8008082:	d104      	bne.n	800808e <_write_r+0x22>
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8008084:	2201      	movs	r2, #1
 8008086:	4906      	ldr	r1, [pc, #24]	; (80080a0 <_write_r+0x34>)
 8008088:	2000      	movs	r0, #0
 800808a:	f7ff ff7b 	bl	8007f84 <TerminalOutputBufferWrite>
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 800808e:	2201      	movs	r2, #1
 8008090:	4631      	mov	r1, r6
 8008092:	2000      	movs	r0, #0
 8008094:	f7ff ff76 	bl	8007f84 <TerminalOutputBufferWrite>
 8008098:	e7ec      	b.n	8008074 <_write_r+0x8>
}
 800809a:	4628      	mov	r0, r5
 800809c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800809e:	bf00      	nop
 80080a0:	0800cc2f 	.word	0x0800cc2f

080080a4 <TerminalInputBufferWrite>:
{
 80080a4:	b510      	push	{r4, lr}
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 80080a6:	4c17      	ldr	r4, [pc, #92]	; (8008104 <TerminalInputBufferWrite+0x60>)
 80080a8:	f44f 7392 	mov.w	r3, #292	; 0x124
 80080ac:	fb03 4000 	mla	r0, r3, r0, r4
 80080b0:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 80080b4:	fa12 f383 	uxtah	r3, r2, r3
 80080b8:	2b7f      	cmp	r3, #127	; 0x7f
 80080ba:	d906      	bls.n	80080ca <TerminalInputBufferWrite+0x26>
    TerminalState[index].stats.receiveTooBig++;
 80080bc:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 80080c0:	3301      	adds	r3, #1
 80080c2:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    return 1;
 80080c6:	2001      	movs	r0, #1
 80080c8:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 80080ca:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 80080ce:	4413      	add	r3, r2
 80080d0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 80080d4:	440a      	add	r2, r1
  while(len != 0) {
 80080d6:	4291      	cmp	r1, r2
 80080d8:	d011      	beq.n	80080fe <TerminalInputBufferWrite+0x5a>
    head = TerminalState[index].inHead;
 80080da:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inBuffer[head] = *p++;
 80080de:	f811 4b01 	ldrb.w	r4, [r1], #1
    head = TerminalState[index].inHead;
 80080e2:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 80080e4:	54c4      	strb	r4, [r0, r3]
    TerminalState[index].inHead = TERMINALINCR(head);
 80080e6:	3301      	adds	r3, #1
 80080e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ec:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inCount++;
 80080f0:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 80080f4:	3301      	adds	r3, #1
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80080fc:	e7eb      	b.n	80080d6 <TerminalInputBufferWrite+0x32>
  return 0;
 80080fe:	2000      	movs	r0, #0
}
 8008100:	bd10      	pop	{r4, pc}
 8008102:	bf00      	nop
 8008104:	20000b20 	.word	0x20000b20

08008108 <USB_LP_CAN_RX0_IRQHandler>:
  HAL_PCD_IRQHandler(&hpcd);
 8008108:	4801      	ldr	r0, [pc, #4]	; (8008110 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 800810a:	f001 bd0d 	b.w	8009b28 <HAL_PCD_IRQHandler>
 800810e:	bf00      	nop
 8008110:	200011f8 	.word	0x200011f8

08008114 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8008114:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8008116:	4b1b      	ldr	r3, [pc, #108]	; (8008184 <Uncompress+0x70>)
{
 8008118:	b08a      	sub	sp, #40	; 0x28
 800811a:	4605      	mov	r5, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 800811c:	466a      	mov	r2, sp
 800811e:	f103 0620 	add.w	r6, r3, #32
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	6859      	ldr	r1, [r3, #4]
 8008126:	4614      	mov	r4, r2
 8008128:	c403      	stmia	r4!, {r0, r1}
 800812a:	3308      	adds	r3, #8
 800812c:	42b3      	cmp	r3, r6
 800812e:	4622      	mov	r2, r4
 8008130:	d1f7      	bne.n	8008122 <Uncompress+0xe>
 8008132:	6818      	ldr	r0, [r3, #0]
 8008134:	889b      	ldrh	r3, [r3, #4]
 8008136:	6020      	str	r0, [r4, #0]
  uint32_t i,bits;
  uint32_t data;
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
 8008138:	4629      	mov	r1, r5
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 800813a:	80a3      	strh	r3, [r4, #4]
  data = (uint8_t)(*str++);
 800813c:	f811 2b02 	ldrb.w	r2, [r1], #2
  data <<= 8;
  data |= (uint8_t)(*str++);
 8008140:	786b      	ldrb	r3, [r5, #1]
 8008142:	4e11      	ldr	r6, [pc, #68]	; (8008188 <Uncompress+0x74>)
 8008144:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  bits = 0;
  i = 0;
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8008148:	2200      	movs	r2, #0
  bits = 0;
 800814a:	4614      	mov	r4, r2
  while((data & (0x3f << 10)) != 0) {
 800814c:	f413 457c 	ands.w	r5, r3, #64512	; 0xfc00
 8008150:	480d      	ldr	r0, [pc, #52]	; (8008188 <Uncompress+0x74>)
 8008152:	d013      	beq.n	800817c <Uncompress+0x68>
    data <<= 6;
 8008154:	019b      	lsls	r3, r3, #6
    data &= 0x3fffff;
 8008156:	f3c3 0315 	ubfx	r3, r3, #0, #22
    c = decoderRing[(data>>16)-1];
 800815a:	a80a      	add	r0, sp, #40	; 0x28
 800815c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    buf[i++] = c;
 8008160:	f810 0c29 	ldrb.w	r0, [r0, #-41]
 8008164:	54b0      	strb	r0, [r6, r2]
    /* keep track of how many bits we have used */
    bits += 6;
 8008166:	1da0      	adds	r0, r4, #6
    //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
    /* Once we have consumed at least 8 bits, fill in the bottom */
    if(bits >= 8) {
 8008168:	2807      	cmp	r0, #7
 800816a:	d904      	bls.n	8008176 <Uncompress+0x62>
      bits -= 8;
 800816c:	1ea0      	subs	r0, r4, #2
      data |= ((uint32_t)(*str++)) << bits; 
 800816e:	780c      	ldrb	r4, [r1, #0]
 8008170:	4084      	lsls	r4, r0
 8008172:	4323      	orrs	r3, r4
 8008174:	3101      	adds	r1, #1
 8008176:	3201      	adds	r2, #1
 8008178:	4604      	mov	r4, r0
 800817a:	e7e7      	b.n	800814c <Uncompress+0x38>
    }
  }
  buf[i]='\0';
 800817c:	5485      	strb	r5, [r0, r2]
  return buf;
}
 800817e:	b00a      	add	sp, #40	; 0x28
 8008180:	bd70      	pop	{r4, r5, r6, pc}
 8008182:	bf00      	nop
 8008184:	0800cf5d 	.word	0x0800cf5d
 8008188:	20000c44 	.word	0x20000c44

0800818c <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 800818c:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 800818e:	4604      	mov	r4, r0
 8008190:	b300      	cbz	r0, 80081d4 <DecodeReadRegister+0x48>
  if(r == NULL) return 0;
 8008192:	b301      	cbz	r1, 80081d6 <DecodeReadRegister+0x4a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8008194:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8008196:	888a      	ldrh	r2, [r1, #4]
 8008198:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 800819a:	2d10      	cmp	r5, #16
 800819c:	d005      	beq.n	80081aa <DecodeReadRegister+0x1e>
 800819e:	2d20      	cmp	r5, #32
 80081a0:	d005      	beq.n	80081ae <DecodeReadRegister+0x22>
 80081a2:	2d08      	cmp	r5, #8
 80081a4:	d105      	bne.n	80081b2 <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 80081a6:	5cd0      	ldrb	r0, [r2, r3]
    break;
 80081a8:	bd38      	pop	{r3, r4, r5, pc}
  case 16:
    val = *(uint16_t *)address;
 80081aa:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 80081ac:	bd38      	pop	{r3, r4, r5, pc}
  case 32:
    val = *(uint32_t *)address;
 80081ae:	58d0      	ldr	r0, [r2, r3]
    break;
 80081b0:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s",
 80081b2:	6808      	ldr	r0, [r1, #0]
 80081b4:	f7ff ffae 	bl	8008114 <Uncompress>
 80081b8:	4629      	mov	r1, r5
 80081ba:	4602      	mov	r2, r0
 80081bc:	4807      	ldr	r0, [pc, #28]	; (80081dc <DecodeReadRegister+0x50>)
 80081be:	f7f8 f913 	bl	80003e8 <printf>
	   (unsigned int)r->size,
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
 80081c2:	6820      	ldr	r0, [r4, #0]
 80081c4:	f7ff ffa6 	bl	8008114 <Uncompress>
 80081c8:	4601      	mov	r1, r0
 80081ca:	4805      	ldr	r0, [pc, #20]	; (80081e0 <DecodeReadRegister+0x54>)
 80081cc:	f7f8 f90c 	bl	80003e8 <printf>
	   Uncompress(p->name));
    return 0;
 80081d0:	2000      	movs	r0, #0
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	bd38      	pop	{r3, r4, r5, pc}
  if(p == NULL) return 0;
 80081d6:	4608      	mov	r0, r1
  }
  return val;
}
 80081d8:	bd38      	pop	{r3, r4, r5, pc}
 80081da:	bf00      	nop
 80081dc:	0800cf83 	.word	0x0800cf83
 80081e0:	0800cfa5 	.word	0x0800cfa5

080081e4 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 80081e4:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 80081e6:	4605      	mov	r5, r0
 80081e8:	b1f8      	cbz	r0, 800822a <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 80081ea:	b1f1      	cbz	r1, 800822a <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 80081ec:	798c      	ldrb	r4, [r1, #6]
  address = p->base + r->offset;
 80081ee:	8888      	ldrh	r0, [r1, #4]
 80081f0:	686b      	ldr	r3, [r5, #4]
  switch(r->size) {
 80081f2:	2c10      	cmp	r4, #16
 80081f4:	d005      	beq.n	8008202 <DecodeWriteRegister+0x1e>
 80081f6:	2c20      	cmp	r4, #32
 80081f8:	d005      	beq.n	8008206 <DecodeWriteRegister+0x22>
 80081fa:	2c08      	cmp	r4, #8
 80081fc:	d106      	bne.n	800820c <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 80081fe:	54c2      	strb	r2, [r0, r3]
 8008200:	e002      	b.n	8008208 <DecodeWriteRegister+0x24>
    break;
  case 16:
    *(uint16_t *)address = val;
 8008202:	52c2      	strh	r2, [r0, r3]
 8008204:	e000      	b.n	8008208 <DecodeWriteRegister+0x24>
    break;  
  case 32:
    *(uint32_t *)address = val;
 8008206:	50c2      	str	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 8008208:	2000      	movs	r0, #0
    break;
 800820a:	bd38      	pop	{r3, r4, r5, pc}
    printf("Invalid size 0x%x for register %s",
 800820c:	6808      	ldr	r0, [r1, #0]
 800820e:	f7ff ff81 	bl	8008114 <Uncompress>
 8008212:	4621      	mov	r1, r4
 8008214:	4602      	mov	r2, r0
 8008216:	4806      	ldr	r0, [pc, #24]	; (8008230 <DecodeWriteRegister+0x4c>)
 8008218:	f7f8 f8e6 	bl	80003e8 <printf>
    printf(" in periphral %s!\n",
 800821c:	6828      	ldr	r0, [r5, #0]
 800821e:	f7ff ff79 	bl	8008114 <Uncompress>
 8008222:	4601      	mov	r1, r0
 8008224:	4803      	ldr	r0, [pc, #12]	; (8008234 <DecodeWriteRegister+0x50>)
 8008226:	f7f8 f8df 	bl	80003e8 <printf>
  if(p == NULL) return 1;
 800822a:	2001      	movs	r0, #1
}
 800822c:	bd38      	pop	{r3, r4, r5, pc}
 800822e:	bf00      	nop
 8008230:	0800cf83 	.word	0x0800cf83
 8008234:	0800cfa5 	.word	0x0800cfa5

08008238 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8008238:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 800823a:	4604      	mov	r4, r0
{
 800823c:	b085      	sub	sp, #20
  if(f == NULL) return;
 800823e:	b1d8      	cbz	r0, 8008278 <DecodeField+0x40>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8008240:	7945      	ldrb	r5, [r0, #5]
 8008242:	2301      	movs	r3, #1
 8008244:	fa03 f505 	lsl.w	r5, r3, r5
 8008248:	1e6a      	subs	r2, r5, #1
 800824a:	7905      	ldrb	r5, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 800824c:	6800      	ldr	r0, [r0, #0]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 800824e:	40e9      	lsrs	r1, r5
 8008250:	ea02 0501 	and.w	r5, r2, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8008254:	f7ff ff5e 	bl	8008114 <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 8008258:	7962      	ldrb	r2, [r4, #5]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 800825a:	4908      	ldr	r1, [pc, #32]	; (800827c <DecodeField+0x44>)
 800825c:	4b08      	ldr	r3, [pc, #32]	; (8008280 <DecodeField+0x48>)
 800825e:	2a01      	cmp	r2, #1
 8008260:	bf98      	it	ls
 8008262:	460b      	movls	r3, r1
 8008264:	7921      	ldrb	r1, [r4, #4]
 8008266:	9102      	str	r1, [sp, #8]
 8008268:	e88d 000c 	stmia.w	sp, {r2, r3}
 800826c:	4601      	mov	r1, r0
 800826e:	462b      	mov	r3, r5
 8008270:	462a      	mov	r2, r5
 8008272:	4804      	ldr	r0, [pc, #16]	; (8008284 <DecodeField+0x4c>)
 8008274:	f7f8 f8b8 	bl	80003e8 <printf>
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8008278:	b005      	add	sp, #20
 800827a:	bd30      	pop	{r4, r5, pc}
 800827c:	0800cfbe 	.word	0x0800cfbe
 8008280:	0800cfb8 	.word	0x0800cfb8
 8008284:	0800cfc4 	.word	0x0800cfc4

08008288 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8008288:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800828c:	460d      	mov	r5, r1
 800828e:	4616      	mov	r6, r2
 8008290:	461f      	mov	r7, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8008292:	4604      	mov	r4, r0
 8008294:	b328      	cbz	r0, 80082e2 <DecodeRegister+0x5a>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8008296:	6800      	ldr	r0, [r0, #0]
 8008298:	f7ff ff3c 	bl	8008114 <Uncompress>
 800829c:	88a1      	ldrh	r1, [r4, #4]
 800829e:	440d      	add	r5, r1
 80082a0:	9501      	str	r5, [sp, #4]
 80082a2:	79a3      	ldrb	r3, [r4, #6]
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	4601      	mov	r1, r0
 80082a8:	4633      	mov	r3, r6
 80082aa:	4632      	mov	r2, r6
 80082ac:	480e      	ldr	r0, [pc, #56]	; (80082e8 <DecodeRegister+0x60>)
 80082ae:	f7f8 f89b 	bl	80003e8 <printf>
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 80082b2:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80082b6:	f1b8 0f00 	cmp.w	r8, #0
 80082ba:	d00b      	beq.n	80082d4 <DecodeRegister+0x4c>
 80082bc:	b18f      	cbz	r7, 80082e2 <DecodeRegister+0x5a>
 80082be:	2500      	movs	r5, #0
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	429d      	cmp	r5, r3
 80082c4:	eb08 00c5 	add.w	r0, r8, r5, lsl #3
 80082c8:	d205      	bcs.n	80082d6 <DecodeRegister+0x4e>
      DecodeField(f,val);
 80082ca:	4631      	mov	r1, r6
 80082cc:	f7ff ffb4 	bl	8008238 <DecodeField>
    for(i=0; i<r->numFields; i++) {
 80082d0:	3501      	adds	r5, #1
 80082d2:	e7f5      	b.n	80082c0 <DecodeRegister+0x38>
      f++;
    }
  }
  if(decodeFields) {
 80082d4:	b12f      	cbz	r7, 80082e2 <DecodeRegister+0x5a>
    printf("\n");
 80082d6:	200a      	movs	r0, #10
  }

}
 80082d8:	b002      	add	sp, #8
 80082da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printf("\n");
 80082de:	f7f8 b89b 	b.w	8000418 <putchar>
}
 80082e2:	b002      	add	sp, #8
 80082e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e8:	0800cfed 	.word	0x0800cfed

080082ec <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 80082ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f0:	4688      	mov	r8, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 80082f2:	4604      	mov	r4, r0
 80082f4:	b1d8      	cbz	r0, 800832e <DecodePeripheral+0x42>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 80082f6:	6800      	ldr	r0, [r0, #0]
 80082f8:	f7ff ff0c 	bl	8008114 <Uncompress>
 80082fc:	6862      	ldr	r2, [r4, #4]
 80082fe:	4601      	mov	r1, r0
 8008300:	480c      	ldr	r0, [pc, #48]	; (8008334 <DecodePeripheral+0x48>)
 8008302:	f7f8 f871 	bl	80003e8 <printf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8008306:	68a7      	ldr	r7, [r4, #8]
 8008308:	b18f      	cbz	r7, 800832e <DecodePeripheral+0x42>
 800830a:	2500      	movs	r5, #0
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	429d      	cmp	r5, r3
 8008310:	eb07 1605 	add.w	r6, r7, r5, lsl #4
 8008314:	d20b      	bcs.n	800832e <DecodePeripheral+0x42>
      /* Read value */
      val = DecodeReadRegister(p,r);
 8008316:	4631      	mov	r1, r6
 8008318:	4620      	mov	r0, r4
 800831a:	f7ff ff37 	bl	800818c <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 800831e:	4643      	mov	r3, r8
 8008320:	4602      	mov	r2, r0
 8008322:	6861      	ldr	r1, [r4, #4]
 8008324:	4630      	mov	r0, r6
 8008326:	f7ff ffaf 	bl	8008288 <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 800832a:	3501      	adds	r5, #1
 800832c:	e7ee      	b.n	800830c <DecodePeripheral+0x20>
 800832e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008332:	bf00      	nop
 8008334:	0800d028 	.word	0x0800d028

08008338 <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4605      	mov	r5, r0
  uint32_t col;
  col = 8;
  printf("\t");
 800833c:	2009      	movs	r0, #9
 800833e:	f7f8 f86b 	bl	8000418 <putchar>
  col = 8;
 8008342:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 8008344:	6828      	ldr	r0, [r5, #0]
 8008346:	b1a0      	cbz	r0, 8008372 <DecodePrintPeripherals+0x3a>
    col += printf("%s",Uncompress(p->name));
 8008348:	f7ff fee4 	bl	8008114 <Uncompress>
 800834c:	4601      	mov	r1, r0
 800834e:	4809      	ldr	r0, [pc, #36]	; (8008374 <DecodePrintPeripherals+0x3c>)
 8008350:	f7f8 f84a 	bl	80003e8 <printf>
    if((p+1)->name != NULL) {
 8008354:	692b      	ldr	r3, [r5, #16]
    col += printf("%s",Uncompress(p->name));
 8008356:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8008358:	b14b      	cbz	r3, 800836e <DecodePrintPeripherals+0x36>
      col += printf(", ");
 800835a:	4807      	ldr	r0, [pc, #28]	; (8008378 <DecodePrintPeripherals+0x40>)
 800835c:	f7f8 f844 	bl	80003e8 <printf>
 8008360:	4404      	add	r4, r0
      if(col > 70) {
 8008362:	2c46      	cmp	r4, #70	; 0x46
 8008364:	d903      	bls.n	800836e <DecodePrintPeripherals+0x36>
	col = 8;
	printf("\n\t");
 8008366:	4805      	ldr	r0, [pc, #20]	; (800837c <DecodePrintPeripherals+0x44>)
 8008368:	f7f8 f83e 	bl	80003e8 <printf>
	col = 8;
 800836c:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 800836e:	3510      	adds	r5, #16
 8008370:	e7e8      	b.n	8008344 <DecodePrintPeripherals+0xc>
      }
    }
  }
}
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	0800cfa2 	.word	0x0800cfa2
 8008378:	0800cfc1 	.word	0x0800cfc1
 800837c:	0800d050 	.word	0x0800d050

08008380 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8008384:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8008386:	460d      	mov	r5, r1
  printf("\t");
 8008388:	f7f8 f846 	bl	8000418 <putchar>
 800838c:	3d01      	subs	r5, #1
 800838e:	3610      	adds	r6, #16
  col = 8;
 8008390:	2408      	movs	r4, #8
  while(count--) {
 8008392:	1c6b      	adds	r3, r5, #1
 8008394:	d018      	beq.n	80083c8 <DecodePrintRegisters+0x48>
    col += printf("%s",Uncompress(r->name));
 8008396:	f856 0c10 	ldr.w	r0, [r6, #-16]
 800839a:	f7ff febb 	bl	8008114 <Uncompress>
 800839e:	4601      	mov	r1, r0
 80083a0:	480a      	ldr	r0, [pc, #40]	; (80083cc <DecodePrintRegisters+0x4c>)
 80083a2:	f7f8 f821 	bl	80003e8 <printf>
 80083a6:	4420      	add	r0, r4
 80083a8:	b2c4      	uxtb	r4, r0
    if(count) {
 80083aa:	b155      	cbz	r5, 80083c2 <DecodePrintRegisters+0x42>
      col += printf(", ");
 80083ac:	4808      	ldr	r0, [pc, #32]	; (80083d0 <DecodePrintRegisters+0x50>)
 80083ae:	f7f8 f81b 	bl	80003e8 <printf>
 80083b2:	4420      	add	r0, r4
 80083b4:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 80083b6:	2c46      	cmp	r4, #70	; 0x46
 80083b8:	d903      	bls.n	80083c2 <DecodePrintRegisters+0x42>
	col = 8;
	printf("\n\t");
 80083ba:	4806      	ldr	r0, [pc, #24]	; (80083d4 <DecodePrintRegisters+0x54>)
 80083bc:	f7f8 f814 	bl	80003e8 <printf>
	col = 8;
 80083c0:	2408      	movs	r4, #8
 80083c2:	3d01      	subs	r5, #1
 80083c4:	3610      	adds	r6, #16
 80083c6:	e7e4      	b.n	8008392 <DecodePrintRegisters+0x12>
      }
    }
    r++;
  }
}
 80083c8:	bd70      	pop	{r4, r5, r6, pc}
 80083ca:	bf00      	nop
 80083cc:	0800cfa2 	.word	0x0800cfa2
 80083d0:	0800cfc1 	.word	0x0800cfc1
 80083d4:	0800d050 	.word	0x0800d050

080083d8 <CmdDecode>:

void CmdDecode(int mode)
{
 80083d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 80083da:	2802      	cmp	r0, #2
{
 80083dc:	b085      	sub	sp, #20
  if(mode == CMD_LONG_HELP) {
 80083de:	d131      	bne.n	8008444 <CmdDecode+0x6c>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 80083e0:	a803      	add	r0, sp, #12
 80083e2:	f7ff fc35 	bl	8007c50 <fetch_string_arg>
    if(rc) {
 80083e6:	b908      	cbnz	r0, 80083ec <CmdDecode+0x14>
 80083e8:	4c86      	ldr	r4, [pc, #536]	; (8008604 <CmdDecode+0x22c>)
 80083ea:	e010      	b.n	800840e <CmdDecode+0x36>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 80083ec:	4886      	ldr	r0, [pc, #536]	; (8008608 <CmdDecode+0x230>)
 80083ee:	f7f8 f851 	bl	8000494 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 80083f2:	4884      	ldr	r0, [pc, #528]	; (8008604 <CmdDecode+0x22c>)
 80083f4:	f7ff ffa0 	bl	8008338 <DecodePrintPeripherals>
      printf("\n\n"
 80083f8:	4884      	ldr	r0, [pc, #528]	; (800860c <CmdDecode+0x234>)
 80083fa:	e020      	b.n	800843e <CmdDecode+0x66>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 80083fc:	9d03      	ldr	r5, [sp, #12]
 80083fe:	f7ff fe89 	bl	8008114 <Uncompress>
 8008402:	4601      	mov	r1, r0
 8008404:	4628      	mov	r0, r5
 8008406:	f7f8 f8f5 	bl	80005f4 <strcasecmp>
 800840a:	b118      	cbz	r0, 8008414 <CmdDecode+0x3c>
	p++;
 800840c:	3410      	adds	r4, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 800840e:	6820      	ldr	r0, [r4, #0]
 8008410:	2800      	cmp	r0, #0
 8008412:	d1f3      	bne.n	80083fc <CmdDecode+0x24>
      }

      if(p->name == NULL) {
 8008414:	6820      	ldr	r0, [r4, #0]
 8008416:	b938      	cbnz	r0, 8008428 <CmdDecode+0x50>
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 8008418:	9903      	ldr	r1, [sp, #12]
 800841a:	487d      	ldr	r0, [pc, #500]	; (8008610 <CmdDecode+0x238>)
 800841c:	f7f7 ffe4 	bl	80003e8 <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
	DecodePrintPeripherals(Peripherals);
 8008420:	4878      	ldr	r0, [pc, #480]	; (8008604 <CmdDecode+0x22c>)
 8008422:	f7ff ff89 	bl	8008338 <DecodePrintPeripherals>
	return;
 8008426:	e0eb      	b.n	8008600 <CmdDecode+0x228>
      }
      printf("Valid registers for peripheral %s:\n"
 8008428:	f7ff fe74 	bl	8008114 <Uncompress>
 800842c:	4601      	mov	r1, r0
 800842e:	4879      	ldr	r0, [pc, #484]	; (8008614 <CmdDecode+0x23c>)
 8008430:	f7f7 ffda 	bl	80003e8 <printf>
	     "\n",
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
 8008434:	89a1      	ldrh	r1, [r4, #12]
 8008436:	68a0      	ldr	r0, [r4, #8]
 8008438:	f7ff ffa2 	bl	8008380 <DecodePrintRegisters>
      printf("\n\n");
 800843c:	4876      	ldr	r0, [pc, #472]	; (8008618 <CmdDecode+0x240>)
 800843e:	f7f8 f829 	bl	8000494 <puts>
 8008442:	e0dd      	b.n	8008600 <CmdDecode+0x228>
    }
    
    return;
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
 8008444:	4668      	mov	r0, sp
 8008446:	f7ff fc03 	bl	8007c50 <fetch_string_arg>
  if(rc) {
 800844a:	b908      	cbnz	r0, 8008450 <CmdDecode+0x78>
 800844c:	4c6d      	ldr	r4, [pc, #436]	; (8008604 <CmdDecode+0x22c>)
 800844e:	e00c      	b.n	800846a <CmdDecode+0x92>
    /* User did not specify a peripheral name */
    printf("Missing peripheral name, please chose one of:\n\n");
 8008450:	4872      	ldr	r0, [pc, #456]	; (800861c <CmdDecode+0x244>)
 8008452:	f7f8 f81f 	bl	8000494 <puts>
 8008456:	e011      	b.n	800847c <CmdDecode+0xa4>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8008458:	9d00      	ldr	r5, [sp, #0]
 800845a:	f7ff fe5b 	bl	8008114 <Uncompress>
 800845e:	4601      	mov	r1, r0
 8008460:	4628      	mov	r0, r5
 8008462:	f7f8 f8c7 	bl	80005f4 <strcasecmp>
 8008466:	b118      	cbz	r0, 8008470 <CmdDecode+0x98>
    p++;
 8008468:	3410      	adds	r4, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800846a:	6820      	ldr	r0, [r4, #0]
 800846c:	2800      	cmp	r0, #0
 800846e:	d1f3      	bne.n	8008458 <CmdDecode+0x80>
  }

  if(p->name == NULL) {
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	b93b      	cbnz	r3, 8008484 <CmdDecode+0xac>
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8008474:	9900      	ldr	r1, [sp, #0]
 8008476:	486a      	ldr	r0, [pc, #424]	; (8008620 <CmdDecode+0x248>)
 8008478:	f7f7 ffb6 	bl	80003e8 <printf>
	   pname);
    DecodePrintPeripherals(Peripherals);
 800847c:	4861      	ldr	r0, [pc, #388]	; (8008604 <CmdDecode+0x22c>)
 800847e:	f7ff ff5b 	bl	8008338 <DecodePrintPeripherals>
 8008482:	e7db      	b.n	800843c <CmdDecode+0x64>
    printf("\n\n");
    return;
  }
  
  /* See if the user is specifying a register */
  rc = fetch_string_arg(&rname);
 8008484:	a801      	add	r0, sp, #4
 8008486:	f7ff fbe3 	bl	8007c50 <fetch_string_arg>
  if(rc) {
 800848a:	b108      	cbz	r0, 8008490 <CmdDecode+0xb8>
    /* No register name specified, dump whole peripheral */
    DecodePeripheral(p,0);
 800848c:	2100      	movs	r1, #0
 800848e:	e016      	b.n	80084be <CmdDecode+0xe6>
    return;
  }

  /* See if we can find the register in the list. */
  r = p->registers;
 8008490:	68a5      	ldr	r5, [r4, #8]
  i = p->numRegisters;
 8008492:	89a7      	ldrh	r7, [r4, #12]
 8008494:	9e01      	ldr	r6, [sp, #4]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 8008496:	b157      	cbz	r7, 80084ae <CmdDecode+0xd6>
 8008498:	6828      	ldr	r0, [r5, #0]
 800849a:	f7ff fe3b 	bl	8008114 <Uncompress>
 800849e:	4601      	mov	r1, r0
 80084a0:	4630      	mov	r0, r6
 80084a2:	f7f8 f8a7 	bl	80005f4 <strcasecmp>
 80084a6:	3f01      	subs	r7, #1
 80084a8:	b168      	cbz	r0, 80084c6 <CmdDecode+0xee>
    r++;
 80084aa:	3510      	adds	r5, #16
 80084ac:	e7f2      	b.n	8008494 <CmdDecode+0xbc>
  }

  if(i == -1) {
    /* if the user says 'full' do a full decode */
    if(strcasecmp(rname,"full") == 0) {
 80084ae:	495d      	ldr	r1, [pc, #372]	; (8008624 <CmdDecode+0x24c>)
 80084b0:	4630      	mov	r0, r6
 80084b2:	f7f8 f89f 	bl	80005f4 <strcasecmp>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f040 8099 	bne.w	80085ee <CmdDecode+0x216>
      DecodePeripheral(p,1);
 80084bc:	2101      	movs	r1, #1
 80084be:	4620      	mov	r0, r4
 80084c0:	f7ff ff14 	bl	80082ec <DecodePeripheral>
      return;
 80084c4:	e09c      	b.n	8008600 <CmdDecode+0x228>
    printf("\n\n");
    return;
  }    

  /* Check to see if there is a field name, or integer value to program */
  rc = fetch_string_arg(&fname);
 80084c6:	a802      	add	r0, sp, #8
 80084c8:	f7ff fbc2 	bl	8007c50 <fetch_string_arg>
  if(rc == 0) {
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f040 8082 	bne.w	80085d6 <CmdDecode+0x1fe>
    /* if the user says 'val', decode the value given, as if it came
     * from the named register.
     */
    if(strcasecmp(fname,"val") == 0) {
 80084d2:	4955      	ldr	r1, [pc, #340]	; (8008628 <CmdDecode+0x250>)
 80084d4:	9802      	ldr	r0, [sp, #8]
 80084d6:	f7f8 f88d 	bl	80005f4 <strcasecmp>
 80084da:	b940      	cbnz	r0, 80084ee <CmdDecode+0x116>
      rc = fetch_uint32_arg(&val);
 80084dc:	a803      	add	r0, sp, #12
 80084de:	f7ff fba3 	bl	8007c28 <fetch_uint32_arg>
      if(rc) {
 80084e2:	b108      	cbz	r0, 80084e8 <CmdDecode+0x110>
	printf("Missing value to use in decode\n");
 80084e4:	4851      	ldr	r0, [pc, #324]	; (800862c <CmdDecode+0x254>)
 80084e6:	e7aa      	b.n	800843e <CmdDecode+0x66>
	return;
      }
      DecodeRegister(r,p->base,val,1);
 80084e8:	2301      	movs	r3, #1
 80084ea:	9a03      	ldr	r2, [sp, #12]
 80084ec:	e07a      	b.n	80085e4 <CmdDecode+0x20c>
      return;
    }

    /* There was something... see if it matches a field name */
    f = r->fields;
 80084ee:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 80084f0:	6830      	ldr	r0, [r6, #0]
 80084f2:	b910      	cbnz	r0, 80084fa <CmdDecode+0x122>
      f++;
    }
    if(f->name != NULL) {
 80084f4:	6837      	ldr	r7, [r6, #0]
 80084f6:	b95f      	cbnz	r7, 8008510 <CmdDecode+0x138>
 80084f8:	e046      	b.n	8008588 <CmdDecode+0x1b0>
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 80084fa:	9f02      	ldr	r7, [sp, #8]
 80084fc:	f7ff fe0a 	bl	8008114 <Uncompress>
 8008500:	4601      	mov	r1, r0
 8008502:	4638      	mov	r0, r7
 8008504:	f7f8 f876 	bl	80005f4 <strcasecmp>
 8008508:	2800      	cmp	r0, #0
 800850a:	d0f3      	beq.n	80084f4 <CmdDecode+0x11c>
      f++;
 800850c:	3608      	adds	r6, #8
 800850e:	e7ef      	b.n	80084f0 <CmdDecode+0x118>
      /* Matched a field name, look for the value */
      rc = fetch_uint32_arg(&val);
 8008510:	a803      	add	r0, sp, #12
 8008512:	f7ff fb89 	bl	8007c28 <fetch_uint32_arg>
      if(rc) {
 8008516:	b128      	cbz	r0, 8008524 <CmdDecode+0x14c>
	/* Unable to locate a value */
	printf("Missing Value to program into register %s\n",
 8008518:	6828      	ldr	r0, [r5, #0]
 800851a:	f7ff fdfb 	bl	8008114 <Uncompress>
 800851e:	4601      	mov	r1, r0
 8008520:	4843      	ldr	r0, [pc, #268]	; (8008630 <CmdDecode+0x258>)
 8008522:	e040      	b.n	80085a6 <CmdDecode+0x1ce>
	       Uncompress(r->name));
	return;
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
 8008524:	4629      	mov	r1, r5
 8008526:	4620      	mov	r0, r4
 8008528:	f7ff fe30 	bl	800818c <DecodeReadRegister>
      /* Create mask */
      m = (1<<f->width)-1;
 800852c:	7972      	ldrb	r2, [r6, #5]

      oval = (t >> f->offset) & m; /* Save old value */
 800852e:	f896 e004 	ldrb.w	lr, [r6, #4]

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
      DecodeWriteRegister(p,r,t);
 8008532:	9903      	ldr	r1, [sp, #12]
      m = (1<<f->width)-1;
 8008534:	2301      	movs	r3, #1
 8008536:	4093      	lsls	r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 8008538:	fa20 f70e 	lsr.w	r7, r0, lr
      m = (1<<f->width)-1;
 800853c:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 800853e:	fa03 f20e 	lsl.w	r2, r3, lr
      oval = (t >> f->offset) & m; /* Save old value */
 8008542:	401f      	ands	r7, r3
      DecodeWriteRegister(p,r,t);
 8008544:	400b      	ands	r3, r1
 8008546:	fa03 f30e 	lsl.w	r3, r3, lr
      t &= ~(m << f->offset);
 800854a:	ea20 0202 	bic.w	r2, r0, r2
      DecodeWriteRegister(p,r,t);
 800854e:	431a      	orrs	r2, r3
 8008550:	4629      	mov	r1, r5
 8008552:	4620      	mov	r0, r4
 8008554:	f7ff fe46 	bl	80081e4 <DecodeWriteRegister>
      printf("%s.",
 8008558:	6820      	ldr	r0, [r4, #0]
 800855a:	f7ff fddb 	bl	8008114 <Uncompress>
 800855e:	4601      	mov	r1, r0
 8008560:	4834      	ldr	r0, [pc, #208]	; (8008634 <CmdDecode+0x25c>)
 8008562:	f7f7 ff41 	bl	80003e8 <printf>
	     Uncompress(p->name));
      printf("%s.",
 8008566:	6828      	ldr	r0, [r5, #0]
 8008568:	f7ff fdd4 	bl	8008114 <Uncompress>
 800856c:	4601      	mov	r1, r0
 800856e:	4831      	ldr	r0, [pc, #196]	; (8008634 <CmdDecode+0x25c>)
 8008570:	f7f7 ff3a 	bl	80003e8 <printf>
	     Uncompress(r->name));
      printf("%s (%d) -> (%d)\n",
 8008574:	6830      	ldr	r0, [r6, #0]
 8008576:	f7ff fdcd 	bl	8008114 <Uncompress>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	4601      	mov	r1, r0
 800857e:	463a      	mov	r2, r7
 8008580:	482d      	ldr	r0, [pc, #180]	; (8008638 <CmdDecode+0x260>)
 8008582:	f7f7 ff31 	bl	80003e8 <printf>
	     Uncompress(f->name),
	     (unsigned)oval, (unsigned)val);
      return;
 8008586:	e03b      	b.n	8008600 <CmdDecode+0x228>

    }
    
    /* No matching register name, check if this is an integer */
    errno = 0;
 8008588:	f7f7 fe8e 	bl	80002a8 <__errno>
    val = strtoul(fname,NULL,0);
 800858c:	463a      	mov	r2, r7
    errno = 0;
 800858e:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8008590:	4639      	mov	r1, r7
 8008592:	9802      	ldr	r0, [sp, #8]
 8008594:	f7f8 f9fa 	bl	800098c <strtoul>
 8008598:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 800859a:	f7f7 fe85 	bl	80002a8 <__errno>
 800859e:	6803      	ldr	r3, [r0, #0]
 80085a0:	b123      	cbz	r3, 80085ac <CmdDecode+0x1d4>
      /* Unable to do conversion */
      printf("Invalid number '%s' entered.\n",
 80085a2:	9902      	ldr	r1, [sp, #8]
 80085a4:	4825      	ldr	r0, [pc, #148]	; (800863c <CmdDecode+0x264>)
 80085a6:	f7f7 ff1f 	bl	80003e8 <printf>
	     fname);
      return;
 80085aa:	e029      	b.n	8008600 <CmdDecode+0x228>
    }
    /* Write to register */
    DecodeWriteRegister(p,r,val);
 80085ac:	9a03      	ldr	r2, [sp, #12]
 80085ae:	4629      	mov	r1, r5
 80085b0:	4620      	mov	r0, r4
 80085b2:	f7ff fe17 	bl	80081e4 <DecodeWriteRegister>
    printf("%s.",
 80085b6:	6820      	ldr	r0, [r4, #0]
 80085b8:	f7ff fdac 	bl	8008114 <Uncompress>
 80085bc:	4601      	mov	r1, r0
 80085be:	481d      	ldr	r0, [pc, #116]	; (8008634 <CmdDecode+0x25c>)
 80085c0:	f7f7 ff12 	bl	80003e8 <printf>
	   Uncompress(p->name));
    printf("%s = 0x%08x\n",
 80085c4:	6828      	ldr	r0, [r5, #0]
 80085c6:	f7ff fda5 	bl	8008114 <Uncompress>
 80085ca:	9a03      	ldr	r2, [sp, #12]
 80085cc:	4601      	mov	r1, r0
 80085ce:	481c      	ldr	r0, [pc, #112]	; (8008640 <CmdDecode+0x268>)
 80085d0:	f7f7 ff0a 	bl	80003e8 <printf>
	   Uncompress(r->name),
	   (unsigned)val);
    return;
 80085d4:	e014      	b.n	8008600 <CmdDecode+0x228>

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 80085d6:	4629      	mov	r1, r5
 80085d8:	4620      	mov	r0, r4
 80085da:	f7ff fdd7 	bl	800818c <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 80085de:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 80085e0:	4602      	mov	r2, r0
 80085e2:	9003      	str	r0, [sp, #12]
  DecodeRegister(r,p->base, val,1);
 80085e4:	6861      	ldr	r1, [r4, #4]
 80085e6:	4628      	mov	r0, r5
 80085e8:	f7ff fe4e 	bl	8008288 <DecodeRegister>

  return;
 80085ec:	e008      	b.n	8008600 <CmdDecode+0x228>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 80085ee:	6820      	ldr	r0, [r4, #0]
 80085f0:	f7ff fd90 	bl	8008114 <Uncompress>
 80085f4:	4631      	mov	r1, r6
 80085f6:	4602      	mov	r2, r0
 80085f8:	4812      	ldr	r0, [pc, #72]	; (8008644 <CmdDecode+0x26c>)
 80085fa:	f7f7 fef5 	bl	80003e8 <printf>
 80085fe:	e719      	b.n	8008434 <CmdDecode+0x5c>
}
 8008600:	b005      	add	sp, #20
 8008602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008604:	08016be8 	.word	0x08016be8
 8008608:	0800d053 	.word	0x0800d053
 800860c:	0800d266 	.word	0x0800d266
 8008610:	0800d2bb 	.word	0x0800d2bb
 8008614:	0800d2f6 	.word	0x0800d2f6
 8008618:	0800d384 	.word	0x0800d384
 800861c:	0800d31b 	.word	0x0800d31b
 8008620:	0800d34a 	.word	0x0800d34a
 8008624:	0800d451 	.word	0x0800d451
 8008628:	0800d3c3 	.word	0x0800d3c3
 800862c:	0800d3c7 	.word	0x0800d3c7
 8008630:	0800d3e6 	.word	0x0800d3e6
 8008634:	0800d411 	.word	0x0800d411
 8008638:	0800d415 	.word	0x0800d415
 800863c:	0800d426 	.word	0x0800d426
 8008640:	0800d444 	.word	0x0800d444
 8008644:	0800d386 	.word	0x0800d386

08008648 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008648:	4915      	ldr	r1, [pc, #84]	; (80086a0 <SystemInit+0x58>)
 800864a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800864e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008656:	4b13      	ldr	r3, [pc, #76]	; (80086a4 <SystemInit+0x5c>)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	f042 0201 	orr.w	r2, r2, #1
 800865e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8008660:	6858      	ldr	r0, [r3, #4]
 8008662:	4a11      	ldr	r2, [pc, #68]	; (80086a8 <SystemInit+0x60>)
 8008664:	4002      	ands	r2, r0
 8008666:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800866e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008672:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800867a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8008682:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8008684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008686:	f022 020f 	bic.w	r2, r2, #15
 800868a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800868c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800868e:	4a07      	ldr	r2, [pc, #28]	; (80086ac <SystemInit+0x64>)
 8008690:	4002      	ands	r2, r0
 8008692:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008694:	2200      	movs	r2, #0
 8008696:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008698:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800869c:	608b      	str	r3, [r1, #8]
 800869e:	4770      	bx	lr
 80086a0:	e000ed00 	.word	0xe000ed00
 80086a4:	40021000 	.word	0x40021000
 80086a8:	f87fc00c 	.word	0xf87fc00c
 80086ac:	ff00fccc 	.word	0xff00fccc

080086b0 <HAL_RCC_OscConfig>:

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086b0:	6803      	ldr	r3, [r0, #0]
 80086b2:	07db      	lsls	r3, r3, #31
{
 80086b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086ba:	d404      	bmi.n	80086c6 <HAL_RCC_OscConfig+0x16>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	079f      	lsls	r7, r3, #30
 80086c0:	f100 80c5 	bmi.w	800884e <HAL_RCC_OscConfig+0x19e>
 80086c4:	e155      	b.n	8008972 <HAL_RCC_OscConfig+0x2c2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80086c6:	4dc1      	ldr	r5, [pc, #772]	; (80089cc <HAL_RCC_OscConfig+0x31c>)
 80086c8:	686b      	ldr	r3, [r5, #4]
 80086ca:	f003 030c 	and.w	r3, r3, #12
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d007      	beq.n	80086e2 <HAL_RCC_OscConfig+0x32>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80086d2:	686b      	ldr	r3, [r5, #4]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80086d4:	f003 030c 	and.w	r3, r3, #12
 80086d8:	2b08      	cmp	r3, #8
 80086da:	d128      	bne.n	800872e <HAL_RCC_OscConfig+0x7e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80086dc:	686b      	ldr	r3, [r5, #4]
 80086de:	03de      	lsls	r6, r3, #15
 80086e0:	d525      	bpl.n	800872e <HAL_RCC_OscConfig+0x7e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80086e6:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80086ea:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 80086ee:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80086f2:	f043 0301 	orr.w	r3, r3, #1
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <HAL_RCC_OscConfig+0x4e>
 80086fa:	6829      	ldr	r1, [r5, #0]
 80086fc:	e004      	b.n	8008708 <HAL_RCC_OscConfig+0x58>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086fe:	fa92 f2a2 	rbit	r2, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008702:	fab2 f282 	clz	r2, r2
 8008706:	6a69      	ldr	r1, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800870c:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008710:	fab3 f383 	clz	r3, r3
 8008714:	2201      	movs	r2, #1
 8008716:	f003 031f 	and.w	r3, r3, #31
 800871a:	fa02 f303 	lsl.w	r3, r2, r3
 800871e:	420b      	tst	r3, r1
 8008720:	d0cc      	beq.n	80086bc <HAL_RCC_OscConfig+0xc>
 8008722:	6863      	ldr	r3, [r4, #4]
 8008724:	4293      	cmp	r3, r2
 8008726:	d0c9      	beq.n	80086bc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8008728:	2001      	movs	r0, #1
 800872a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800872e:	4ea8      	ldr	r6, [pc, #672]	; (80089d0 <HAL_RCC_OscConfig+0x320>)
 8008730:	2300      	movs	r3, #0
 8008732:	7033      	strb	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8008734:	f000 fc8a 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008738:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800873c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800873e:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008742:	f241 3a88 	movw	sl, #5000	; 0x1388
 8008746:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800874a:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800874e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008752:	f043 0301 	orr.w	r3, r3, #1
 8008756:	2b01      	cmp	r3, #1
 8008758:	d101      	bne.n	800875e <HAL_RCC_OscConfig+0xae>
 800875a:	682a      	ldr	r2, [r5, #0]
 800875c:	e004      	b.n	8008768 <HAL_RCC_OscConfig+0xb8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800875e:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008762:	fab3 f383 	clz	r3, r3
 8008766:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008768:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800876c:	fab3 f383 	clz	r3, r3
 8008770:	f003 031f 	and.w	r3, r3, #31
 8008774:	fa08 f303 	lsl.w	r3, r8, r3
 8008778:	4213      	tst	r3, r2
 800877a:	d008      	beq.n	800878e <HAL_RCC_OscConfig+0xde>
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800877c:	f000 fc66 	bl	800904c <HAL_GetTick>
 8008780:	ebc9 0000 	rsb	r0, r9, r0
 8008784:	4550      	cmp	r0, sl
 8008786:	d9de      	bls.n	8008746 <HAL_RCC_OscConfig+0x96>
          return HAL_TIMEOUT;
 8008788:	2003      	movs	r0, #3
 800878a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800878e:	7923      	ldrb	r3, [r4, #4]
 8008790:	7033      	strb	r3, [r6, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008792:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008794:	f023 020f 	bic.w	r2, r3, #15
 8008798:	68a3      	ldr	r3, [r4, #8]
 800879a:	4313      	orrs	r3, r2
 800879c:	62eb      	str	r3, [r5, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 800879e:	6866      	ldr	r6, [r4, #4]
 80087a0:	2e01      	cmp	r6, #1
 80087a2:	d129      	bne.n	80087f8 <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 80087a4:	f000 fc52 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087a8:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 80087ac:	4680      	mov	r8, r0
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80087ae:	f241 3988 	movw	r9, #5000	; 0x1388
 80087b2:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80087b6:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80087be:	f043 0301 	orr.w	r3, r3, #1
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d101      	bne.n	80087ca <HAL_RCC_OscConfig+0x11a>
 80087c6:	682a      	ldr	r2, [r5, #0]
 80087c8:	e004      	b.n	80087d4 <HAL_RCC_OscConfig+0x124>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ca:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80087ce:	fab3 f383 	clz	r3, r3
 80087d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087d4:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80087d8:	fab3 f383 	clz	r3, r3
 80087dc:	f003 031f 	and.w	r3, r3, #31
 80087e0:	fa06 f303 	lsl.w	r3, r6, r3
 80087e4:	4213      	tst	r3, r2
 80087e6:	f47f af69 	bne.w	80086bc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80087ea:	f000 fc2f 	bl	800904c <HAL_GetTick>
 80087ee:	ebc8 0000 	rsb	r0, r8, r0
 80087f2:	4548      	cmp	r0, r9
 80087f4:	d9dd      	bls.n	80087b2 <HAL_RCC_OscConfig+0x102>
 80087f6:	e7c7      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
        tickstart = HAL_GetTick();
 80087f8:	f000 fc28 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087fc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8008800:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008802:	2701      	movs	r7, #1
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008804:	f241 3988 	movw	r9, #5000	; 0x1388
 8008808:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800880c:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008810:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008814:	f043 0301 	orr.w	r3, r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	d101      	bne.n	8008820 <HAL_RCC_OscConfig+0x170>
 800881c:	682a      	ldr	r2, [r5, #0]
 800881e:	e004      	b.n	800882a <HAL_RCC_OscConfig+0x17a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008820:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008824:	fab3 f383 	clz	r3, r3
 8008828:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800882a:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800882e:	fab3 f383 	clz	r3, r3
 8008832:	f003 031f 	and.w	r3, r3, #31
 8008836:	fa07 f303 	lsl.w	r3, r7, r3
 800883a:	4213      	tst	r3, r2
 800883c:	f43f af3e 	beq.w	80086bc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008840:	f000 fc04 	bl	800904c <HAL_GetTick>
 8008844:	ebc8 0000 	rsb	r0, r8, r0
 8008848:	4548      	cmp	r0, r9
 800884a:	d9dd      	bls.n	8008808 <HAL_RCC_OscConfig+0x158>
 800884c:	e79c      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800884e:	4d5f      	ldr	r5, [pc, #380]	; (80089cc <HAL_RCC_OscConfig+0x31c>)
 8008850:	686b      	ldr	r3, [r5, #4]
 8008852:	f013 0f0c 	tst.w	r3, #12
 8008856:	d007      	beq.n	8008868 <HAL_RCC_OscConfig+0x1b8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008858:	686b      	ldr	r3, [r5, #4]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800885a:	f003 030c 	and.w	r3, r3, #12
 800885e:	2b08      	cmp	r3, #8
 8008860:	d125      	bne.n	80088ae <HAL_RCC_OscConfig+0x1fe>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008862:	686b      	ldr	r3, [r5, #4]
 8008864:	03d8      	lsls	r0, r3, #15
 8008866:	d422      	bmi.n	80088ae <HAL_RCC_OscConfig+0x1fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008868:	2202      	movs	r2, #2
 800886a:	fa92 f3a2 	rbit	r3, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800886e:	fab3 f383 	clz	r3, r3
    {
      /* When the HSI is used as system clock it is not allowed to be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008872:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008876:	f043 0301 	orr.w	r3, r3, #1
 800887a:	2b01      	cmp	r3, #1
 800887c:	d101      	bne.n	8008882 <HAL_RCC_OscConfig+0x1d2>
 800887e:	6829      	ldr	r1, [r5, #0]
 8008880:	e004      	b.n	800888c <HAL_RCC_OscConfig+0x1dc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008882:	fa92 f2a2 	rbit	r2, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008886:	fab2 f282 	clz	r2, r2
 800888a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800888c:	2302      	movs	r3, #2
 800888e:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008892:	fab3 f383 	clz	r3, r3
 8008896:	2201      	movs	r2, #1
 8008898:	f003 031f 	and.w	r3, r3, #31
 800889c:	fa02 f303 	lsl.w	r3, r2, r3
 80088a0:	420b      	tst	r3, r1
 80088a2:	d02f      	beq.n	8008904 <HAL_RCC_OscConfig+0x254>
 80088a4:	6923      	ldr	r3, [r4, #16]
 80088a6:	4293      	cmp	r3, r2
 80088a8:	f47f af3e 	bne.w	8008728 <HAL_RCC_OscConfig+0x78>
 80088ac:	e02a      	b.n	8008904 <HAL_RCC_OscConfig+0x254>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088ae:	6922      	ldr	r2, [r4, #16]
 80088b0:	4b48      	ldr	r3, [pc, #288]	; (80089d4 <HAL_RCC_OscConfig+0x324>)
 80088b2:	b3b2      	cbz	r2, 8008922 <HAL_RCC_OscConfig+0x272>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088b4:	2601      	movs	r6, #1
 80088b6:	601e      	str	r6, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80088b8:	f000 fbc8 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088bc:	2702      	movs	r7, #2
 80088be:	4680      	mov	r8, r0
 80088c0:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80088c4:	fab3 f383 	clz	r3, r3

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088c8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80088cc:	f043 0301 	orr.w	r3, r3, #1
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d101      	bne.n	80088d8 <HAL_RCC_OscConfig+0x228>
 80088d4:	682a      	ldr	r2, [r5, #0]
 80088d6:	e004      	b.n	80088e2 <HAL_RCC_OscConfig+0x232>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088d8:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80088dc:	fab3 f383 	clz	r3, r3
 80088e0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088e2:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80088e6:	fab3 f383 	clz	r3, r3
 80088ea:	f003 031f 	and.w	r3, r3, #31
 80088ee:	fa06 f303 	lsl.w	r3, r6, r3
 80088f2:	4213      	tst	r3, r2
 80088f4:	d106      	bne.n	8008904 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 80088f6:	f000 fba9 	bl	800904c <HAL_GetTick>
 80088fa:	ebc8 0000 	rsb	r0, r8, r0
 80088fe:	2864      	cmp	r0, #100	; 0x64
 8008900:	d9de      	bls.n	80088c0 <HAL_RCC_OscConfig+0x210>
 8008902:	e741      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
            return HAL_TIMEOUT;
          }      
        } 

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008904:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008906:	23f8      	movs	r3, #248	; 0xf8
 8008908:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800890c:	fab3 f383 	clz	r3, r3
 8008910:	6961      	ldr	r1, [r4, #20]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	fa01 f303 	lsl.w	r3, r1, r3
 8008918:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800891c:	4313      	orrs	r3, r2
 800891e:	602b      	str	r3, [r5, #0]
 8008920:	e027      	b.n	8008972 <HAL_RCC_OscConfig+0x2c2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008922:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008924:	f000 fb92 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008928:	2602      	movs	r6, #2
 800892a:	4680      	mov	r8, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800892c:	2701      	movs	r7, #1
 800892e:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008932:	fab3 f383 	clz	r3, r3
 8008936:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800893a:	f043 0301 	orr.w	r3, r3, #1
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_RCC_OscConfig+0x296>
 8008942:	682a      	ldr	r2, [r5, #0]
 8008944:	e004      	b.n	8008950 <HAL_RCC_OscConfig+0x2a0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008946:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800894a:	fab3 f383 	clz	r3, r3
 800894e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008950:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008954:	fab3 f383 	clz	r3, r3
 8008958:	f003 031f 	and.w	r3, r3, #31
 800895c:	fa07 f303 	lsl.w	r3, r7, r3
 8008960:	4213      	tst	r3, r2
 8008962:	d006      	beq.n	8008972 <HAL_RCC_OscConfig+0x2c2>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8008964:	f000 fb72 	bl	800904c <HAL_GetTick>
 8008968:	ebc8 0000 	rsb	r0, r8, r0
 800896c:	2864      	cmp	r0, #100	; 0x64
 800896e:	d9de      	bls.n	800892e <HAL_RCC_OscConfig+0x27e>
 8008970:	e70a      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	0719      	lsls	r1, r3, #28
 8008976:	d404      	bmi.n	8008982 <HAL_RCC_OscConfig+0x2d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	075a      	lsls	r2, r3, #29
 800897c:	f140 80a9 	bpl.w	8008ad2 <HAL_RCC_OscConfig+0x422>
 8008980:	e04c      	b.n	8008a1c <HAL_RCC_OscConfig+0x36c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008982:	69a2      	ldr	r2, [r4, #24]
 8008984:	4d11      	ldr	r5, [pc, #68]	; (80089cc <HAL_RCC_OscConfig+0x31c>)
 8008986:	4b14      	ldr	r3, [pc, #80]	; (80089d8 <HAL_RCC_OscConfig+0x328>)
 8008988:	b342      	cbz	r2, 80089dc <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_LSI_ENABLE();
 800898a:	2601      	movs	r6, #1
 800898c:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 800898e:	f000 fb5d 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008992:	2702      	movs	r7, #2
 8008994:	4680      	mov	r8, r0
 8008996:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800899a:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800899e:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089a2:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089a8:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089ac:	fab3 f383 	clz	r3, r3
 80089b0:	f003 031f 	and.w	r3, r3, #31
 80089b4:	fa06 f303 	lsl.w	r3, r6, r3
 80089b8:	4213      	tst	r3, r2
 80089ba:	d1dd      	bne.n	8008978 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 80089bc:	f000 fb46 	bl	800904c <HAL_GetTick>
 80089c0:	ebc8 0000 	rsb	r0, r8, r0
 80089c4:	2864      	cmp	r0, #100	; 0x64
 80089c6:	d9e6      	bls.n	8008996 <HAL_RCC_OscConfig+0x2e6>
 80089c8:	e6de      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
 80089ca:	bf00      	nop
 80089cc:	40021000 	.word	0x40021000
 80089d0:	40021002 	.word	0x40021002
 80089d4:	42420000 	.word	0x42420000
 80089d8:	42420480 	.word	0x42420480
      __HAL_RCC_LSI_DISABLE();
 80089dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80089de:	f000 fb35 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089e2:	2602      	movs	r6, #2
 80089e4:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089e6:	2701      	movs	r7, #1
 80089e8:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089ec:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089f0:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089f4:	fab3 f383 	clz	r3, r3
 80089f8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089fa:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089fe:	fab3 f383 	clz	r3, r3
 8008a02:	f003 031f 	and.w	r3, r3, #31
 8008a06:	fa07 f303 	lsl.w	r3, r7, r3
 8008a0a:	4213      	tst	r3, r2
 8008a0c:	d0b4      	beq.n	8008978 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8008a0e:	f000 fb1d 	bl	800904c <HAL_GetTick>
 8008a12:	ebc8 0000 	rsb	r0, r8, r0
 8008a16:	2864      	cmp	r0, #100	; 0x64
 8008a18:	d9e6      	bls.n	80089e8 <HAL_RCC_OscConfig+0x338>
 8008a1a:	e6b5      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8008a1c:	4d98      	ldr	r5, [pc, #608]	; (8008c80 <HAL_RCC_OscConfig+0x5d0>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a1e:	4e99      	ldr	r6, [pc, #612]	; (8008c84 <HAL_RCC_OscConfig+0x5d4>)
    __PWR_CLK_ENABLE();
 8008a20:	69eb      	ldr	r3, [r5, #28]
 8008a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a26:	61eb      	str	r3, [r5, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a28:	6833      	ldr	r3, [r6, #0]
 8008a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a2e:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a30:	f000 fb0c 	bl	800904c <HAL_GetTick>
 8008a34:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008a36:	6833      	ldr	r3, [r6, #0]
 8008a38:	05db      	lsls	r3, r3, #23
 8008a3a:	d54e      	bpl.n	8008ada <HAL_RCC_OscConfig+0x42a>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8008a3c:	6a2b      	ldr	r3, [r5, #32]
 8008a3e:	f023 0305 	bic.w	r3, r3, #5
 8008a42:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008a44:	f000 fb02 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a48:	2602      	movs	r6, #2
 8008a4a:	4681      	mov	r9, r0
 8008a4c:	46b0      	mov	r8, r6
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a4e:	2701      	movs	r7, #1
 8008a50:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a54:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a58:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a5c:	fab3 f383 	clz	r3, r3
 8008a60:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008a64:	f043 0302 	orr.w	r3, r3, #2
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	bf0c      	ite	eq
 8008a6c:	6a2a      	ldreq	r2, [r5, #32]
 8008a6e:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a70:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a74:	fab3 f383 	clz	r3, r3
 8008a78:	f003 031f 	and.w	r3, r3, #31
 8008a7c:	fa07 f303 	lsl.w	r3, r7, r3
 8008a80:	4213      	tst	r3, r2
 8008a82:	d130      	bne.n	8008ae6 <HAL_RCC_OscConfig+0x436>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a84:	6a2b      	ldr	r3, [r5, #32]
 8008a86:	68e6      	ldr	r6, [r4, #12]
 8008a88:	f023 0305 	bic.w	r3, r3, #5
 8008a8c:	4333      	orrs	r3, r6
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008a8e:	2e01      	cmp	r6, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a90:	622b      	str	r3, [r5, #32]
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008a92:	d13a      	bne.n	8008b0a <HAL_RCC_OscConfig+0x45a>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8008a94:	f000 fada 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a98:	2702      	movs	r7, #2
 8008a9a:	4681      	mov	r9, r0
 8008a9c:	46b8      	mov	r8, r7
 8008a9e:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008aa2:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aa6:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008aaa:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aae:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008ab2:	f043 0302 	orr.w	r3, r3, #2
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	bf0c      	ite	eq
 8008aba:	6a2a      	ldreq	r2, [r5, #32]
 8008abc:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008abe:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ac2:	fab3 f383 	clz	r3, r3
 8008ac6:	f003 031f 	and.w	r3, r3, #31
 8008aca:	fa06 f303 	lsl.w	r3, r6, r3
 8008ace:	4213      	tst	r3, r2
 8008ad0:	d012      	beq.n	8008af8 <HAL_RCC_OscConfig+0x448>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ad2:	69e2      	ldr	r2, [r4, #28]
 8008ad4:	2a00      	cmp	r2, #0
 8008ad6:	d141      	bne.n	8008b5c <HAL_RCC_OscConfig+0x4ac>
 8008ad8:	e08f      	b.n	8008bfa <HAL_RCC_OscConfig+0x54a>
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 8008ada:	f000 fab7 	bl	800904c <HAL_GetTick>
 8008ade:	1bc0      	subs	r0, r0, r7
 8008ae0:	2864      	cmp	r0, #100	; 0x64
 8008ae2:	d9a8      	bls.n	8008a36 <HAL_RCC_OscConfig+0x386>
 8008ae4:	e650      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8008ae6:	f000 fab1 	bl	800904c <HAL_GetTick>
 8008aea:	f241 3388 	movw	r3, #5000	; 0x1388
 8008aee:	ebc9 0000 	rsb	r0, r9, r0
 8008af2:	4298      	cmp	r0, r3
 8008af4:	d9ac      	bls.n	8008a50 <HAL_RCC_OscConfig+0x3a0>
 8008af6:	e647      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8008af8:	f000 faa8 	bl	800904c <HAL_GetTick>
 8008afc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b00:	ebc9 0000 	rsb	r0, r9, r0
 8008b04:	4298      	cmp	r0, r3
 8008b06:	d9ca      	bls.n	8008a9e <HAL_RCC_OscConfig+0x3ee>
 8008b08:	e63e      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
      tickstart = HAL_GetTick();
 8008b0a:	f000 fa9f 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b0e:	2602      	movs	r6, #2
 8008b10:	4681      	mov	r9, r0
 8008b12:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b14:	2701      	movs	r7, #1
 8008b16:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b1a:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b1e:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b22:	fab3 f383 	clz	r3, r3
 8008b26:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008b2a:	f043 0302 	orr.w	r3, r3, #2
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	bf0c      	ite	eq
 8008b32:	6a2a      	ldreq	r2, [r5, #32]
 8008b34:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b36:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b3a:	fab3 f383 	clz	r3, r3
 8008b3e:	f003 031f 	and.w	r3, r3, #31
 8008b42:	fa07 f303 	lsl.w	r3, r7, r3
 8008b46:	4213      	tst	r3, r2
 8008b48:	d0c3      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x422>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8008b4a:	f000 fa7f 	bl	800904c <HAL_GetTick>
 8008b4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b52:	ebc9 0000 	rsb	r0, r9, r0
 8008b56:	4298      	cmp	r0, r3
 8008b58:	d9dd      	bls.n	8008b16 <HAL_RCC_OscConfig+0x466>
 8008b5a:	e615      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b5c:	4d48      	ldr	r5, [pc, #288]	; (8008c80 <HAL_RCC_OscConfig+0x5d0>)
 8008b5e:	686b      	ldr	r3, [r5, #4]
 8008b60:	f003 030c 	and.w	r3, r3, #12
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	f43f addf 	beq.w	8008728 <HAL_RCC_OscConfig+0x78>
 8008b6a:	4e47      	ldr	r6, [pc, #284]	; (8008c88 <HAL_RCC_OscConfig+0x5d8>)
 8008b6c:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b6e:	2a02      	cmp	r2, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b70:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b72:	d15e      	bne.n	8008c32 <HAL_RCC_OscConfig+0x582>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008b74:	f000 fa6a 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b78:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8008b7c:	4681      	mov	r9, r0
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b7e:	f04f 0801 	mov.w	r8, #1
 8008b82:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b86:	fab3 f383 	clz	r3, r3
 8008b8a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008b8e:	f043 0301 	orr.w	r3, r3, #1
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d134      	bne.n	8008c00 <HAL_RCC_OscConfig+0x550>
 8008b96:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b98:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008b9c:	fab3 f383 	clz	r3, r3
 8008ba0:	f003 031f 	and.w	r3, r3, #31
 8008ba4:	fa08 f303 	lsl.w	r3, r8, r3
 8008ba8:	4213      	tst	r3, r2
 8008baa:	f04f 0a01 	mov.w	sl, #1
 8008bae:	d12d      	bne.n	8008c0c <HAL_RCC_OscConfig+0x55c>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008bb2:	6a22      	ldr	r2, [r4, #32]
 8008bb4:	686b      	ldr	r3, [r5, #4]
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	606b      	str	r3, [r5, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bc0:	f8c6 a000 	str.w	sl, [r6]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008bc4:	f000 fa42 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bc8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8008bcc:	4607      	mov	r7, r0
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bce:	4654      	mov	r4, sl
 8008bd0:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008bd4:	fab3 f383 	clz	r3, r3
 8008bd8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008bdc:	f043 0301 	orr.w	r3, r3, #1
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d11a      	bne.n	8008c1a <HAL_RCC_OscConfig+0x56a>
 8008be4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008be6:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008bea:	fab3 f383 	clz	r3, r3
 8008bee:	f003 031f 	and.w	r3, r3, #31
 8008bf2:	fa04 f303 	lsl.w	r3, r4, r3
 8008bf6:	4213      	tst	r3, r2
 8008bf8:	d015      	beq.n	8008c26 <HAL_RCC_OscConfig+0x576>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c00:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c04:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c08:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008c0a:	e7c5      	b.n	8008b98 <HAL_RCC_OscConfig+0x4e8>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8008c0c:	f000 fa1e 	bl	800904c <HAL_GetTick>
 8008c10:	ebc9 0000 	rsb	r0, r9, r0
 8008c14:	2864      	cmp	r0, #100	; 0x64
 8008c16:	d9b4      	bls.n	8008b82 <HAL_RCC_OscConfig+0x4d2>
 8008c18:	e5b6      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c1a:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c1e:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c22:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008c24:	e7df      	b.n	8008be6 <HAL_RCC_OscConfig+0x536>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8008c26:	f000 fa11 	bl	800904c <HAL_GetTick>
 8008c2a:	1bc0      	subs	r0, r0, r7
 8008c2c:	2864      	cmp	r0, #100	; 0x64
 8008c2e:	d9cf      	bls.n	8008bd0 <HAL_RCC_OscConfig+0x520>
 8008c30:	e5aa      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
        tickstart = HAL_GetTick();
 8008c32:	f000 fa0b 	bl	800904c <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c36:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8008c3a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c3c:	2601      	movs	r6, #1
 8008c3e:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c42:	fab3 f383 	clz	r3, r3
 8008c46:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008c4a:	f043 0301 	orr.w	r3, r3, #1
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <HAL_RCC_OscConfig+0x5a6>
 8008c52:	682a      	ldr	r2, [r5, #0]
 8008c54:	e004      	b.n	8008c60 <HAL_RCC_OscConfig+0x5b0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c56:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c5a:	fab3 f383 	clz	r3, r3
 8008c5e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c60:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008c64:	fab3 f383 	clz	r3, r3
 8008c68:	f003 031f 	and.w	r3, r3, #31
 8008c6c:	fa06 f303 	lsl.w	r3, r6, r3
 8008c70:	4213      	tst	r3, r2
 8008c72:	d0c2      	beq.n	8008bfa <HAL_RCC_OscConfig+0x54a>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8008c74:	f000 f9ea 	bl	800904c <HAL_GetTick>
 8008c78:	1bc0      	subs	r0, r0, r7
 8008c7a:	2864      	cmp	r0, #100	; 0x64
 8008c7c:	d9df      	bls.n	8008c3e <HAL_RCC_OscConfig+0x58e>
 8008c7e:	e583      	b.n	8008788 <HAL_RCC_OscConfig+0xd8>
 8008c80:	40021000 	.word	0x40021000
 8008c84:	40007000 	.word	0x40007000
 8008c88:	42420060 	.word	0x42420060

08008c8c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008c8c:	4aad      	ldr	r2, [pc, #692]	; (8008f44 <HAL_RCC_ClockConfig+0x2b8>)
 8008c8e:	6813      	ldr	r3, [r2, #0]
 8008c90:	f003 0307 	and.w	r3, r3, #7
 8008c94:	428b      	cmp	r3, r1
{
 8008c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008c9e:	f080 80a6 	bcs.w	8008dee <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ca2:	6813      	ldr	r3, [r2, #0]
 8008ca4:	f023 0307 	bic.w	r3, r3, #7
 8008ca8:	430b      	orrs	r3, r1
 8008caa:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008cac:	6813      	ldr	r3, [r2, #0]
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	4299      	cmp	r1, r3
 8008cb4:	d002      	beq.n	8008cbc <HAL_RCC_ClockConfig+0x30>
    {
      return HAL_ERROR;
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cbc:	6801      	ldr	r1, [r0, #0]
 8008cbe:	078f      	lsls	r7, r1, #30
 8008cc0:	d506      	bpl.n	8008cd0 <HAL_RCC_ClockConfig+0x44>
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cc2:	48a1      	ldr	r0, [pc, #644]	; (8008f48 <HAL_RCC_ClockConfig+0x2bc>)
 8008cc4:	6843      	ldr	r3, [r0, #4]
 8008cc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cca:	68a3      	ldr	r3, [r4, #8]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	6043      	str	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cd0:	07ce      	lsls	r6, r1, #31
 8008cd2:	d40b      	bmi.n	8008cec <HAL_RCC_ClockConfig+0x60>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cd4:	6821      	ldr	r1, [r4, #0]
 8008cd6:	074d      	lsls	r5, r1, #29
 8008cd8:	f140 8123 	bpl.w	8008f22 <HAL_RCC_ClockConfig+0x296>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cdc:	489a      	ldr	r0, [pc, #616]	; (8008f48 <HAL_RCC_ClockConfig+0x2bc>)
 8008cde:	6843      	ldr	r3, [r0, #4]
 8008ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ce4:	68e3      	ldr	r3, [r4, #12]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	6043      	str	r3, [r0, #4]
 8008cea:	e11a      	b.n	8008f22 <HAL_RCC_ClockConfig+0x296>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cec:	6862      	ldr	r2, [r4, #4]
 8008cee:	4d96      	ldr	r5, [pc, #600]	; (8008f48 <HAL_RCC_ClockConfig+0x2bc>)
 8008cf0:	2a01      	cmp	r2, #1
 8008cf2:	d115      	bne.n	8008d20 <HAL_RCC_ClockConfig+0x94>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cf4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8008cf8:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008cfc:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d00:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008d04:	f043 0301 	orr.w	r3, r3, #1
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d101      	bne.n	8008d10 <HAL_RCC_ClockConfig+0x84>
 8008d0c:	6828      	ldr	r0, [r5, #0]
 8008d0e:	e004      	b.n	8008d1a <HAL_RCC_ClockConfig+0x8e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d10:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d14:	fab1 f181 	clz	r1, r1
 8008d18:	6a68      	ldr	r0, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d1e:	e02a      	b.n	8008d76 <HAL_RCC_ClockConfig+0xea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d20:	2a02      	cmp	r2, #2
 8008d22:	d115      	bne.n	8008d50 <HAL_RCC_ClockConfig+0xc4>
 8008d24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008d28:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d2c:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d30:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008d34:	f043 0301 	orr.w	r3, r3, #1
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d101      	bne.n	8008d40 <HAL_RCC_ClockConfig+0xb4>
 8008d3c:	6828      	ldr	r0, [r5, #0]
 8008d3e:	e004      	b.n	8008d4a <HAL_RCC_ClockConfig+0xbe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d40:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d44:	fab1 f181 	clz	r1, r1
 8008d48:	6a68      	ldr	r0, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d4e:	e012      	b.n	8008d76 <HAL_RCC_ClockConfig+0xea>
 8008d50:	2102      	movs	r1, #2
 8008d52:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d56:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d5a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d101      	bne.n	8008d6a <HAL_RCC_ClockConfig+0xde>
 8008d66:	6828      	ldr	r0, [r5, #0]
 8008d68:	e004      	b.n	8008d74 <HAL_RCC_ClockConfig+0xe8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d6a:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d6e:	fab1 f181 	clz	r1, r1
 8008d72:	6a68      	ldr	r0, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d74:	2302      	movs	r3, #2
 8008d76:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008d7a:	fab3 f383 	clz	r3, r3
 8008d7e:	2101      	movs	r1, #1
 8008d80:	f003 031f 	and.w	r3, r3, #31
 8008d84:	fa01 f303 	lsl.w	r3, r1, r3
 8008d88:	4203      	tst	r3, r0
 8008d8a:	d094      	beq.n	8008cb6 <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d8c:	686b      	ldr	r3, [r5, #4]
 8008d8e:	f023 0303 	bic.w	r3, r3, #3
 8008d92:	431a      	orrs	r2, r3
 8008d94:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 8008d96:	f000 f959 	bl	800904c <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d9a:	6863      	ldr	r3, [r4, #4]
 8008d9c:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 8008d9e:	4606      	mov	r6, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008da0:	f241 3788 	movw	r7, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008da4:	d10c      	bne.n	8008dc0 <HAL_RCC_ClockConfig+0x134>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008da6:	686b      	ldr	r3, [r5, #4]
 8008da8:	f003 030c 	and.w	r3, r3, #12
 8008dac:	2b04      	cmp	r3, #4
 8008dae:	d091      	beq.n	8008cd4 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008db0:	f000 f94c 	bl	800904c <HAL_GetTick>
 8008db4:	1b80      	subs	r0, r0, r6
 8008db6:	42b8      	cmp	r0, r7
 8008db8:	d9f5      	bls.n	8008da6 <HAL_RCC_ClockConfig+0x11a>
            return HAL_TIMEOUT;
 8008dba:	2003      	movs	r0, #3
 8008dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d10f      	bne.n	8008de4 <HAL_RCC_ClockConfig+0x158>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008dc4:	686b      	ldr	r3, [r5, #4]
 8008dc6:	f003 030c 	and.w	r3, r3, #12
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d082      	beq.n	8008cd4 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dce:	f000 f93d 	bl	800904c <HAL_GetTick>
 8008dd2:	1b80      	subs	r0, r0, r6
 8008dd4:	42b8      	cmp	r0, r7
 8008dd6:	d9f5      	bls.n	8008dc4 <HAL_RCC_ClockConfig+0x138>
 8008dd8:	e7ef      	b.n	8008dba <HAL_RCC_ClockConfig+0x12e>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dda:	f000 f937 	bl	800904c <HAL_GetTick>
 8008dde:	1b80      	subs	r0, r0, r6
 8008de0:	42b8      	cmp	r0, r7
 8008de2:	d8ea      	bhi.n	8008dba <HAL_RCC_ClockConfig+0x12e>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008de4:	686b      	ldr	r3, [r5, #4]
 8008de6:	f013 0f0c 	tst.w	r3, #12
 8008dea:	d1f6      	bne.n	8008dda <HAL_RCC_ClockConfig+0x14e>
 8008dec:	e772      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x48>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dee:	6801      	ldr	r1, [r0, #0]
 8008df0:	0788      	lsls	r0, r1, #30
 8008df2:	d506      	bpl.n	8008e02 <HAL_RCC_ClockConfig+0x176>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008df4:	4854      	ldr	r0, [pc, #336]	; (8008f48 <HAL_RCC_ClockConfig+0x2bc>)
 8008df6:	6843      	ldr	r3, [r0, #4]
 8008df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008dfc:	68a3      	ldr	r3, [r4, #8]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	6043      	str	r3, [r0, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e02:	07ca      	lsls	r2, r1, #31
 8008e04:	d40c      	bmi.n	8008e20 <HAL_RCC_ClockConfig+0x194>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e06:	4a4f      	ldr	r2, [pc, #316]	; (8008f44 <HAL_RCC_ClockConfig+0x2b8>)
 8008e08:	6813      	ldr	r3, [r2, #0]
 8008e0a:	f023 0307 	bic.w	r3, r3, #7
 8008e0e:	4333      	orrs	r3, r6
 8008e10:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008e12:	6813      	ldr	r3, [r2, #0]
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	429e      	cmp	r6, r3
 8008e1a:	f47f af4c 	bne.w	8008cb6 <HAL_RCC_ClockConfig+0x2a>
 8008e1e:	e759      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x48>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e20:	6862      	ldr	r2, [r4, #4]
 8008e22:	4d49      	ldr	r5, [pc, #292]	; (8008f48 <HAL_RCC_ClockConfig+0x2bc>)
 8008e24:	2a01      	cmp	r2, #1
 8008e26:	d115      	bne.n	8008e54 <HAL_RCC_ClockConfig+0x1c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e28:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8008e2c:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e30:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e34:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008e38:	f043 0301 	orr.w	r3, r3, #1
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d101      	bne.n	8008e44 <HAL_RCC_ClockConfig+0x1b8>
 8008e40:	6828      	ldr	r0, [r5, #0]
 8008e42:	e004      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1c2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e44:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e48:	fab1 f181 	clz	r1, r1
 8008e4c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e52:	e02a      	b.n	8008eaa <HAL_RCC_ClockConfig+0x21e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e54:	2a02      	cmp	r2, #2
 8008e56:	d115      	bne.n	8008e84 <HAL_RCC_ClockConfig+0x1f8>
 8008e58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008e5c:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e60:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e64:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008e68:	f043 0301 	orr.w	r3, r3, #1
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d101      	bne.n	8008e74 <HAL_RCC_ClockConfig+0x1e8>
 8008e70:	6828      	ldr	r0, [r5, #0]
 8008e72:	e004      	b.n	8008e7e <HAL_RCC_ClockConfig+0x1f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e74:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e78:	fab1 f181 	clz	r1, r1
 8008e7c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e82:	e012      	b.n	8008eaa <HAL_RCC_ClockConfig+0x21e>
 8008e84:	2102      	movs	r1, #2
 8008e86:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e8a:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e8e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008e92:	f043 0301 	orr.w	r3, r3, #1
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d101      	bne.n	8008e9e <HAL_RCC_ClockConfig+0x212>
 8008e9a:	6828      	ldr	r0, [r5, #0]
 8008e9c:	e004      	b.n	8008ea8 <HAL_RCC_ClockConfig+0x21c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e9e:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ea2:	fab1 f181 	clz	r1, r1
 8008ea6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008eae:	fab3 f383 	clz	r3, r3
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	f003 031f 	and.w	r3, r3, #31
 8008eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ebc:	4203      	tst	r3, r0
 8008ebe:	f43f aefa 	beq.w	8008cb6 <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ec2:	686b      	ldr	r3, [r5, #4]
 8008ec4:	f023 0303 	bic.w	r3, r3, #3
 8008ec8:	431a      	orrs	r2, r3
 8008eca:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 8008ecc:	f000 f8be 	bl	800904c <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ed0:	6863      	ldr	r3, [r4, #4]
 8008ed2:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 8008ed4:	4607      	mov	r7, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ed6:	f241 3888 	movw	r8, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008eda:	d10a      	bne.n	8008ef2 <HAL_RCC_ClockConfig+0x266>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008edc:	686b      	ldr	r3, [r5, #4]
 8008ede:	f003 030c 	and.w	r3, r3, #12
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d08f      	beq.n	8008e06 <HAL_RCC_ClockConfig+0x17a>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ee6:	f000 f8b1 	bl	800904c <HAL_GetTick>
 8008eea:	1bc0      	subs	r0, r0, r7
 8008eec:	4540      	cmp	r0, r8
 8008eee:	d9f5      	bls.n	8008edc <HAL_RCC_ClockConfig+0x250>
 8008ef0:	e763      	b.n	8008dba <HAL_RCC_ClockConfig+0x12e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d110      	bne.n	8008f18 <HAL_RCC_ClockConfig+0x28c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ef6:	686b      	ldr	r3, [r5, #4]
 8008ef8:	f003 030c 	and.w	r3, r3, #12
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d082      	beq.n	8008e06 <HAL_RCC_ClockConfig+0x17a>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f00:	f000 f8a4 	bl	800904c <HAL_GetTick>
 8008f04:	1bc0      	subs	r0, r0, r7
 8008f06:	4540      	cmp	r0, r8
 8008f08:	d9f5      	bls.n	8008ef6 <HAL_RCC_ClockConfig+0x26a>
 8008f0a:	e756      	b.n	8008dba <HAL_RCC_ClockConfig+0x12e>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f0c:	f000 f89e 	bl	800904c <HAL_GetTick>
 8008f10:	1bc0      	subs	r0, r0, r7
 8008f12:	4540      	cmp	r0, r8
 8008f14:	f63f af51 	bhi.w	8008dba <HAL_RCC_ClockConfig+0x12e>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008f18:	686b      	ldr	r3, [r5, #4]
 8008f1a:	f013 0f0c 	tst.w	r3, #12
 8008f1e:	d1f5      	bne.n	8008f0c <HAL_RCC_ClockConfig+0x280>
 8008f20:	e771      	b.n	8008e06 <HAL_RCC_ClockConfig+0x17a>
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f22:	070b      	lsls	r3, r1, #28
 8008f24:	d507      	bpl.n	8008f36 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008f26:	4a08      	ldr	r2, [pc, #32]	; (8008f48 <HAL_RCC_ClockConfig+0x2bc>)
 8008f28:	6921      	ldr	r1, [r4, #16]
 8008f2a:	6853      	ldr	r3, [r2, #4]
 8008f2c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008f30:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008f34:	6053      	str	r3, [r2, #4]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008f36:	200f      	movs	r0, #15
 8008f38:	f000 f85b 	bl	8008ff2 <HAL_InitTick>

  return HAL_OK;
 8008f3c:	2000      	movs	r0, #0
}
 8008f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f42:	bf00      	nop
 8008f44:	40022000 	.word	0x40022000
 8008f48:	40021000 	.word	0x40021000

08008f4c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8008f4c:	4915      	ldr	r1, [pc, #84]	; (8008fa4 <HAL_RCC_GetSysClockFreq+0x58>)
{
 8008f4e:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8008f50:	684c      	ldr	r4, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008f52:	f004 030c 	and.w	r3, r4, #12
 8008f56:	2b08      	cmp	r3, #8
 8008f58:	d121      	bne.n	8008f9e <HAL_RCC_GetSysClockFreq+0x52>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f5a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8008f5e:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f62:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008f66:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f70:	4a0d      	ldr	r2, [pc, #52]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x5c>)
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008f72:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008f74:	5cd2      	ldrb	r2, [r2, r3]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f76:	230f      	movs	r3, #15
 8008f78:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f7c:	fab3 f383 	clz	r3, r3
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008f80:	f001 010f 	and.w	r1, r1, #15
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	fa21 f303 	lsr.w	r3, r1, r3
 8008f8a:	4908      	ldr	r1, [pc, #32]	; (8008fac <HAL_RCC_GetSysClockFreq+0x60>)
 8008f8c:	5cc8      	ldrb	r0, [r1, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008f8e:	03e3      	lsls	r3, r4, #15
      pllclk = (HSE_VALUE/prediv) * pllmul;
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8008f90:	bf52      	itee	pl
 8008f92:	4807      	ldrpl	r0, [pc, #28]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x64>)
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8008f94:	4b07      	ldrmi	r3, [pc, #28]	; (8008fb4 <HAL_RCC_GetSysClockFreq+0x68>)
 8008f96:	fbb3 f0f0 	udivmi	r0, r3, r0
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8008f9a:	4350      	muls	r0, r2
 8008f9c:	bd10      	pop	{r4, pc}
    sysclockfreq = HSE_VALUE;
 8008f9e:	4805      	ldr	r0, [pc, #20]	; (8008fb4 <HAL_RCC_GetSysClockFreq+0x68>)
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8008fa0:	bd10      	pop	{r4, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40021000 	.word	0x40021000
 8008fa8:	0801ba54 	.word	0x0801ba54
 8008fac:	0801ba44 	.word	0x0801ba44
 8008fb0:	003d0900 	.word	0x003d0900
 8008fb4:	007a1200 	.word	0x007a1200

08008fb8 <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fb8:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8008fba:	f7ff ffc7 	bl	8008f4c <HAL_RCC_GetSysClockFreq>
 8008fbe:	4b09      	ldr	r3, [pc, #36]	; (8008fe4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008fc0:	685a      	ldr	r2, [r3, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fc2:	23f0      	movs	r3, #240	; 0xf0
 8008fc4:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008fc8:	fab3 f383 	clz	r3, r3
 8008fcc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd6:	4a04      	ldr	r2, [pc, #16]	; (8008fe8 <HAL_RCC_GetHCLKFreq+0x30>)
 8008fd8:	5cd3      	ldrb	r3, [r2, r3]
 8008fda:	40d8      	lsrs	r0, r3
 8008fdc:	4b03      	ldr	r3, [pc, #12]	; (8008fec <HAL_RCC_GetHCLKFreq+0x34>)
 8008fde:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8008fe0:	bd08      	pop	{r3, pc}
 8008fe2:	bf00      	nop
 8008fe4:	40021000 	.word	0x40021000
 8008fe8:	0801ba34 	.word	0x0801ba34
 8008fec:	200008d8 	.word	0x200008d8

08008ff0 <HAL_MspInit>:
 8008ff0:	4770      	bx	lr

08008ff2 <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 8008ff2:	b510      	push	{r4, lr}
 8008ff4:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008ff6:	f7ff ffdf 	bl	8008fb8 <HAL_RCC_GetHCLKFreq>
 8008ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ffe:	fbb0 f0f3 	udiv	r0, r0, r3
 8009002:	f000 f889 	bl	8009118 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8009006:	2200      	movs	r2, #0
 8009008:	4621      	mov	r1, r4
 800900a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800900e:	f000 f843 	bl	8009098 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8009012:	2000      	movs	r0, #0
 8009014:	bd10      	pop	{r4, pc}
	...

08009018 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009018:	4a07      	ldr	r2, [pc, #28]	; (8009038 <HAL_Init+0x20>)
{
 800901a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800901c:	6813      	ldr	r3, [r2, #0]
 800901e:	f043 0310 	orr.w	r3, r3, #16
 8009022:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009024:	2003      	movs	r0, #3
 8009026:	f000 f825 	bl	8009074 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800902a:	200f      	movs	r0, #15
 800902c:	f7ff ffe1 	bl	8008ff2 <HAL_InitTick>
  HAL_MspInit();
 8009030:	f7ff ffde 	bl	8008ff0 <HAL_MspInit>
}
 8009034:	2000      	movs	r0, #0
 8009036:	bd08      	pop	{r3, pc}
 8009038:	40022000 	.word	0x40022000

0800903c <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800903c:	4a02      	ldr	r2, [pc, #8]	; (8009048 <HAL_IncTick+0xc>)
 800903e:	6813      	ldr	r3, [r2, #0]
 8009040:	3301      	adds	r3, #1
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	20000c58 	.word	0x20000c58

0800904c <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800904c:	4b01      	ldr	r3, [pc, #4]	; (8009054 <HAL_GetTick+0x8>)
 800904e:	6818      	ldr	r0, [r3, #0]
}
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	20000c58 	.word	0x20000c58

08009058 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8009058:	b513      	push	{r0, r1, r4, lr}
 800905a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800905c:	f7ff fff6 	bl	800904c <HAL_GetTick>
 8009060:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8009062:	f7ff fff3 	bl	800904c <HAL_GetTick>
 8009066:	9b01      	ldr	r3, [sp, #4]
 8009068:	1b00      	subs	r0, r0, r4
 800906a:	4298      	cmp	r0, r3
 800906c:	d3f9      	bcc.n	8009062 <HAL_Delay+0xa>
  {
  }
}
 800906e:	b002      	add	sp, #8
 8009070:	bd10      	pop	{r4, pc}
	...

08009074 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009074:	4a07      	ldr	r2, [pc, #28]	; (8009094 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8009076:	68d3      	ldr	r3, [r2, #12]
 8009078:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800907c:	041b      	lsls	r3, r3, #16
 800907e:	0c1b      	lsrs	r3, r3, #16
 8009080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8009084:	0200      	lsls	r0, r0, #8
 8009086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800908a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800908e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8009090:	60d3      	str	r3, [r2, #12]
 8009092:	4770      	bx	lr
 8009094:	e000ed00 	.word	0xe000ed00

08009098 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8009098:	4b17      	ldr	r3, [pc, #92]	; (80090f8 <HAL_NVIC_SetPriority+0x60>)
 800909a:	68db      	ldr	r3, [r3, #12]
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 800909c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090a0:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80090a2:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80090a6:	1d1d      	adds	r5, r3, #4
  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80090a8:	2c04      	cmp	r4, #4
 80090aa:	bf28      	it	cs
 80090ac:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80090ae:	2d06      	cmp	r5, #6

  return (
 80090b0:	f04f 0501 	mov.w	r5, #1
 80090b4:	fa05 f404 	lsl.w	r4, r5, r4
 80090b8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80090bc:	bf8c      	ite	hi
 80090be:	3b03      	subhi	r3, #3
 80090c0:	2300      	movls	r3, #0
  return (
 80090c2:	400c      	ands	r4, r1
 80090c4:	409c      	lsls	r4, r3
 80090c6:	fa05 f303 	lsl.w	r3, r5, r3
 80090ca:	3b01      	subs	r3, #1
 80090cc:	401a      	ands	r2, r3
  if(IRQn < 0) {
 80090ce:	2800      	cmp	r0, #0
  return (
 80090d0:	ea42 0204 	orr.w	r2, r2, r4
 80090d4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80090d8:	bfaf      	iteee	ge
 80090da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80090de:	f000 000f 	andlt.w	r0, r0, #15
 80090e2:	4b06      	ldrlt	r3, [pc, #24]	; (80090fc <HAL_NVIC_SetPriority+0x64>)
 80090e4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80090e6:	bfa5      	ittet	ge
 80090e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80090ec:	b2d2      	uxtbge	r2, r2
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80090ee:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80090f0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80090f4:	bd30      	pop	{r4, r5, pc}
 80090f6:	bf00      	nop
 80090f8:	e000ed00 	.word	0xe000ed00
 80090fc:	e000ed14 	.word	0xe000ed14

08009100 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8009100:	0942      	lsrs	r2, r0, #5
 8009102:	2301      	movs	r3, #1
 8009104:	f000 001f 	and.w	r0, r0, #31
 8009108:	fa03 f000 	lsl.w	r0, r3, r0
 800910c:	4b01      	ldr	r3, [pc, #4]	; (8009114 <HAL_NVIC_EnableIRQ+0x14>)
 800910e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009112:	4770      	bx	lr
 8009114:	e000e100 	.word	0xe000e100

08009118 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8009118:	3801      	subs	r0, #1
 800911a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800911e:	d20a      	bcs.n	8009136 <HAL_SYSTICK_Config+0x1e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8009122:	4a07      	ldr	r2, [pc, #28]	; (8009140 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8009124:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8009126:	21f0      	movs	r1, #240	; 0xf0
 8009128:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800912c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800912e:	2207      	movs	r2, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8009130:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	4770      	bx	lr
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8009136:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	e000e010 	.word	0xe000e010
 8009140:	e000ed00 	.word	0xe000ed00

08009144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8009144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009148:	f8df c17c 	ldr.w	ip, [pc, #380]	; 80092c8 <HAL_GPIO_Init+0x184>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800914c:	680b      	ldr	r3, [r1, #0]
        __SYSCFG_CLK_ENABLE();
 800914e:	f8df e17c 	ldr.w	lr, [pc, #380]	; 80092cc <HAL_GPIO_Init+0x188>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009152:	9301      	str	r3, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8009154:	f04f 0801 	mov.w	r8, #1
  for (position = 0; position < GPIO_NUMBER; position++)
 8009158:	2300      	movs	r3, #0
 800915a:	4664      	mov	r4, ip
    if (iocurrent == ioposition)
 800915c:	9a01      	ldr	r2, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 800915e:	fa08 f503 	lsl.w	r5, r8, r3
    if (iocurrent == ioposition)
 8009162:	ea35 0202 	bics.w	r2, r5, r2
 8009166:	f040 80a6 	bne.w	80092b6 <HAL_GPIO_Init+0x172>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800916a:	684a      	ldr	r2, [r1, #4]
 800916c:	f022 0910 	bic.w	r9, r2, #16
 8009170:	f1b9 0f02 	cmp.w	r9, #2
 8009174:	d114      	bne.n	80091a0 <HAL_GPIO_Init+0x5c>
 8009176:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800917a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800917e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8009182:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009186:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800918a:	260f      	movs	r6, #15
 800918c:	fa06 f60b 	lsl.w	r6, r6, fp
 8009190:	ea27 0606 	bic.w	r6, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009194:	690f      	ldr	r7, [r1, #16]
 8009196:	fa07 f70b 	lsl.w	r7, r7, fp
 800919a:	4337      	orrs	r7, r6
        GPIOx->AFR[position >> 3] = temp;
 800919c:	f8ca 7020 	str.w	r7, [sl, #32]
 80091a0:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80091a4:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 80091a6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80091a8:	fa06 f60a 	lsl.w	r6, r6, sl
 80091ac:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80091ae:	f002 0b03 	and.w	fp, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80091b2:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80091b4:	fa0b fb0a 	lsl.w	fp, fp, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80091b8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80091bc:	ea4b 0707 	orr.w	r7, fp, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80091c0:	f1b9 0f01 	cmp.w	r9, #1
      GPIOx->MODER = temp;
 80091c4:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80091c6:	d812      	bhi.n	80091ee <HAL_GPIO_Init+0xaa>
        temp = GPIOx->OSPEEDR; 
 80091c8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80091ca:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80091ce:	68cf      	ldr	r7, [r1, #12]
 80091d0:	fa07 f90a 	lsl.w	r9, r7, sl
 80091d4:	ea49 070b 	orr.w	r7, r9, fp
        GPIOx->OSPEEDR = temp;
 80091d8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80091da:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80091dc:	f3c2 1900 	ubfx	r9, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80091e0:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80091e4:	fa09 f903 	lsl.w	r9, r9, r3
 80091e8:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 80091ec:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80091ee:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80091f0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80091f2:	688f      	ldr	r7, [r1, #8]
 80091f4:	fa07 f70a 	lsl.w	r7, r7, sl
 80091f8:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80091fa:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80091fc:	00d6      	lsls	r6, r2, #3
 80091fe:	d55a      	bpl.n	80092b6 <HAL_GPIO_Init+0x172>
        __SYSCFG_CLK_ENABLE();
 8009200:	f8de 6018 	ldr.w	r6, [lr, #24]
 8009204:	f023 0903 	bic.w	r9, r3, #3
 8009208:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 800920c:	f046 0601 	orr.w	r6, r6, #1
 8009210:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8009214:	f8ce 6018 	str.w	r6, [lr, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009218:	f003 0a03 	and.w	sl, r3, #3
        temp = SYSCFG->EXTICR[position >> 2];
 800921c:	f8d9 7008 	ldr.w	r7, [r9, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009220:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8009224:	260f      	movs	r6, #15
 8009226:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 800922a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800922e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8009232:	d015      	beq.n	8009260 <HAL_GPIO_Init+0x11c>
 8009234:	4e23      	ldr	r6, [pc, #140]	; (80092c4 <HAL_GPIO_Init+0x180>)
 8009236:	42b0      	cmp	r0, r6
 8009238:	d014      	beq.n	8009264 <HAL_GPIO_Init+0x120>
 800923a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800923e:	42b0      	cmp	r0, r6
 8009240:	d012      	beq.n	8009268 <HAL_GPIO_Init+0x124>
 8009242:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009246:	42b0      	cmp	r0, r6
 8009248:	d010      	beq.n	800926c <HAL_GPIO_Init+0x128>
 800924a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800924e:	42b0      	cmp	r0, r6
 8009250:	d00e      	beq.n	8009270 <HAL_GPIO_Init+0x12c>
 8009252:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009256:	42b0      	cmp	r0, r6
 8009258:	bf14      	ite	ne
 800925a:	2606      	movne	r6, #6
 800925c:	2605      	moveq	r6, #5
 800925e:	e008      	b.n	8009272 <HAL_GPIO_Init+0x12e>
 8009260:	2600      	movs	r6, #0
 8009262:	e006      	b.n	8009272 <HAL_GPIO_Init+0x12e>
 8009264:	2601      	movs	r6, #1
 8009266:	e004      	b.n	8009272 <HAL_GPIO_Init+0x12e>
 8009268:	2602      	movs	r6, #2
 800926a:	e002      	b.n	8009272 <HAL_GPIO_Init+0x12e>
 800926c:	2603      	movs	r6, #3
 800926e:	e000      	b.n	8009272 <HAL_GPIO_Init+0x12e>
 8009270:	2604      	movs	r6, #4
 8009272:	fa06 f60a 	lsl.w	r6, r6, sl
 8009276:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8009278:	f8c9 6008 	str.w	r6, [r9, #8]
        temp = EXTI->IMR;
 800927c:	f8dc 6000 	ldr.w	r6, [ip]
        temp &= ~((uint32_t)iocurrent);
 8009280:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009282:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8009286:	bf0c      	ite	eq
 8009288:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800928a:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800928c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800928e:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009290:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8009294:	bf0c      	ite	eq
 8009296:	403e      	andeq	r6, r7
        { 
          temp |= iocurrent;
 8009298:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800929a:	6066      	str	r6, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800929c:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800929e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80092a2:	bf0c      	ite	eq
 80092a4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80092a6:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80092a8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80092aa:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80092ac:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 80092ae:	bf54      	ite	pl
 80092b0:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80092b2:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80092b4:	60e6      	str	r6, [r4, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 80092b6:	3301      	adds	r3, #1
 80092b8:	2b10      	cmp	r3, #16
 80092ba:	f47f af4f 	bne.w	800915c <HAL_GPIO_Init+0x18>
      }
    }
  } 
}
 80092be:	b003      	add	sp, #12
 80092c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c4:	48000400 	.word	0x48000400
 80092c8:	40010400 	.word	0x40010400
 80092cc:	40021000 	.word	0x40021000

080092d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80092d0:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80092d2:	4219      	tst	r1, r3
  }
 80092d4:	bf14      	ite	ne
 80092d6:	2001      	movne	r0, #1
 80092d8:	2000      	moveq	r0, #0
 80092da:	4770      	bx	lr

080092dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092dc:	b10a      	cbz	r2, 80092e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80092de:	8301      	strh	r1, [r0, #24]
 80092e0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80092e2:	8341      	strh	r1, [r0, #26]
 80092e4:	4770      	bx	lr

080092e6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80092e6:	6943      	ldr	r3, [r0, #20]
 80092e8:	4059      	eors	r1, r3
 80092ea:	6141      	str	r1, [r0, #20]
 80092ec:	4770      	bx	lr

080092ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80092ee:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80092f0:	4604      	mov	r4, r0
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d047      	beq.n	8009386 <HAL_PCD_Init+0x98>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 80092f6:	2302      	movs	r3, #2
 80092f8:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 80092fc:	f002 f872 	bl	800b3e4 <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009300:	2200      	movs	r2, #0
 8009302:	6865      	ldr	r5, [r4, #4]
 8009304:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8009308:	4611      	mov	r1, r2
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 800930a:	2001      	movs	r0, #1
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800930c:	42aa      	cmp	r2, r5
 800930e:	f103 031c 	add.w	r3, r3, #28
 8009312:	d00d      	beq.n	8009330 <HAL_PCD_Init+0x42>
   hpcd->IN_ep[i].num = i;
 8009314:	f803 2c1d 	strb.w	r2, [r3, #-29]
   hpcd->IN_ep[i].is_in = 1;
 8009318:	f803 0c1c 	strb.w	r0, [r3, #-28]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 800931c:	f803 1c1a 	strb.w	r1, [r3, #-26]
   hpcd->IN_ep[i].maxpacket =  0;
 8009320:	f843 1c11 	str.w	r1, [r3, #-17]
   hpcd->IN_ep[i].xfer_buff = 0;
 8009324:	f843 1c0d 	str.w	r1, [r3, #-13]
   hpcd->IN_ep[i].xfer_len = 0;
 8009328:	f843 1c09 	str.w	r1, [r3, #-9]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800932c:	3201      	adds	r2, #1
 800932e:	e7ed      	b.n	800930c <HAL_PCD_Init+0x1e>
 8009330:	2200      	movs	r2, #0
 8009332:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8009336:	4611      	mov	r1, r2
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009338:	42aa      	cmp	r2, r5
 800933a:	f103 031c 	add.w	r3, r3, #28
 800933e:	f04f 0000 	mov.w	r0, #0
 8009342:	d00d      	beq.n	8009360 <HAL_PCD_Init+0x72>
 {
   hpcd->OUT_ep[i].is_in = 0;
   hpcd->OUT_ep[i].num = i;
 8009344:	f803 2c1d 	strb.w	r2, [r3, #-29]
   hpcd->OUT_ep[i].is_in = 0;
 8009348:	f803 1c1c 	strb.w	r1, [r3, #-28]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 800934c:	f803 1c1a 	strb.w	r1, [r3, #-26]
   hpcd->OUT_ep[i].maxpacket = 0;
 8009350:	f843 1c11 	str.w	r1, [r3, #-17]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8009354:	f843 1c0d 	str.w	r1, [r3, #-13]
   hpcd->OUT_ep[i].xfer_len = 0;
 8009358:	f843 1c09 	str.w	r1, [r3, #-9]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800935c:	3201      	adds	r2, #1
 800935e:	e7eb      	b.n	8009338 <HAL_PCD_Init+0x4a>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	2201      	movs	r2, #1
 8009364:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8009368:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 hpcd->Instance->CNTR = 0;
 800936c:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 hpcd->Instance->ISTR = 0;
 8009370:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8009374:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8009378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 800937c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 8009380:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141

 return HAL_OK;
 8009384:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009386:	2001      	movs	r0, #1
}
 8009388:	bd38      	pop	{r3, r4, r5, pc}

0800938a <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 800938a:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800938c:	2101      	movs	r1, #1
 800938e:	f000 fefa 	bl	800a186 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8009392:	2000      	movs	r0, #0
 8009394:	bd08      	pop	{r3, pc}

08009396 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8009396:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800939a:	2b01      	cmp	r3, #1
 800939c:	d00f      	beq.n	80093be <HAL_PCD_SetAddress+0x28>
 800939e:	2301      	movs	r3, #1
 80093a0:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 80093a4:	b921      	cbnz	r1, 80093b0 <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 80093a6:	6803      	ldr	r3, [r0, #0]
 80093a8:	2280      	movs	r2, #128	; 0x80
 80093aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80093ae:	e001      	b.n	80093b4 <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 80093b0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 80093b4:	2300      	movs	r3, #0
 80093b6:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 80093ba:	4618      	mov	r0, r3
 80093bc:	4770      	bx	lr
   __HAL_LOCK(hpcd); 
 80093be:	2002      	movs	r0, #2
  return HAL_OK;
}
 80093c0:	4770      	bx	lr

080093c2 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80093c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80093c4:	b24c      	sxtb	r4, r1
 80093c6:	2c00      	cmp	r4, #0
 80093c8:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 80093cc:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80093d0:	bfb5      	itete	lt
 80093d2:	fb05 0106 	mlalt	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80093d6:	fb05 0101 	mlage	r1, r5, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80093da:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80093dc:	31b4      	addge	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80093de:	0fe4      	lsrs	r4, r4, #31
  ep->num   = ep_addr & 0x7F;
 80093e0:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80093e2:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80093e4:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 80093e6:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
  ep->maxpacket = ep_mps;
 80093ea:	60ca      	str	r2, [r1, #12]
  __HAL_LOCK(hpcd); 
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	f000 8181 	beq.w	80096f4 <HAL_PCD_EP_Open+0x332>
 80093f2:	2301      	movs	r3, #1
 80093f4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 80093f8:	78cc      	ldrb	r4, [r1, #3]
 80093fa:	780a      	ldrb	r2, [r1, #0]
 80093fc:	6803      	ldr	r3, [r0, #0]
 80093fe:	2c03      	cmp	r4, #3
 8009400:	d82f      	bhi.n	8009462 <HAL_PCD_EP_Open+0xa0>
 8009402:	e8df f004 	tbb	[pc, r4]
 8009406:	2202      	.short	0x2202
 8009408:	170d      	.short	0x170d
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800940a:	b212      	sxth	r2, r2
 800940c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009410:	b2a4      	uxth	r4, r4
 8009412:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8009416:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800941a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800941e:	e01e      	b.n	800945e <HAL_PCD_EP_Open+0x9c>
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8009420:	b212      	sxth	r2, r2
 8009422:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009426:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 800942a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800942e:	0424      	lsls	r4, r4, #16
 8009430:	0c24      	lsrs	r4, r4, #16
 8009432:	e014      	b.n	800945e <HAL_PCD_EP_Open+0x9c>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8009434:	b212      	sxth	r2, r2
 8009436:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800943a:	b2a4      	uxth	r4, r4
 800943c:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8009440:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8009444:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
 8009448:	e009      	b.n	800945e <HAL_PCD_EP_Open+0x9c>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 800944a:	b212      	sxth	r2, r2
 800944c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009450:	b2a4      	uxth	r4, r4
 8009452:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8009456:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800945a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800945e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8009462:	780a      	ldrb	r2, [r1, #0]
 8009464:	b215      	sxth	r5, r2
 8009466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800946a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800946e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8009472:	0524      	lsls	r4, r4, #20
 8009474:	0d24      	lsrs	r4, r4, #20
 8009476:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800947a:	4322      	orrs	r2, r4
 800947c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8009480:	7a8c      	ldrb	r4, [r1, #10]
 8009482:	780a      	ldrb	r2, [r1, #0]
 8009484:	2c00      	cmp	r4, #0
 8009486:	d175      	bne.n	8009574 <HAL_PCD_EP_Open+0x1b2>
  {
    if (ep->is_in)
 8009488:	784d      	ldrb	r5, [r1, #1]
 800948a:	888c      	ldrh	r4, [r1, #4]
 800948c:	2608      	movs	r6, #8
 800948e:	b33d      	cbz	r5, 80094e0 <HAL_PCD_EP_Open+0x11e>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009490:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8009494:	b2ad      	uxth	r5, r5
 8009496:	fb16 5202 	smlabb	r2, r6, r2, r5
 800949a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800949e:	0864      	lsrs	r4, r4, #1
 80094a0:	0064      	lsls	r4, r4, #1
 80094a2:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80094a6:	780c      	ldrb	r4, [r1, #0]
 80094a8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80094ac:	0652      	lsls	r2, r2, #25
 80094ae:	d50b      	bpl.n	80094c8 <HAL_PCD_EP_Open+0x106>
 80094b0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80094b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80094b8:	0512      	lsls	r2, r2, #20
 80094ba:	0d12      	lsrs	r2, r2, #20
 80094bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094c0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80094c4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 80094c8:	7809      	ldrb	r1, [r1, #0]
 80094ca:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80094ce:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80094d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094d6:	0412      	lsls	r2, r2, #16
 80094d8:	0c12      	lsrs	r2, r2, #16
 80094da:	f082 0220 	eor.w	r2, r2, #32
 80094de:	e0fe      	b.n	80096de <HAL_PCD_EP_Open+0x31c>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80094e0:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 80094e4:	b2bf      	uxth	r7, r7
 80094e6:	fb16 7202 	smlabb	r2, r6, r2, r7
 80094ea:	3204      	adds	r2, #4
 80094ec:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 80094f0:	0864      	lsrs	r4, r4, #1
 80094f2:	0064      	lsls	r4, r4, #1
 80094f4:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 80094f8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80094fc:	780c      	ldrb	r4, [r1, #0]
 80094fe:	b292      	uxth	r2, r2
 8009500:	fb16 2204 	smlabb	r2, r6, r4, r2
 8009504:	68ce      	ldr	r6, [r1, #12]
 8009506:	2e3e      	cmp	r6, #62	; 0x3e
 8009508:	f102 0206 	add.w	r2, r2, #6
 800950c:	d90b      	bls.n	8009526 <HAL_PCD_EP_Open+0x164>
 800950e:	f3c6 144f 	ubfx	r4, r6, #5, #16
 8009512:	06f7      	lsls	r7, r6, #27
 8009514:	bf04      	itt	eq
 8009516:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 800951a:	b2a4      	uxtheq	r4, r4
 800951c:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8009520:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8009524:	e006      	b.n	8009534 <HAL_PCD_EP_Open+0x172>
 8009526:	f3c6 044f 	ubfx	r4, r6, #1, #16
 800952a:	07f6      	lsls	r6, r6, #31
 800952c:	bf44      	itt	mi
 800952e:	3401      	addmi	r4, #1
 8009530:	b2a4      	uxthmi	r4, r4
 8009532:	02a4      	lsls	r4, r4, #10
 8009534:	b2a4      	uxth	r4, r4
 8009536:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800953a:	780c      	ldrb	r4, [r1, #0]
 800953c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009540:	0452      	lsls	r2, r2, #17
 8009542:	d50b      	bpl.n	800955c <HAL_PCD_EP_Open+0x19a>
 8009544:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009548:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800954c:	0512      	lsls	r2, r2, #20
 800954e:	0d12      	lsrs	r2, r2, #20
 8009550:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009554:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009558:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800955c:	7809      	ldrb	r1, [r1, #0]
 800955e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009562:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009566:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800956a:	0412      	lsls	r2, r2, #16
 800956c:	0c12      	lsrs	r2, r2, #16
 800956e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8009572:	e0b4      	b.n	80096de <HAL_PCD_EP_Open+0x31c>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8009574:	b212      	sxth	r2, r2
 8009576:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 800957a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800957e:	f424 74f8 	bic.w	r4, r4, #496	; 0x1f0
 8009582:	0524      	lsls	r4, r4, #20
 8009584:	0d24      	lsrs	r4, r4, #20
 8009586:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800958a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800958e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8009592:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8009596:	780c      	ldrb	r4, [r1, #0]
 8009598:	2208      	movs	r2, #8
 800959a:	b2b6      	uxth	r6, r6
 800959c:	fb12 6604 	smlabb	r6, r2, r4, r6
 80095a0:	88cc      	ldrh	r4, [r1, #6]
 80095a2:	0864      	lsrs	r4, r4, #1
 80095a4:	0064      	lsls	r4, r4, #1
 80095a6:	f845 4016 	str.w	r4, [r5, r6, lsl #1]
 80095aa:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80095ae:	780e      	ldrb	r6, [r1, #0]
 80095b0:	b2a4      	uxth	r4, r4
 80095b2:	fb12 4206 	smlabb	r2, r2, r6, r4
 80095b6:	890c      	ldrh	r4, [r1, #8]
 80095b8:	3204      	adds	r2, #4
 80095ba:	0864      	lsrs	r4, r4, #1
 80095bc:	0064      	lsls	r4, r4, #1
 80095be:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 80095c2:	780c      	ldrb	r4, [r1, #0]
    
    if (ep->is_in==0)
 80095c4:	784a      	ldrb	r2, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80095c6:	b224      	sxth	r4, r4
    if (ep->is_in==0)
 80095c8:	2a00      	cmp	r2, #0
 80095ca:	d146      	bne.n	800965a <HAL_PCD_EP_Open+0x298>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80095cc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80095d0:	0457      	lsls	r7, r2, #17
 80095d2:	d50b      	bpl.n	80095ec <HAL_PCD_EP_Open+0x22a>
 80095d4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80095d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80095dc:	0512      	lsls	r2, r2, #20
 80095de:	0d12      	lsrs	r2, r2, #20
 80095e0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80095e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80095e8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80095ec:	780c      	ldrb	r4, [r1, #0]
 80095ee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80095f2:	0656      	lsls	r6, r2, #25
 80095f4:	d50b      	bpl.n	800960e <HAL_PCD_EP_Open+0x24c>
 80095f6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80095fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80095fe:	0512      	lsls	r2, r2, #20
 8009600:	0d12      	lsrs	r2, r2, #20
 8009602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009606:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800960a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800960e:	780c      	ldrb	r4, [r1, #0]
 8009610:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009614:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009618:	0512      	lsls	r2, r2, #20
 800961a:	0d12      	lsrs	r2, r2, #20
 800961c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009620:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009624:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8009628:	780c      	ldrb	r4, [r1, #0]
 800962a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800962e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009632:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009636:	0412      	lsls	r2, r2, #16
 8009638:	0c12      	lsrs	r2, r2, #16
 800963a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800963e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009642:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009646:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800964a:	7809      	ldrb	r1, [r1, #0]
 800964c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009650:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009654:	0512      	lsls	r2, r2, #20
 8009656:	0d12      	lsrs	r2, r2, #20
 8009658:	e041      	b.n	80096de <HAL_PCD_EP_Open+0x31c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800965a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800965e:	0455      	lsls	r5, r2, #17
 8009660:	d50b      	bpl.n	800967a <HAL_PCD_EP_Open+0x2b8>
 8009662:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009666:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800966a:	0512      	lsls	r2, r2, #20
 800966c:	0d12      	lsrs	r2, r2, #20
 800966e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009672:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009676:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800967a:	780c      	ldrb	r4, [r1, #0]
 800967c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009680:	0652      	lsls	r2, r2, #25
 8009682:	d50b      	bpl.n	800969c <HAL_PCD_EP_Open+0x2da>
 8009684:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009688:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800968c:	0512      	lsls	r2, r2, #20
 800968e:	0d12      	lsrs	r2, r2, #20
 8009690:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009694:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009698:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800969c:	780c      	ldrb	r4, [r1, #0]
 800969e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80096a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80096a6:	0512      	lsls	r2, r2, #20
 80096a8:	0d12      	lsrs	r2, r2, #20
 80096aa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80096ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096b2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80096b6:	780c      	ldrb	r4, [r1, #0]
 80096b8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80096bc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80096c0:	0512      	lsls	r2, r2, #20
 80096c2:	0d12      	lsrs	r2, r2, #20
 80096c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096cc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80096d0:	7809      	ldrb	r1, [r1, #0]
 80096d2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80096d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80096da:	0492      	lsls	r2, r2, #18
 80096dc:	0c92      	lsrs	r2, r2, #18
 80096de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096e6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80096ea:	2300      	movs	r3, #0
 80096ec:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 80096f0:	4618      	mov	r0, r3
 80096f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hpcd); 
 80096f4:	2002      	movs	r0, #2
}
 80096f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096f8 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80096f8:	b24b      	sxtb	r3, r1
 80096fa:	2b00      	cmp	r3, #0
{  
 80096fc:	b530      	push	{r4, r5, lr}
 80096fe:	f04f 021c 	mov.w	r2, #28
 8009702:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009706:	bfb5      	itete	lt
 8009708:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800970c:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009710:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009712:	31b4      	addge	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8009714:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8009716:	700c      	strb	r4, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8009718:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800971a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800971e:	2b01      	cmp	r3, #1
 8009720:	f000 80bf 	beq.w	80098a2 <HAL_PCD_EP_Close+0x1aa>
 8009724:	2301      	movs	r3, #1
 8009726:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 800972a:	780a      	ldrb	r2, [r1, #0]

  if (ep->doublebuffer == 0) 
 800972c:	7a8d      	ldrb	r5, [r1, #10]
 800972e:	784c      	ldrb	r4, [r1, #1]
 8009730:	6803      	ldr	r3, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009732:	b212      	sxth	r2, r2
  if (ep->doublebuffer == 0) 
 8009734:	bb1d      	cbnz	r5, 800977e <HAL_PCD_EP_Close+0x86>
    if (ep->is_in)
 8009736:	b184      	cbz	r4, 800975a <HAL_PCD_EP_Close+0x62>
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009738:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800973c:	0664      	lsls	r4, r4, #25
 800973e:	d55b      	bpl.n	80097f8 <HAL_PCD_EP_Close+0x100>
 8009740:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009744:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8009748:	0524      	lsls	r4, r4, #20
 800974a:	0d24      	lsrs	r4, r4, #20
 800974c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8009750:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8009754:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8009758:	e04e      	b.n	80097f8 <HAL_PCD_EP_Close+0x100>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800975a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800975e:	0465      	lsls	r5, r4, #17
 8009760:	f140 808d 	bpl.w	800987e <HAL_PCD_EP_Close+0x186>
 8009764:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009768:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800976c:	0524      	lsls	r4, r4, #20
 800976e:	0d24      	lsrs	r4, r4, #20
 8009770:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8009774:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8009778:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 800977c:	e07f      	b.n	800987e <HAL_PCD_EP_Close+0x186>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800977e:	2c00      	cmp	r4, #0
 8009780:	d142      	bne.n	8009808 <HAL_PCD_EP_Close+0x110>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009782:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009786:	0464      	lsls	r4, r4, #17
 8009788:	d50b      	bpl.n	80097a2 <HAL_PCD_EP_Close+0xaa>
 800978a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800978e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8009792:	0524      	lsls	r4, r4, #20
 8009794:	0d24      	lsrs	r4, r4, #20
 8009796:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800979a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800979e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80097a2:	780c      	ldrb	r4, [r1, #0]
 80097a4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80097a8:	0655      	lsls	r5, r2, #25
 80097aa:	d50b      	bpl.n	80097c4 <HAL_PCD_EP_Close+0xcc>
 80097ac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80097b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80097b4:	0512      	lsls	r2, r2, #20
 80097b6:	0d12      	lsrs	r2, r2, #20
 80097b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097bc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80097c0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80097c4:	780c      	ldrb	r4, [r1, #0]
 80097c6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80097ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80097ce:	0512      	lsls	r2, r2, #20
 80097d0:	0d12      	lsrs	r2, r2, #20
 80097d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80097da:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80097de:	780c      	ldrb	r4, [r1, #0]
 80097e0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80097e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80097e8:	0492      	lsls	r2, r2, #18
 80097ea:	0c92      	lsrs	r2, r2, #18
 80097ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097f4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80097f8:	7809      	ldrb	r1, [r1, #0]
 80097fa:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80097fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009802:	0512      	lsls	r2, r2, #20
 8009804:	0d12      	lsrs	r2, r2, #20
 8009806:	e041      	b.n	800988c <HAL_PCD_EP_Close+0x194>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009808:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800980c:	0464      	lsls	r4, r4, #17
 800980e:	d50b      	bpl.n	8009828 <HAL_PCD_EP_Close+0x130>
 8009810:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009814:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8009818:	0524      	lsls	r4, r4, #20
 800981a:	0d24      	lsrs	r4, r4, #20
 800981c:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8009820:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8009824:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009828:	780c      	ldrb	r4, [r1, #0]
 800982a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800982e:	0652      	lsls	r2, r2, #25
 8009830:	d50b      	bpl.n	800984a <HAL_PCD_EP_Close+0x152>
 8009832:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009836:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800983a:	0512      	lsls	r2, r2, #20
 800983c:	0d12      	lsrs	r2, r2, #20
 800983e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009842:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009846:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800984a:	780c      	ldrb	r4, [r1, #0]
 800984c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009850:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009854:	0512      	lsls	r2, r2, #20
 8009856:	0d12      	lsrs	r2, r2, #20
 8009858:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800985c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009860:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009864:	780c      	ldrb	r4, [r1, #0]
 8009866:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800986a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800986e:	0512      	lsls	r2, r2, #20
 8009870:	0d12      	lsrs	r2, r2, #20
 8009872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800987a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800987e:	7809      	ldrb	r1, [r1, #0]
 8009880:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009884:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009888:	0492      	lsls	r2, r2, #18
 800988a:	0c92      	lsrs	r2, r2, #18
 800988c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009890:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009894:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8009898:	2300      	movs	r3, #0
 800989a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 800989e:	4618      	mov	r0, r3
 80098a0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80098a2:	2002      	movs	r0, #2
}
 80098a4:	bd30      	pop	{r4, r5, pc}

080098a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80098a6:	b570      	push	{r4, r5, r6, lr}
 80098a8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80098ac:	241c      	movs	r4, #28
 80098ae:	fb04 0401 	mla	r4, r4, r1, r0
 80098b2:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
  ep->xfer_len = len;
  ep->xfer_count = 0;
 80098b6:	2200      	movs	r2, #0
  ep->xfer_len = len;
 80098b8:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
  ep->xfer_count = 0;
 80098bc:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 80098c0:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 80098c4:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 80098c8:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d065      	beq.n	800999c <HAL_PCD_EP_Receive+0xf6>
 80098d0:	2301      	movs	r3, #1
 80098d2:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80098d6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80098da:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 80098de:	261c      	movs	r6, #28
  if (ep->xfer_len > ep->maxpacket)
 80098e0:	42ab      	cmp	r3, r5
    ep->xfer_len-=len; 
 80098e2:	bf88      	it	hi
 80098e4:	1b5b      	subhi	r3, r3, r5
  if (ep->doublebuffer == 0) 
 80098e6:	fb06 0601 	mla	r6, r6, r1, r0
    ep->xfer_len-=len; 
 80098ea:	bf8c      	ite	hi
 80098ec:	f8c4 30c8 	strhi.w	r3, [r4, #200]	; 0xc8
    ep->xfer_len =0;
 80098f0:	f8c4 20c8 	strls.w	r2, [r4, #200]	; 0xc8
  if (ep->doublebuffer == 0) 
 80098f4:	f896 20be 	ldrb.w	r2, [r6, #190]	; 0xbe
 80098f8:	6804      	ldr	r4, [r0, #0]
 80098fa:	bf88      	it	hi
 80098fc:	462b      	movhi	r3, r5
 80098fe:	b112      	cbz	r2, 8009906 <HAL_PCD_EP_Receive+0x60>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009900:	f896 20b5 	ldrb.w	r2, [r6, #181]	; 0xb5
 8009904:	bb1a      	cbnz	r2, 800994e <HAL_PCD_EP_Receive+0xa8>
 8009906:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 800990a:	f896 20b4 	ldrb.w	r2, [r6, #180]	; 0xb4
 800990e:	b2ad      	uxth	r5, r5
 8009910:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8009914:	2b3e      	cmp	r3, #62	; 0x3e
 8009916:	f105 0506 	add.w	r5, r5, #6
 800991a:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 800991e:	d90b      	bls.n	8009938 <HAL_PCD_EP_Receive+0x92>
 8009920:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8009924:	06db      	lsls	r3, r3, #27
 8009926:	bf04      	itt	eq
 8009928:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800992c:	b292      	uxtheq	r2, r2
 800992e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009932:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009936:	e006      	b.n	8009946 <HAL_PCD_EP_Receive+0xa0>
 8009938:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800993c:	07db      	lsls	r3, r3, #31
 800993e:	bf44      	itt	mi
 8009940:	3201      	addmi	r2, #1
 8009942:	b292      	uxthmi	r2, r2
 8009944:	0292      	lsls	r2, r2, #10
 8009946:	b292      	uxth	r2, r2
 8009948:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 800994c:	e00c      	b.n	8009968 <HAL_PCD_EP_Receive+0xc2>
 800994e:	2a01      	cmp	r2, #1
 8009950:	d10a      	bne.n	8009968 <HAL_PCD_EP_Receive+0xc2>
 8009952:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8009956:	f896 50b4 	ldrb.w	r5, [r6, #180]	; 0xb4
 800995a:	b292      	uxth	r2, r2
 800995c:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8009960:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8009964:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8009968:	231c      	movs	r3, #28
 800996a:	fb03 0101 	mla	r1, r3, r1, r0
 800996e:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 8009972:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8009976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800997a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800997e:	041b      	lsls	r3, r3, #16
 8009980:	0c1b      	lsrs	r3, r3, #16
 8009982:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800998a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800998e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 8009992:	2300      	movs	r3, #0
 8009994:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8009998:	4618      	mov	r0, r3
 800999a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 800999c:	2002      	movs	r0, #2
}
 800999e:	bd70      	pop	{r4, r5, r6, pc}

080099a0 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 80099a0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80099a4:	231c      	movs	r3, #28
 80099a6:	fb03 0001 	mla	r0, r3, r1, r0
}
 80099aa:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 80099ae:	4770      	bx	lr

080099b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80099b6:	211c      	movs	r1, #28
 80099b8:	fb01 0106 	mla	r1, r1, r6, r0
{
 80099bc:	4604      	mov	r4, r0
  ep->xfer_buff = pBuf;  
 80099be:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 80099c0:	63cb      	str	r3, [r1, #60]	; 0x3c
  ep->xfer_count = 0;
 80099c2:	2200      	movs	r2, #0
  ep->is_in = 1;
 80099c4:	2301      	movs	r3, #1
  ep->xfer_count = 0;
 80099c6:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1;
 80099c8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 80099cc:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 80099d0:	f890 0140 	ldrb.w	r0, [r0, #320]	; 0x140
 80099d4:	4298      	cmp	r0, r3
 80099d6:	f000 80a5 	beq.w	8009b24 <HAL_PCD_EP_Transmit+0x174>
 80099da:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80099de:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80099e0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 80099e2:	271c      	movs	r7, #28
  if (ep->xfer_len > ep->maxpacket)
 80099e4:	429d      	cmp	r5, r3
    ep->xfer_len-=len; 
 80099e6:	bf88      	it	hi
 80099e8:	1aed      	subhi	r5, r5, r3
  if (ep->doublebuffer == 0) 
 80099ea:	fb07 4706 	mla	r7, r7, r6, r4
    ep->xfer_len-=len; 
 80099ee:	bf8c      	ite	hi
 80099f0:	63cd      	strhi	r5, [r1, #60]	; 0x3c
    ep->xfer_len =0;
 80099f2:	63ca      	strls	r2, [r1, #60]	; 0x3c
  if (ep->doublebuffer == 0) 
 80099f4:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80099f8:	bf88      	it	hi
 80099fa:	461d      	movhi	r5, r3
 80099fc:	b2ab      	uxth	r3, r5
 80099fe:	b98a      	cbnz	r2, 8009a24 <HAL_PCD_EP_Transmit+0x74>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8009a00:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009a02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a04:	6820      	ldr	r0, [r4, #0]
 8009a06:	f000 fb9c 	bl	800a142 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8009a0a:	6821      	ldr	r1, [r4, #0]
 8009a0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a10:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8009a14:	b292      	uxth	r2, r2
 8009a16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a1a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009a1e:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 8009a22:	e065      	b.n	8009af0 <HAL_PCD_EP_Transmit+0x140>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009a24:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8009a28:	6820      	ldr	r0, [r4, #0]
 8009a2a:	bb1a      	cbnz	r2, 8009a74 <HAL_PCD_EP_Transmit+0xc4>
 8009a2c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8009a30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009a34:	b289      	uxth	r1, r1
 8009a36:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009a3a:	2d3e      	cmp	r5, #62	; 0x3e
 8009a3c:	f101 0106 	add.w	r1, r1, #6
 8009a40:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 8009a44:	d90b      	bls.n	8009a5e <HAL_PCD_EP_Transmit+0xae>
 8009a46:	f3c5 124f 	ubfx	r2, r5, #5, #16
 8009a4a:	06ed      	lsls	r5, r5, #27
 8009a4c:	bf04      	itt	eq
 8009a4e:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8009a52:	b292      	uxtheq	r2, r2
 8009a54:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8009a58:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009a5c:	e006      	b.n	8009a6c <HAL_PCD_EP_Transmit+0xbc>
 8009a5e:	f3c5 024f 	ubfx	r2, r5, #1, #16
 8009a62:	07ed      	lsls	r5, r5, #31
 8009a64:	bf44      	itt	mi
 8009a66:	3201      	addmi	r2, #1
 8009a68:	b292      	uxthmi	r2, r2
 8009a6a:	0292      	lsls	r2, r2, #10
 8009a6c:	b292      	uxth	r2, r2
 8009a6e:	f847 2011 	str.w	r2, [r7, r1, lsl #1]
 8009a72:	e00c      	b.n	8009a8e <HAL_PCD_EP_Transmit+0xde>
 8009a74:	2a01      	cmp	r2, #1
 8009a76:	d10a      	bne.n	8009a8e <HAL_PCD_EP_Transmit+0xde>
 8009a78:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009a7c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009a80:	b292      	uxth	r2, r2
 8009a82:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009a86:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009a8a:	f8c2 540c 	str.w	r5, [r2, #1036]	; 0x40c
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8009a8e:	251c      	movs	r5, #28
 8009a90:	fb05 4206 	mla	r2, r5, r6, r4
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8009a94:	fb05 4506 	mla	r5, r5, r6, r4
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8009a98:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 8009a9c:	f830 1021 	ldrh.w	r1, [r0, r1, lsl #2]
 8009aa0:	0649      	lsls	r1, r1, #25
      pmabuffer = ep->pmaaddr1;
 8009aa2:	bf4c      	ite	mi
 8009aa4:	8e12      	ldrhmi	r2, [r2, #48]	; 0x30
      pmabuffer = ep->pmaaddr0;
 8009aa6:	8dd2      	ldrhpl	r2, [r2, #46]	; 0x2e
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8009aa8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8009aaa:	f000 fb4a 	bl	800a142 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 8009aae:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8009ab2:	6822      	ldr	r2, [r4, #0]
 8009ab4:	b963      	cbnz	r3, 8009ad0 <HAL_PCD_EP_Transmit+0x120>
 8009ab6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8009aba:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ac2:	051b      	lsls	r3, r3, #20
 8009ac4:	0d1b      	lsrs	r3, r3, #20
 8009ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ace:	e00d      	b.n	8009aec <HAL_PCD_EP_Transmit+0x13c>
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d10d      	bne.n	8009af0 <HAL_PCD_EP_Transmit+0x140>
 8009ad4:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8009ad8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009adc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ae0:	051b      	lsls	r3, r3, #20
 8009ae2:	0d1b      	lsrs	r3, r3, #20
 8009ae4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aec:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009af0:	231c      	movs	r3, #28
 8009af2:	fb03 4606 	mla	r6, r3, r6, r4
 8009af6:	6822      	ldr	r2, [r4, #0]
 8009af8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8009afc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b08:	041b      	lsls	r3, r3, #16
 8009b0a:	0c1b      	lsrs	r3, r3, #16
 8009b0c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 8009b18:	2000      	movs	r0, #0
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009b1a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  __HAL_UNLOCK(hpcd);
 8009b1e:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 8009b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hpcd); 
 8009b24:	2002      	movs	r0, #2
}
 8009b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b28 <HAL_PCD_IRQHandler>:
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8009b28:	6803      	ldr	r3, [r0, #0]
 8009b2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
{
 8009b2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b32:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8009b34:	0418      	lsls	r0, r3, #16
 8009b36:	d411      	bmi.n	8009b5c <HAL_PCD_IRQHandler+0x34>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009b3e:	0551      	lsls	r1, r2, #21
 8009b40:	f140 81d4 	bpl.w	8009eec <HAL_PCD_IRQHandler+0x3c4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009b44:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 8009b48:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8009b4e:	f001 fcb2 	bl	800b4b6 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8009b52:	2100      	movs	r1, #0
 8009b54:	4620      	mov	r0, r4
 8009b56:	f7ff fc1e 	bl	8009396 <HAL_PCD_SetAddress>
 8009b5a:	e1c7      	b.n	8009eec <HAL_PCD_IRQHandler+0x3c4>
  __IO uint16_t wEPVal = 0;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f8ad 3006 	strh.w	r3, [sp, #6]
        if (ep->doublebuffer == 0)
 8009b62:	f04f 081c 	mov.w	r8, #28
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009b66:	2708      	movs	r7, #8
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8009b68:	6820      	ldr	r0, [r4, #0]
 8009b6a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	0419      	lsls	r1, r3, #16
 8009b72:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009b76:	d5df      	bpl.n	8009b38 <HAL_PCD_IRQHandler+0x10>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009b78:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (EPindex == 0)
 8009b7c:	f015 050f 	ands.w	r5, r5, #15
 8009b80:	f040 80b6 	bne.w	8009cf0 <HAL_PCD_IRQHandler+0x1c8>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8009b84:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009b88:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8009b8a:	f001 0110 	and.w	r1, r1, #16
 8009b8e:	b289      	uxth	r1, r1
 8009b90:	bb59      	cbnz	r1, 8009bea <HAL_PCD_IRQHandler+0xc2>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009b92:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b9a:	041b      	lsls	r3, r3, #16
 8009b9c:	0c1b      	lsrs	r3, r3, #16
 8009b9e:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009ba0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009baa:	fb17 2303 	smlabb	r3, r7, r3, r2
 8009bae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8009bb2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009bb4:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 8009bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bbc:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8009bbe:	4413      	add	r3, r2
 8009bc0:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f001 fc6b 	bl	800b49e <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8009bc8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0cb      	beq.n	8009b68 <HAL_PCD_IRQHandler+0x40>
 8009bd0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009bd2:	2a00      	cmp	r2, #0
 8009bd4:	d1c8      	bne.n	8009b68 <HAL_PCD_IRQHandler+0x40>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8009bd6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009bda:	6821      	ldr	r1, [r4, #0]
 8009bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be0:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8009be4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8009be8:	e7be      	b.n	8009b68 <HAL_PCD_IRQHandler+0x40>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0)
 8009bf0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009bf4:	051a      	lsls	r2, r3, #20
 8009bf6:	d51f      	bpl.n	8009c38 <HAL_PCD_IRQHandler+0x110>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009bf8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009bfc:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	fb17 3302 	smlabb	r3, r7, r2, r3
 8009c06:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8009c0a:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009c0e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c16:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8009c1a:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 8009c1e:	f000 faa1 	bl	800a164 <PCD_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8009c22:	6822      	ldr	r2, [r4, #0]
 8009c24:	8813      	ldrh	r3, [r2, #0]
 8009c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2a:	051b      	lsls	r3, r3, #20
 8009c2c:	0d1b      	lsrs	r3, r3, #20
 8009c2e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009c30:	4620      	mov	r0, r4
 8009c32:	f001 fc25 	bl	800b480 <HAL_PCD_SetupStageCallback>
 8009c36:	e797      	b.n	8009b68 <HAL_PCD_IRQHandler+0x40>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8009c38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009c3c:	041b      	lsls	r3, r3, #16
 8009c3e:	d593      	bpl.n	8009b68 <HAL_PCD_IRQHandler+0x40>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009c40:	8803      	ldrh	r3, [r0, #0]
 8009c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c46:	051b      	lsls	r3, r3, #20
 8009c48:	0d1b      	lsrs	r3, r3, #20
 8009c4a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009c4c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009c50:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	fb17 3302 	smlabb	r3, r7, r2, r3
 8009c5a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009c5e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c66:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          if (ep->xfer_count != 0)
 8009c6a:	b163      	cbz	r3, 8009c86 <HAL_PCD_IRQHandler+0x15e>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8009c6c:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 8009c70:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8009c74:	f000 fa76 	bl	800a164 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8009c78:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8009c7c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8009c80:	4413      	add	r3, r2
 8009c82:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8009c86:	2100      	movs	r1, #0
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f001 fbff 	bl	800b48c <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009c8e:	6822      	ldr	r2, [r4, #0]
 8009c90:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 8009c94:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8009c98:	2d3e      	cmp	r5, #62	; 0x3e
 8009c9a:	b289      	uxth	r1, r1
 8009c9c:	f101 0106 	add.w	r1, r1, #6
 8009ca0:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8009ca4:	d90b      	bls.n	8009cbe <HAL_PCD_IRQHandler+0x196>
 8009ca6:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8009caa:	06ee      	lsls	r6, r5, #27
 8009cac:	bf04      	itt	eq
 8009cae:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8009cb2:	b29b      	uxtheq	r3, r3
 8009cb4:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8009cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cbc:	e006      	b.n	8009ccc <HAL_PCD_IRQHandler+0x1a4>
 8009cbe:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8009cc2:	07ed      	lsls	r5, r5, #31
 8009cc4:	bf44      	itt	mi
 8009cc6:	3301      	addmi	r3, #1
 8009cc8:	b29b      	uxthmi	r3, r3
 8009cca:	029b      	lsls	r3, r3, #10
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009cd2:	8813      	ldrh	r3, [r2, #0]
 8009cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cdc:	041b      	lsls	r3, r3, #16
 8009cde:	0c1b      	lsrs	r3, r3, #16
 8009ce0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cec:	8013      	strh	r3, [r2, #0]
 8009cee:	e73b      	b.n	8009b68 <HAL_PCD_IRQHandler+0x40>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8009cf0:	fa0f f985 	sxth.w	r9, r5
 8009cf4:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8009cfe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009d02:	041e      	lsls	r6, r3, #16
 8009d04:	d577      	bpl.n	8009df6 <HAL_PCD_IRQHandler+0x2ce>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8009d06:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8009d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d0e:	051b      	lsls	r3, r3, #20
 8009d10:	0d1b      	lsrs	r3, r3, #20
 8009d12:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0)
 8009d16:	fb08 4105 	mla	r1, r8, r5, r4
 8009d1a:	f891 30be 	ldrb.w	r3, [r1, #190]	; 0xbe
 8009d1e:	b9ab      	cbnz	r3, 8009d4c <HAL_PCD_IRQHandler+0x224>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009d20:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009d24:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	fb17 3302 	smlabb	r3, r7, r2, r3
 8009d2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009d32:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8009d36:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 8009d3a:	b3e6      	cbz	r6, 8009db6 <HAL_PCD_IRQHandler+0x28e>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009d3c:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
 8009d40:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 8009d44:	4633      	mov	r3, r6
 8009d46:	f000 fa0d 	bl	800a164 <PCD_ReadPMA>
 8009d4a:	e034      	b.n	8009db6 <HAL_PCD_IRQHandler+0x28e>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8009d4c:	f891 30b4 	ldrb.w	r3, [r1, #180]	; 0xb4
 8009d50:	b21a      	sxth	r2, r3
 8009d52:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8009d56:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d5a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009d5e:	b292      	uxth	r2, r2
 8009d60:	fb17 2303 	smlabb	r3, r7, r3, r2
 8009d64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8009d68:	d008      	beq.n	8009d7c <HAL_PCD_IRQHandler+0x254>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d6a:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 8009d6e:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8009d72:	b17e      	cbz	r6, 8009d94 <HAL_PCD_IRQHandler+0x26c>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009d74:	4633      	mov	r3, r6
 8009d76:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
 8009d7a:	e007      	b.n	8009d8c <HAL_PCD_IRQHandler+0x264>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009d7c:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8009d80:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8009d84:	b136      	cbz	r6, 8009d94 <HAL_PCD_IRQHandler+0x26c>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009d86:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
 8009d8a:	4633      	mov	r3, r6
 8009d8c:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 8009d90:	f000 f9e8 	bl	800a164 <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8009d94:	fb08 4305 	mla	r3, r8, r5, r4
 8009d98:	6822      	ldr	r2, [r4, #0]
 8009d9a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8009d9e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009da6:	051b      	lsls	r3, r3, #20
 8009da8:	0d1b      	lsrs	r3, r3, #20
 8009daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009db2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count+=count;
 8009db6:	fb08 4105 	mla	r1, r8, r5, r4
 8009dba:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 8009dbe:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
        ep->xfer_count+=count;
 8009dc2:	4433      	add	r3, r6
 8009dc4:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8009dc8:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
        ep->xfer_buff+=count;
 8009dcc:	4432      	add	r2, r6
 8009dce:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8009dd2:	b11b      	cbz	r3, 8009ddc <HAL_PCD_IRQHandler+0x2b4>
 8009dd4:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8009dd8:	4286      	cmp	r6, r0
 8009dda:	d207      	bcs.n	8009dec <HAL_PCD_IRQHandler+0x2c4>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009ddc:	fb08 4305 	mla	r3, r8, r5, r4
 8009de0:	4620      	mov	r0, r4
 8009de2:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8009de6:	f001 fb51 	bl	800b48c <HAL_PCD_DataOutStageCallback>
 8009dea:	e004      	b.n	8009df6 <HAL_PCD_IRQHandler+0x2ce>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8009dec:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 8009df0:	4620      	mov	r0, r4
 8009df2:	f7ff fd58 	bl	80098a6 <HAL_PCD_EP_Receive>
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8009df6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009dfa:	0618      	lsls	r0, r3, #24
 8009dfc:	f57f aeb4 	bpl.w	8009b68 <HAL_PCD_IRQHandler+0x40>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8009e00:	6820      	ldr	r0, [r4, #0]
 8009e02:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8009e06:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e0e:	041b      	lsls	r3, r3, #16
 8009e10:	0c1b      	lsrs	r3, r3, #16
 8009e12:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0)
 8009e16:	fb08 4105 	mla	r1, r8, r5, r4
 8009e1a:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8009e1e:	b9a3      	cbnz	r3, 8009e4a <HAL_PCD_IRQHandler+0x322>
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009e20:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009e24:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	fb17 3302 	smlabb	r3, r7, r2, r3
 8009e2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009e32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e3a:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0)
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d036      	beq.n	8009eae <HAL_PCD_IRQHandler+0x386>
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8009e40:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8009e42:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009e44:	f000 f97d 	bl	800a142 <PCD_WritePMA>
 8009e48:	e031      	b.n	8009eae <HAL_PCD_IRQHandler+0x386>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8009e4a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8009e4e:	b21a      	sxth	r2, r3
 8009e50:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8009e54:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009e58:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009e5c:	b292      	uxth	r2, r2
 8009e5e:	fb17 2303 	smlabb	r3, r7, r3, r2
 8009e62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8009e66:	d007      	beq.n	8009e78 <HAL_PCD_IRQHandler+0x350>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009e68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e70:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 8009e72:	b15b      	cbz	r3, 8009e8c <HAL_PCD_IRQHandler+0x364>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8009e74:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8009e76:	e006      	b.n	8009e86 <HAL_PCD_IRQHandler+0x35e>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009e78:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009e7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e80:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 8009e82:	b11b      	cbz	r3, 8009e8c <HAL_PCD_IRQHandler+0x364>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8009e84:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8009e86:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009e88:	f000 f95b 	bl	800a142 <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8009e8c:	fb08 4305 	mla	r3, r8, r5, r4
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8009e96:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e9e:	051b      	lsls	r3, r3, #20
 8009ea0:	0d1b      	lsrs	r3, r3, #20
 8009ea2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eaa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	fb08 4505 	mla	r5, r8, r5, r4
 8009eb4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8009eb8:	b291      	uxth	r1, r2
 8009eba:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8009ebe:	fb17 1202 	smlabb	r2, r7, r2, r1
 8009ec2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8009ec6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8009eca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8009ece:	6bab      	ldr	r3, [r5, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009ed0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009ed4:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8009ed6:	441a      	add	r2, r3
        if (ep->xfer_len == 0)
 8009ed8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 8009eda:	63aa      	str	r2, [r5, #56]	; 0x38
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009edc:	4620      	mov	r0, r4
        if (ep->xfer_len == 0)
 8009ede:	b913      	cbnz	r3, 8009ee6 <HAL_PCD_IRQHandler+0x3be>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009ee0:	f001 fadd 	bl	800b49e <HAL_PCD_DataInStageCallback>
 8009ee4:	e640      	b.n	8009b68 <HAL_PCD_IRQHandler+0x40>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8009ee6:	f7ff fd63 	bl	80099b0 <HAL_PCD_EP_Transmit>
 8009eea:	e63d      	b.n	8009b68 <HAL_PCD_IRQHandler+0x40>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009ef2:	0452      	lsls	r2, r2, #17
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 8009ef4:	bf44      	itt	mi
 8009ef6:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 8009efa:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8009efe:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009f02:	0497      	lsls	r7, r2, #18
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8009f04:	bf44      	itt	mi
 8009f06:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8009f0a:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8009f0e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009f12:	04d6      	lsls	r6, r2, #19
 8009f14:	d513      	bpl.n	8009f3e <HAL_PCD_IRQHandler+0x416>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8009f16:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009f1a:	f022 0204 	bic.w	r2, r2, #4
 8009f1e:	0412      	lsls	r2, r2, #16
 8009f20:	0c12      	lsrs	r2, r2, #16
 8009f22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8009f26:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8009f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f001 facf 	bl	800b4d2 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8009f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009f44:	0515      	lsls	r5, r2, #20
 8009f46:	d518      	bpl.n	8009f7a <HAL_PCD_IRQHandler+0x452>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8009f48:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8009f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8009f50:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009f54:	b292      	uxth	r2, r2
 8009f56:	f042 0208 	orr.w	r2, r2, #8
 8009f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8009f5e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009f62:	b292      	uxth	r2, r2
 8009f64:	f042 0204 	orr.w	r2, r2, #4
 8009f68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8009f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009f70:	04d8      	lsls	r0, r3, #19
 8009f72:	d402      	bmi.n	8009f7a <HAL_PCD_IRQHandler+0x452>
      HAL_PCD_SuspendCallback(hpcd);
 8009f74:	4620      	mov	r0, r4
 8009f76:	f001 faab 	bl	800b4d0 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009f80:	0591      	lsls	r1, r2, #22
 8009f82:	d506      	bpl.n	8009f92 <HAL_PCD_IRQHandler+0x46a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8009f84:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8009f88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f001 fa8e 	bl	800b4ae <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009f98:	05d2      	lsls	r2, r2, #23
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8009f9a:	bf44      	itt	mi
 8009f9c:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8009fa0:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
}
 8009fa4:	b003      	add	sp, #12
 8009fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009faa <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8009faa:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009fae:	2b01      	cmp	r3, #1
{
 8009fb0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8009fb2:	d047      	beq.n	800a044 <HAL_PCD_EP_SetStall+0x9a>
   
  if ((0x80 & ep_addr) == 0x80)
 8009fb4:	b24c      	sxtb	r4, r1
  __HAL_LOCK(hpcd); 
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	221c      	movs	r2, #28
 8009fba:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  if ((0x80 & ep_addr) == 0x80)
 8009fbe:	2c00      	cmp	r4, #0
 8009fc0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009fc4:	bfb5      	itete	lt
 8009fc6:	fb02 0203 	mlalt	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009fca:	fb02 0201 	mlage	r2, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009fce:	3228      	addlt	r2, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8009fd0:	32b4      	addge	r2, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7F;
 8009fd6:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8009fd8:	0fe3      	lsrs	r3, r4, #31
  ep->num   = ep_addr & 0x7F;
 8009fda:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8009fdc:	7053      	strb	r3, [r2, #1]
 8009fde:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 8009fe0:	b979      	cbnz	r1, 800a002 <HAL_PCD_EP_SetStall+0x58>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8009fe2:	8813      	ldrh	r3, [r2, #0]
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ff2:	f083 0310 	eor.w	r3, r3, #16
 8009ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffe:	8013      	strh	r3, [r2, #0]
 800a000:	e01b      	b.n	800a03a <HAL_PCD_EP_SetStall+0x90>
 800a002:	b209      	sxth	r1, r1
  }
  else
  {
    if (ep->is_in)
 800a004:	2c00      	cmp	r4, #0
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a006:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
    if (ep->is_in)
 800a00a:	da08      	bge.n	800a01e <HAL_PCD_EP_SetStall+0x74>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a00c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a014:	041b      	lsls	r3, r3, #16
 800a016:	0c1b      	lsrs	r3, r3, #16
 800a018:	f083 0310 	eor.w	r3, r3, #16
 800a01c:	e007      	b.n	800a02e <HAL_PCD_EP_SetStall+0x84>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 800a01e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a026:	041b      	lsls	r3, r3, #16
 800a028:	0c1b      	lsrs	r3, r3, #16
 800a02a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a02e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a036:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 800a03a:	2300      	movs	r3, #0
 800a03c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800a040:	4618      	mov	r0, r3
 800a042:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800a044:	2002      	movs	r0, #2
}
 800a046:	bd10      	pop	{r4, pc}

0800a048 <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800a048:	b24b      	sxtb	r3, r1
 800a04a:	2b00      	cmp	r3, #0
{
 800a04c:	b510      	push	{r4, lr}
 800a04e:	f04f 021c 	mov.w	r2, #28
 800a052:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a056:	bfb5      	itete	lt
 800a058:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a05c:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a060:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a062:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a064:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 800a066:	2200      	movs	r2, #0
 800a068:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800a06a:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a06c:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800a06e:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800a072:	2b01      	cmp	r3, #1
 800a074:	d049      	beq.n	800a10a <HAL_PCD_EP_ClrStall+0xc2>
 800a076:	2301      	movs	r3, #1
 800a078:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 800a07c:	780c      	ldrb	r4, [r1, #0]
  
  if (ep->is_in)
 800a07e:	784b      	ldrb	r3, [r1, #1]
 800a080:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a082:	b224      	sxth	r4, r4
  if (ep->is_in)
 800a084:	b1db      	cbz	r3, 800a0be <HAL_PCD_EP_ClrStall+0x76>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a086:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800a08a:	065b      	lsls	r3, r3, #25
 800a08c:	d50b      	bpl.n	800a0a6 <HAL_PCD_EP_ClrStall+0x5e>
 800a08e:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800a092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a096:	051b      	lsls	r3, r3, #20
 800a098:	0d1b      	lsrs	r3, r3, #20
 800a09a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a09e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0a2:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a0a6:	7809      	ldrb	r1, [r1, #0]
 800a0a8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a0ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b4:	041b      	lsls	r3, r3, #16
 800a0b6:	0c1b      	lsrs	r3, r3, #16
 800a0b8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800a0bc:	e01a      	b.n	800a0f4 <HAL_PCD_EP_ClrStall+0xac>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800a0be:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800a0c2:	045b      	lsls	r3, r3, #17
 800a0c4:	d50b      	bpl.n	800a0de <HAL_PCD_EP_ClrStall+0x96>
 800a0c6:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800a0ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0ce:	051b      	lsls	r3, r3, #20
 800a0d0:	0d1b      	lsrs	r3, r3, #20
 800a0d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0da:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a0de:	7809      	ldrb	r1, [r1, #0]
 800a0e0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a0e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ec:	041b      	lsls	r3, r3, #16
 800a0ee:	0c1b      	lsrs	r3, r3, #16
 800a0f0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a0f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 800a100:	2300      	movs	r3, #0
 800a102:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 800a106:	4618      	mov	r0, r3
 800a108:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800a10a:	2002      	movs	r0, #2
}
 800a10c:	bd10      	pop	{r4, pc}

0800a10e <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 800a10e:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800a112:	b530      	push	{r4, r5, lr}
 800a114:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a118:	bf1b      	ittet	ne
 800a11a:	f001 047f 	andne.w	r4, r1, #127	; 0x7f
 800a11e:	fb05 0004 	mlane	r0, r5, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a122:	fb05 0001 	mlaeq	r0, r5, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a126:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a128:	bf08      	it	eq
 800a12a:	30b4      	addeq	r0, #180	; 0xb4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a12c:	b912      	cbnz	r2, 800a134 <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 800a12e:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800a130:	8083      	strh	r3, [r0, #4]
 800a132:	e004      	b.n	800a13e <HAL_PCDEx_PMAConfig+0x30>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 800a134:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 800a136:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800a138:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 800a13a:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800a13c:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 800a13e:	2000      	movs	r0, #0
 800a140:	bd30      	pop	{r4, r5, pc}

0800a142 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a142:	3301      	adds	r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a144:	f500 6080 	add.w	r0, r0, #1024	; 0x400
{
 800a148:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a14a:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a14c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800a150:	2400      	movs	r4, #0
 800a152:	42a3      	cmp	r3, r4
 800a154:	d005      	beq.n	800a162 <PCD_WritePMA+0x20>
 800a156:	f831 0b02 	ldrh.w	r0, [r1], #2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 800a15a:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 800a15e:	3401      	adds	r4, #1
 800a160:	e7f7      	b.n	800a152 <PCD_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800a162:	bd10      	pop	{r4, pc}

0800a164 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a164:	3301      	adds	r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a166:	f500 6080 	add.w	r0, r0, #1024	; 0x400
{
 800a16a:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a16c:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a16e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800a172:	2400      	movs	r4, #0
 800a174:	42a3      	cmp	r3, r4
 800a176:	d005      	beq.n	800a184 <PCD_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a178:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800a17c:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 800a180:	3401      	adds	r4, #1
 800a182:	e7f7      	b.n	800a174 <PCD_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 800a184:	bd10      	pop	{r4, pc}

0800a186 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: Device state
  * @retval None
  */
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 800a186:	4770      	bx	lr

0800a188 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a188:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800a18a:	6805      	ldr	r5, [r0, #0]
 800a18c:	4c06      	ldr	r4, [pc, #24]	; (800a1a8 <I2C_TransferConfig+0x20>)
 800a18e:	6868      	ldr	r0, [r5, #4]
 800a190:	4004      	ands	r4, r0
 800a192:	9803      	ldr	r0, [sp, #12]
 800a194:	4320      	orrs	r0, r4
 800a196:	4303      	orrs	r3, r0
 800a198:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a19c:	430b      	orrs	r3, r1
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a19e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 800a1a2:	606a      	str	r2, [r5, #4]
 800a1a4:	bd30      	pop	{r4, r5, pc}
 800a1a6:	bf00      	nop
 800a1a8:	fc009800 	.word	0xfc009800

0800a1ac <I2C_IsAcknowledgeFailed>:
{
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800a1b2:	f7fe ff4b 	bl	800904c <HAL_GetTick>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a1b6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a1b8:	4606      	mov	r6, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a1ba:	6998      	ldr	r0, [r3, #24]
 800a1bc:	f010 0010 	ands.w	r0, r0, #16
 800a1c0:	d039      	beq.n	800a236 <I2C_IsAcknowledgeFailed+0x8a>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 800a1c2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800a1c6:	2a12      	cmp	r2, #18
 800a1c8:	d007      	beq.n	800a1da <I2C_IsAcknowledgeFailed+0x2e>
 800a1ca:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800a1ce:	2a52      	cmp	r2, #82	; 0x52
 800a1d0:	d003      	beq.n	800a1da <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 800a1d2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800a1d6:	2a62      	cmp	r2, #98	; 0x62
 800a1d8:	d112      	bne.n	800a200 <I2C_IsAcknowledgeFailed+0x54>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	0190      	lsls	r0, r2, #6
 800a1de:	d40f      	bmi.n	800a200 <I2C_IsAcknowledgeFailed+0x54>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1e6:	605a      	str	r2, [r3, #4]
 800a1e8:	e00a      	b.n	800a200 <I2C_IsAcknowledgeFailed+0x54>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1ea:	699a      	ldr	r2, [r3, #24]
 800a1ec:	0692      	lsls	r2, r2, #26
 800a1ee:	d411      	bmi.n	800a214 <I2C_IsAcknowledgeFailed+0x68>
      if(Timeout != HAL_MAX_DELAY)
 800a1f0:	1c69      	adds	r1, r5, #1
 800a1f2:	d0fa      	beq.n	800a1ea <I2C_IsAcknowledgeFailed+0x3e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a1f4:	b135      	cbz	r5, 800a204 <I2C_IsAcknowledgeFailed+0x58>
 800a1f6:	f7fe ff29 	bl	800904c <HAL_GetTick>
 800a1fa:	1b80      	subs	r0, r0, r6
 800a1fc:	4285      	cmp	r5, r0
 800a1fe:	d301      	bcc.n	800a204 <I2C_IsAcknowledgeFailed+0x58>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a200:	6823      	ldr	r3, [r4, #0]
 800a202:	e7f2      	b.n	800a1ea <I2C_IsAcknowledgeFailed+0x3e>
          hi2c->State= HAL_I2C_STATE_READY;
 800a204:	2301      	movs	r3, #1
 800a206:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800a20a:	2300      	movs	r3, #0
 800a20c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800a210:	2003      	movs	r0, #3
 800a212:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a214:	2210      	movs	r2, #16
 800a216:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a218:	2220      	movs	r2, #32
 800a21a:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a21c:	6859      	ldr	r1, [r3, #4]
 800a21e:	4a06      	ldr	r2, [pc, #24]	; (800a238 <I2C_IsAcknowledgeFailed+0x8c>)
 800a220:	400a      	ands	r2, r1
 800a222:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a224:	2304      	movs	r3, #4
 800a226:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 800a22a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 800a22c:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 800a22e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a232:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a236:	bd70      	pop	{r4, r5, r6, pc}
 800a238:	fe00e800 	.word	0xfe00e800

0800a23c <I2C_WaitOnFlagUntilTimeout>:
{  
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	4604      	mov	r4, r0
 800a242:	460e      	mov	r6, r1
 800a244:	4690      	mov	r8, r2
 800a246:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800a248:	f7fe ff00 	bl	800904c <HAL_GetTick>
 800a24c:	4607      	mov	r7, r0
  if(Status == RESET)
 800a24e:	f1b8 0f00 	cmp.w	r8, #0
 800a252:	d125      	bne.n	800a2a0 <I2C_WaitOnFlagUntilTimeout+0x64>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a254:	6822      	ldr	r2, [r4, #0]
 800a256:	6993      	ldr	r3, [r2, #24]
 800a258:	ea36 0303 	bics.w	r3, r6, r3
 800a25c:	d00e      	beq.n	800a27c <I2C_WaitOnFlagUntilTimeout+0x40>
      if(Timeout != HAL_MAX_DELAY)
 800a25e:	1c69      	adds	r1, r5, #1
 800a260:	d0f9      	beq.n	800a256 <I2C_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a262:	b17d      	cbz	r5, 800a284 <I2C_WaitOnFlagUntilTimeout+0x48>
 800a264:	f7fe fef2 	bl	800904c <HAL_GetTick>
 800a268:	1bc0      	subs	r0, r0, r7
 800a26a:	4285      	cmp	r5, r0
 800a26c:	d2f2      	bcs.n	800a254 <I2C_WaitOnFlagUntilTimeout+0x18>
 800a26e:	e009      	b.n	800a284 <I2C_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 800a270:	1c6b      	adds	r3, r5, #1
 800a272:	d106      	bne.n	800a282 <I2C_WaitOnFlagUntilTimeout+0x46>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 800a274:	6993      	ldr	r3, [r2, #24]
 800a276:	ea36 0303 	bics.w	r3, r6, r3
 800a27a:	d0f9      	beq.n	800a270 <I2C_WaitOnFlagUntilTimeout+0x34>
  return HAL_OK;
 800a27c:	2000      	movs	r0, #0
 800a27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a282:	b945      	cbnz	r5, 800a296 <I2C_WaitOnFlagUntilTimeout+0x5a>
          hi2c->State= HAL_I2C_STATE_READY;
 800a284:	2301      	movs	r3, #1
 800a286:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800a28a:	2300      	movs	r3, #0
 800a28c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800a290:	2003      	movs	r0, #3
 800a292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a296:	f7fe fed9 	bl	800904c <HAL_GetTick>
 800a29a:	1bc0      	subs	r0, r0, r7
 800a29c:	4285      	cmp	r5, r0
 800a29e:	d3f1      	bcc.n	800a284 <I2C_WaitOnFlagUntilTimeout+0x48>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 800a2a0:	6822      	ldr	r2, [r4, #0]
 800a2a2:	e7e7      	b.n	800a274 <I2C_WaitOnFlagUntilTimeout+0x38>

0800a2a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 800a2a4:	b570      	push	{r4, r5, r6, lr}
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800a2aa:	f7fe fecf 	bl	800904c <HAL_GetTick>
 800a2ae:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	069b      	lsls	r3, r3, #26
 800a2b6:	d419      	bmi.n	800a2ec <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f7ff ff76 	bl	800a1ac <I2C_IsAcknowledgeFailed>
 800a2c0:	b9b0      	cbnz	r0, 800a2f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a2c2:	b96d      	cbnz	r5, 800a2e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2c4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a2c8:	f043 0320 	orr.w	r3, r3, #32
 800a2cc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800a2dc:	2003      	movs	r0, #3
 800a2de:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a2e0:	f7fe feb4 	bl	800904c <HAL_GetTick>
 800a2e4:	1b80      	subs	r0, r0, r6
 800a2e6:	4285      	cmp	r5, r0
 800a2e8:	d2e2      	bcs.n	800a2b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 800a2ea:	e7eb      	b.n	800a2c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
  return HAL_OK;
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800a2f0:	2001      	movs	r0, #1
}
 800a2f2:	bd70      	pop	{r4, r5, r6, pc}

0800a2f4 <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 800a2f4:	b570      	push	{r4, r5, r6, lr}
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800a2fa:	f7fe fea7 	bl	800904c <HAL_GetTick>
 800a2fe:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	079b      	lsls	r3, r3, #30
 800a306:	d41b      	bmi.n	800a340 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800a308:	4629      	mov	r1, r5
 800a30a:	4620      	mov	r0, r4
 800a30c:	f7ff ff4e 	bl	800a1ac <I2C_IsAcknowledgeFailed>
 800a310:	b9c0      	cbnz	r0, 800a344 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 800a312:	1c6a      	adds	r2, r5, #1
 800a314:	d0f4      	beq.n	800a300 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a316:	b96d      	cbnz	r5, 800a334 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a318:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a31c:	f043 0320 	orr.w	r3, r3, #32
 800a320:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 800a324:	2301      	movs	r3, #1
 800a326:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 800a32a:	2300      	movs	r3, #0
 800a32c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800a330:	2003      	movs	r0, #3
 800a332:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a334:	f7fe fe8a 	bl	800904c <HAL_GetTick>
 800a338:	1b80      	subs	r0, r0, r6
 800a33a:	4285      	cmp	r5, r0
 800a33c:	d2e0      	bcs.n	800a300 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 800a33e:	e7eb      	b.n	800a318 <I2C_WaitOnTXISFlagUntilTimeout+0x24>
  return HAL_OK;      
 800a340:	2000      	movs	r0, #0
 800a342:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800a344:	2001      	movs	r0, #1
}
 800a346:	bd70      	pop	{r4, r5, r6, pc}

0800a348 <I2C_RequestMemoryWrite>:
{
 800a348:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a34a:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a34c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800a350:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a352:	9300      	str	r3, [sp, #0]
{
 800a354:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a35a:	b2f2      	uxtb	r2, r6
 800a35c:	f7ff ff14 	bl	800a188 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a360:	9906      	ldr	r1, [sp, #24]
 800a362:	4620      	mov	r0, r4
 800a364:	f7ff ffc6 	bl	800a2f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800a368:	b128      	cbz	r0, 800a376 <I2C_RequestMemoryWrite+0x2e>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a36a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d10d      	bne.n	800a38e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800a372:	2001      	movs	r0, #1
 800a374:	e017      	b.n	800a3a6 <I2C_RequestMemoryWrite+0x5e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a376:	2e01      	cmp	r6, #1
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	d10a      	bne.n	800a392 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a37c:	b2ed      	uxtb	r5, r5
 800a37e:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800a380:	9b06      	ldr	r3, [sp, #24]
 800a382:	2200      	movs	r2, #0
 800a384:	2180      	movs	r1, #128	; 0x80
 800a386:	4620      	mov	r0, r4
 800a388:	f7ff ff58 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 800a38c:	b158      	cbz	r0, 800a3a6 <I2C_RequestMemoryWrite+0x5e>
      return HAL_TIMEOUT;
 800a38e:	2003      	movs	r0, #3
 800a390:	e009      	b.n	800a3a6 <I2C_RequestMemoryWrite+0x5e>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800a392:	0a2a      	lsrs	r2, r5, #8
 800a394:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a396:	9906      	ldr	r1, [sp, #24]
 800a398:	4620      	mov	r0, r4
 800a39a:	f7ff ffab 	bl	800a2f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d1e3      	bne.n	800a36a <I2C_RequestMemoryWrite+0x22>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	e7ea      	b.n	800a37c <I2C_RequestMemoryWrite+0x34>
}
 800a3a6:	b002      	add	sp, #8
 800a3a8:	bd70      	pop	{r4, r5, r6, pc}

0800a3aa <I2C_RequestMemoryRead>:
{
 800a3aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3ac:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a3ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800a3b2:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a3b4:	9300      	str	r3, [sp, #0]
{
 800a3b6:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	b2f2      	uxtb	r2, r6
 800a3bc:	f7ff fee4 	bl	800a188 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a3c0:	9906      	ldr	r1, [sp, #24]
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f7ff ff96 	bl	800a2f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800a3c8:	b128      	cbz	r0, 800a3d6 <I2C_RequestMemoryRead+0x2c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3ca:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	d10d      	bne.n	800a3ee <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	e017      	b.n	800a406 <I2C_RequestMemoryRead+0x5c>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a3d6:	2e01      	cmp	r6, #1
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	d10a      	bne.n	800a3f2 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a3dc:	b2ed      	uxtb	r5, r5
 800a3de:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 800a3e0:	9b06      	ldr	r3, [sp, #24]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	2140      	movs	r1, #64	; 0x40
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f7ff ff28 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 800a3ec:	b158      	cbz	r0, 800a406 <I2C_RequestMemoryRead+0x5c>
      return HAL_TIMEOUT;
 800a3ee:	2003      	movs	r0, #3
 800a3f0:	e009      	b.n	800a406 <I2C_RequestMemoryRead+0x5c>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800a3f2:	0a2a      	lsrs	r2, r5, #8
 800a3f4:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a3f6:	9906      	ldr	r1, [sp, #24]
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f7ff ff7b 	bl	800a2f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d1e3      	bne.n	800a3ca <I2C_RequestMemoryRead+0x20>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	e7ea      	b.n	800a3dc <I2C_RequestMemoryRead+0x32>
}
 800a406:	b002      	add	sp, #8
 800a408:	bd70      	pop	{r4, r5, r6, pc}

0800a40a <HAL_I2C_MspInit>:
 800a40a:	4770      	bx	lr

0800a40c <HAL_I2C_Init>:
{ 
 800a40c:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800a40e:	4604      	mov	r4, r0
 800a410:	2800      	cmp	r0, #0
 800a412:	d041      	beq.n	800a498 <HAL_I2C_Init+0x8c>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800a414:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a418:	b90b      	cbnz	r3, 800a41e <HAL_I2C_Init+0x12>
    HAL_I2C_MspInit(hi2c);
 800a41a:	f7ff fff6 	bl	800a40a <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a41e:	2302      	movs	r3, #2
 800a420:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	68e1      	ldr	r1, [r4, #12]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	f022 0201 	bic.w	r2, r2, #1
 800a42e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a430:	6862      	ldr	r2, [r4, #4]
 800a432:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a436:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a43e:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 800a440:	68a2      	ldr	r2, [r4, #8]
 800a442:	b142      	cbz	r2, 800a456 <HAL_I2C_Init+0x4a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a444:	2901      	cmp	r1, #1
 800a446:	d103      	bne.n	800a450 <HAL_I2C_Init+0x44>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a44c:	609a      	str	r2, [r3, #8]
 800a44e:	e007      	b.n	800a460 <HAL_I2C_Init+0x54>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a450:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a454:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a456:	2902      	cmp	r1, #2
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a458:	bf04      	itt	eq
 800a45a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800a45e:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a460:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a462:	6921      	ldr	r1, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a464:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800a468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a46c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a46e:	6962      	ldr	r2, [r4, #20]
 800a470:	430a      	orrs	r2, r1
 800a472:	69a1      	ldr	r1, [r4, #24]
 800a474:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a478:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a47a:	69e1      	ldr	r1, [r4, #28]
 800a47c:	6a22      	ldr	r2, [r4, #32]
 800a47e:	430a      	orrs	r2, r1
 800a480:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	f042 0201 	orr.w	r2, r2, #1
 800a488:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a48a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800a48c:	2301      	movs	r3, #1
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a48e:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 800a492:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800a496:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a498:	2001      	movs	r0, #1
}
 800a49a:	bd10      	pop	{r4, pc}

0800a49c <HAL_I2C_MspDeInit>:
 800a49c:	4770      	bx	lr

0800a49e <HAL_I2C_DeInit>:
{
 800a49e:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	b188      	cbz	r0, 800a4c8 <HAL_I2C_DeInit+0x2a>
  __HAL_I2C_DISABLE(hi2c);
 800a4a4:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800a4ac:	6813      	ldr	r3, [r2, #0]
 800a4ae:	f023 0301 	bic.w	r3, r3, #1
 800a4b2:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800a4b4:	f7ff fff2 	bl	800a49c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  __HAL_UNLOCK(hi2c);
 800a4be:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_RESET;
 800a4c2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  return HAL_OK;
 800a4c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a4c8:	2001      	movs	r0, #1
}
 800a4ca:	bd10      	pop	{r4, pc}

0800a4cc <HAL_I2C_Mem_Write>:
{
 800a4cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a4d0:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
{
 800a4d4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800a4d8:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 800a4dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a4e0:	b2ed      	uxtb	r5, r5
 800a4e2:	2d01      	cmp	r5, #1
{
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	4689      	mov	r9, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a4e8:	d17e      	bne.n	800a5e8 <HAL_I2C_Mem_Write+0x11c>
    if((pData == NULL) || (Size == 0)) 
 800a4ea:	f1b8 0f00 	cmp.w	r8, #0
 800a4ee:	d101      	bne.n	800a4f4 <HAL_I2C_Mem_Write+0x28>
      return  HAL_ERROR;                                    
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	e07a      	b.n	800a5ea <HAL_I2C_Mem_Write+0x11e>
    if((pData == NULL) || (Size == 0)) 
 800a4f4:	2e00      	cmp	r6, #0
 800a4f6:	d0fb      	beq.n	800a4f0 <HAL_I2C_Mem_Write+0x24>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a4f8:	6807      	ldr	r7, [r0, #0]
 800a4fa:	69bf      	ldr	r7, [r7, #24]
 800a4fc:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 800a500:	d172      	bne.n	800a5e8 <HAL_I2C_Mem_Write+0x11c>
    __HAL_LOCK(hi2c);
 800a502:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 800a506:	f1be 0f01 	cmp.w	lr, #1
 800a50a:	d06d      	beq.n	800a5e8 <HAL_I2C_Mem_Write+0x11c>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 800a50c:	f04f 0e52 	mov.w	lr, #82	; 0x52
 800a510:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800a514:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a518:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800a51c:	f8cd a000 	str.w	sl, [sp]
 800a520:	f7ff ff12 	bl	800a348 <I2C_RequestMemoryWrite>
 800a524:	b120      	cbz	r0, 800a530 <HAL_I2C_Mem_Write+0x64>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a526:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800a52a:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800a52e:	e041      	b.n	800a5b4 <HAL_I2C_Mem_Write+0xe8>
    if(Size > 255)
 800a530:	2eff      	cmp	r6, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a532:	9000      	str	r0, [sp, #0]
    if(Size > 255)
 800a534:	d90a      	bls.n	800a54c <HAL_I2C_Mem_Write+0x80>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a536:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a53a:	22ff      	movs	r2, #255	; 0xff
 800a53c:	4649      	mov	r1, r9
 800a53e:	4620      	mov	r0, r4
 800a540:	f7ff fe22 	bl	800a188 <I2C_TransferConfig>
      Sizetmp = 255;
 800a544:	25ff      	movs	r5, #255	; 0xff
 800a546:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a54a:	e023      	b.n	800a594 <HAL_I2C_Mem_Write+0xc8>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a54c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a550:	b2f2      	uxtb	r2, r6
 800a552:	4649      	mov	r1, r9
 800a554:	4620      	mov	r0, r4
 800a556:	f7ff fe17 	bl	800a188 <I2C_TransferConfig>
      Sizetmp = Size;
 800a55a:	4635      	mov	r5, r6
 800a55c:	e7f3      	b.n	800a546 <HAL_I2C_Mem_Write+0x7a>
      hi2c->Instance->TXDR = (*pData++);
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800a564:	629a      	str	r2, [r3, #40]	; 0x28
      Size--;
 800a566:	3e01      	subs	r6, #1
      if((Sizetmp == 0)&&(Size!=0))
 800a568:	3d01      	subs	r5, #1
      Size--;
 800a56a:	b2b6      	uxth	r6, r6
      if((Sizetmp == 0)&&(Size!=0))
 800a56c:	d119      	bne.n	800a5a2 <HAL_I2C_Mem_Write+0xd6>
 800a56e:	b1d6      	cbz	r6, 800a5a6 <HAL_I2C_Mem_Write+0xda>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800a570:	4653      	mov	r3, sl
 800a572:	462a      	mov	r2, r5
 800a574:	2180      	movs	r1, #128	; 0x80
 800a576:	4620      	mov	r0, r4
 800a578:	f7ff fe60 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 800a57c:	b9e0      	cbnz	r0, 800a5b8 <HAL_I2C_Mem_Write+0xec>
        if(Size > 255)
 800a57e:	2eff      	cmp	r6, #255	; 0xff
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a580:	9500      	str	r5, [sp, #0]
        if(Size > 255)
 800a582:	d91b      	bls.n	800a5bc <HAL_I2C_Mem_Write+0xf0>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a588:	22ff      	movs	r2, #255	; 0xff
 800a58a:	4649      	mov	r1, r9
 800a58c:	4620      	mov	r0, r4
 800a58e:	f7ff fdfb 	bl	800a188 <I2C_TransferConfig>
          Sizetmp = 255;
 800a592:	25ff      	movs	r5, #255	; 0xff
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a594:	4651      	mov	r1, sl
 800a596:	4620      	mov	r0, r4
 800a598:	f7ff feac 	bl	800a2f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d0de      	beq.n	800a55e <HAL_I2C_Mem_Write+0x92>
 800a5a0:	e006      	b.n	800a5b0 <HAL_I2C_Mem_Write+0xe4>
    }while(Size > 0);
 800a5a2:	2e00      	cmp	r6, #0
 800a5a4:	d1f6      	bne.n	800a594 <HAL_I2C_Mem_Write+0xc8>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800a5a6:	2119      	movs	r1, #25
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f7ff fe7b 	bl	800a2a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a5ae:	b170      	cbz	r0, 800a5ce <HAL_I2C_Mem_Write+0x102>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5b0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	d09b      	beq.n	800a4f0 <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 800a5b8:	2003      	movs	r0, #3
 800a5ba:	e016      	b.n	800a5ea <HAL_I2C_Mem_Write+0x11e>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a5bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5c0:	b2f2      	uxtb	r2, r6
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f7ff fddf 	bl	800a188 <I2C_TransferConfig>
          Sizetmp = Size;
 800a5ca:	4635      	mov	r5, r6
 800a5cc:	e7e2      	b.n	800a594 <HAL_I2C_Mem_Write+0xc8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a5d4:	6859      	ldr	r1, [r3, #4]
 800a5d6:	4a06      	ldr	r2, [pc, #24]	; (800a5f0 <HAL_I2C_Mem_Write+0x124>)
 800a5d8:	400a      	ands	r2, r1
 800a5da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 800a5dc:	2301      	movs	r3, #1
 800a5de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a5e2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800a5e6:	e000      	b.n	800a5ea <HAL_I2C_Mem_Write+0x11e>
    return HAL_BUSY;
 800a5e8:	2002      	movs	r0, #2
}
 800a5ea:	b002      	add	sp, #8
 800a5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f0:	fe00e800 	.word	0xfe00e800

0800a5f4 <HAL_I2C_Mem_Read>:
{
 800a5f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a5f8:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
{
 800a5fc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800a600:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 800a604:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a608:	b2ed      	uxtb	r5, r5
 800a60a:	2d01      	cmp	r5, #1
{
 800a60c:	4604      	mov	r4, r0
 800a60e:	4689      	mov	r9, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a610:	f040 8083 	bne.w	800a71a <HAL_I2C_Mem_Read+0x126>
    if((pData == NULL) || (Size == 0)) 
 800a614:	f1b8 0f00 	cmp.w	r8, #0
 800a618:	d101      	bne.n	800a61e <HAL_I2C_Mem_Read+0x2a>
      return  HAL_ERROR;                                    
 800a61a:	2001      	movs	r0, #1
 800a61c:	e07e      	b.n	800a71c <HAL_I2C_Mem_Read+0x128>
    if((pData == NULL) || (Size == 0)) 
 800a61e:	2e00      	cmp	r6, #0
 800a620:	d0fb      	beq.n	800a61a <HAL_I2C_Mem_Read+0x26>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a622:	6807      	ldr	r7, [r0, #0]
 800a624:	69bf      	ldr	r7, [r7, #24]
 800a626:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 800a62a:	d176      	bne.n	800a71a <HAL_I2C_Mem_Read+0x126>
    __HAL_LOCK(hi2c);
 800a62c:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 800a630:	f1be 0f01 	cmp.w	lr, #1
 800a634:	d071      	beq.n	800a71a <HAL_I2C_Mem_Read+0x126>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 800a636:	f04f 0e62 	mov.w	lr, #98	; 0x62
 800a63a:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800a63e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a642:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800a646:	f8cd a000 	str.w	sl, [sp]
 800a64a:	f7ff feae 	bl	800a3aa <I2C_RequestMemoryRead>
 800a64e:	b120      	cbz	r0, 800a65a <HAL_I2C_Mem_Read+0x66>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a650:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800a654:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800a658:	e04e      	b.n	800a6f8 <HAL_I2C_Mem_Read+0x104>
 800a65a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    if(Size > 255)
 800a65e:	2eff      	cmp	r6, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a660:	9300      	str	r3, [sp, #0]
    if(Size > 255)
 800a662:	d90a      	bls.n	800a67a <HAL_I2C_Mem_Read+0x86>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a668:	22ff      	movs	r2, #255	; 0xff
 800a66a:	4649      	mov	r1, r9
 800a66c:	4620      	mov	r0, r4
 800a66e:	f7ff fd8b 	bl	800a188 <I2C_TransferConfig>
      Sizetmp = 255;
 800a672:	25ff      	movs	r5, #255	; 0xff
 800a674:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a678:	e023      	b.n	800a6c2 <HAL_I2C_Mem_Read+0xce>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a67a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a67e:	b2f2      	uxtb	r2, r6
 800a680:	4649      	mov	r1, r9
 800a682:	4620      	mov	r0, r4
 800a684:	f7ff fd80 	bl	800a188 <I2C_TransferConfig>
      Sizetmp = Size;
 800a688:	4635      	mov	r5, r6
 800a68a:	e7f3      	b.n	800a674 <HAL_I2C_Mem_Read+0x80>
      (*pData++) = hi2c->Instance->RXDR;
 800a68c:	6823      	ldr	r3, [r4, #0]
      Size--;   
 800a68e:	3e01      	subs	r6, #1
      (*pData++) = hi2c->Instance->RXDR;
 800a690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a692:	f808 3f01 	strb.w	r3, [r8, #1]!
      if((Sizetmp == 0)&&(Size!=0))
 800a696:	3d01      	subs	r5, #1
      Size--;   
 800a698:	b2b6      	uxth	r6, r6
      if((Sizetmp == 0)&&(Size!=0))
 800a69a:	d124      	bne.n	800a6e6 <HAL_I2C_Mem_Read+0xf2>
 800a69c:	b32e      	cbz	r6, 800a6ea <HAL_I2C_Mem_Read+0xf6>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800a69e:	4653      	mov	r3, sl
 800a6a0:	462a      	mov	r2, r5
 800a6a2:	2180      	movs	r1, #128	; 0x80
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f7ff fdc9 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 800a6aa:	bb38      	cbnz	r0, 800a6fc <HAL_I2C_Mem_Read+0x108>
        if(Size > 255)
 800a6ac:	2eff      	cmp	r6, #255	; 0xff
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a6ae:	9500      	str	r5, [sp, #0]
        if(Size > 255)
 800a6b0:	d910      	bls.n	800a6d4 <HAL_I2C_Mem_Read+0xe0>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a6b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6b6:	22ff      	movs	r2, #255	; 0xff
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f7ff fd64 	bl	800a188 <I2C_TransferConfig>
          Sizetmp = 255;
 800a6c0:	25ff      	movs	r5, #255	; 0xff
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 800a6c2:	4653      	mov	r3, sl
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	2104      	movs	r1, #4
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f7ff fdb7 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d0dc      	beq.n	800a68c <HAL_I2C_Mem_Read+0x98>
 800a6d2:	e013      	b.n	800a6fc <HAL_I2C_Mem_Read+0x108>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a6d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6d8:	b2f2      	uxtb	r2, r6
 800a6da:	4649      	mov	r1, r9
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f7ff fd53 	bl	800a188 <I2C_TransferConfig>
          Sizetmp = Size;
 800a6e2:	4635      	mov	r5, r6
 800a6e4:	e7ed      	b.n	800a6c2 <HAL_I2C_Mem_Read+0xce>
    }while(Size > 0);
 800a6e6:	2e00      	cmp	r6, #0
 800a6e8:	d1eb      	bne.n	800a6c2 <HAL_I2C_Mem_Read+0xce>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800a6ea:	2119      	movs	r1, #25
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7ff fdd9 	bl	800a2a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a6f2:	b128      	cbz	r0, 800a700 <HAL_I2C_Mem_Read+0x10c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6f4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	d08e      	beq.n	800a61a <HAL_I2C_Mem_Read+0x26>
        return HAL_TIMEOUT;
 800a6fc:	2003      	movs	r0, #3
 800a6fe:	e00d      	b.n	800a71c <HAL_I2C_Mem_Read+0x128>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	2220      	movs	r2, #32
 800a704:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a706:	6859      	ldr	r1, [r3, #4]
 800a708:	4a06      	ldr	r2, [pc, #24]	; (800a724 <HAL_I2C_Mem_Read+0x130>)
 800a70a:	400a      	ands	r2, r1
 800a70c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a70e:	2301      	movs	r3, #1
 800a710:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a714:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800a718:	e000      	b.n	800a71c <HAL_I2C_Mem_Read+0x128>
    return HAL_BUSY;
 800a71a:	2002      	movs	r0, #2
}
 800a71c:	b002      	add	sp, #8
 800a71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a722:	bf00      	nop
 800a724:	fe00e800 	.word	0xfe00e800

0800a728 <HAL_I2C_GetState>:
  return hi2c->State;
 800a728:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800a72c:	4770      	bx	lr

0800a72e <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a72e:	6803      	ldr	r3, [r0, #0]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a736:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a738:	6842      	ldr	r2, [r0, #4]
 800a73a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800a73e:	d10a      	bne.n	800a756 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 800a740:	6882      	ldr	r2, [r0, #8]
 800a742:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a746:	d002      	beq.n	800a74e <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
 800a748:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a74c:	d103      	bne.n	800a756 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a754:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a756:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a758:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a75c:	d107      	bne.n	800a76e <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          __HAL_SPI_RESET_CRC(hspi);
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a76c:	601a      	str	r2, [r3, #0]
        }
        
        hspi->State = HAL_SPI_STATE_READY;
 800a76e:	2301      	movs	r3, #1
 800a770:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a774:	2300      	movs	r3, #0
 800a776:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }
  
  return HAL_OK;      
}
 800a77a:	2003      	movs	r0, #3
 800a77c:	4770      	bx	lr

0800a77e <SPI_WaitFlagStateUntilTimeout>:
{
 800a77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a782:	4605      	mov	r5, r0
 800a784:	460f      	mov	r7, r1
 800a786:	4616      	mov	r6, r2
 800a788:	461c      	mov	r4, r3
  uint32_t tickstart = HAL_GetTick();
 800a78a:	f7fe fc5f 	bl	800904c <HAL_GetTick>
 800a78e:	4680      	mov	r8, r0
  while((hspi->Instance->SR & Flag) != State)
 800a790:	682b      	ldr	r3, [r5, #0]
 800a792:	689a      	ldr	r2, [r3, #8]
 800a794:	403a      	ands	r2, r7
 800a796:	42b2      	cmp	r2, r6
 800a798:	d00e      	beq.n	800a7b8 <SPI_WaitFlagStateUntilTimeout+0x3a>
    if(Timeout != HAL_MAX_DELAY)
 800a79a:	1c62      	adds	r2, r4, #1
 800a79c:	d0f9      	beq.n	800a792 <SPI_WaitFlagStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a79e:	b924      	cbnz	r4, 800a7aa <SPI_WaitFlagStateUntilTimeout+0x2c>
 800a7a0:	4628      	mov	r0, r5
}
 800a7a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a6:	f7ff bfc2 	b.w	800a72e <SPI_WaitFifoStateUntilTimeout.part.1>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a7aa:	f7fe fc4f 	bl	800904c <HAL_GetTick>
 800a7ae:	ebc8 0000 	rsb	r0, r8, r0
 800a7b2:	4284      	cmp	r4, r0
 800a7b4:	d2ec      	bcs.n	800a790 <SPI_WaitFlagStateUntilTimeout+0x12>
 800a7b6:	e7f3      	b.n	800a7a0 <SPI_WaitFlagStateUntilTimeout+0x22>
}
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a7be <SPI_WaitFifoStateUntilTimeout>:
{
 800a7be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a7c2:	4607      	mov	r7, r0
 800a7c4:	460e      	mov	r6, r1
 800a7c6:	4615      	mov	r5, r2
 800a7c8:	461c      	mov	r4, r3
  uint32_t tickstart = HAL_GetTick();
 800a7ca:	f7fe fc3f 	bl	800904c <HAL_GetTick>
 800a7ce:	4680      	mov	r8, r0
  while((hspi->Instance->SR & Flag) != State)
 800a7d0:	6839      	ldr	r1, [r7, #0]
 800a7d2:	688a      	ldr	r2, [r1, #8]
 800a7d4:	4032      	ands	r2, r6
 800a7d6:	42aa      	cmp	r2, r5
 800a7d8:	d015      	beq.n	800a806 <SPI_WaitFifoStateUntilTimeout+0x48>
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a7da:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 800a7de:	d104      	bne.n	800a7ea <SPI_WaitFifoStateUntilTimeout+0x2c>
 800a7e0:	b91d      	cbnz	r5, 800a7ea <SPI_WaitFifoStateUntilTimeout+0x2c>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800a7e2:	7b0b      	ldrb	r3, [r1, #12]
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	f88d 3007 	strb.w	r3, [sp, #7]
    if(Timeout != HAL_MAX_DELAY)
 800a7ea:	1c63      	adds	r3, r4, #1
 800a7ec:	d0f1      	beq.n	800a7d2 <SPI_WaitFifoStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a7ee:	b91c      	cbnz	r4, 800a7f8 <SPI_WaitFifoStateUntilTimeout+0x3a>
 800a7f0:	4638      	mov	r0, r7
 800a7f2:	f7ff ff9c 	bl	800a72e <SPI_WaitFifoStateUntilTimeout.part.1>
 800a7f6:	e007      	b.n	800a808 <SPI_WaitFifoStateUntilTimeout+0x4a>
 800a7f8:	f7fe fc28 	bl	800904c <HAL_GetTick>
 800a7fc:	ebc8 0000 	rsb	r0, r8, r0
 800a800:	4284      	cmp	r4, r0
 800a802:	d2e5      	bcs.n	800a7d0 <SPI_WaitFifoStateUntilTimeout+0x12>
 800a804:	e7f4      	b.n	800a7f0 <SPI_WaitFifoStateUntilTimeout+0x32>
  return HAL_OK;      
 800a806:	2000      	movs	r0, #0
}
 800a808:	b002      	add	sp, #8
 800a80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a80e <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800a80e:	b538      	push	{r3, r4, r5, lr}
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800a810:	2200      	movs	r2, #0
 800a812:	460b      	mov	r3, r1
{
 800a814:	460d      	mov	r5, r1
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800a816:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800a81a:	4604      	mov	r4, r0
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800a81c:	f7ff ffcf 	bl	800a7be <SPI_WaitFifoStateUntilTimeout>
 800a820:	4602      	mov	r2, r0
 800a822:	b968      	cbnz	r0, 800a840 <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800a824:	462b      	mov	r3, r5
 800a826:	2180      	movs	r1, #128	; 0x80
 800a828:	4620      	mov	r0, r4
 800a82a:	f7ff ffa8 	bl	800a77e <SPI_WaitFlagStateUntilTimeout>
 800a82e:	4602      	mov	r2, r0
 800a830:	b930      	cbnz	r0, 800a840 <SPI_EndRxTxTransaction+0x32>
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK) 
 800a832:	462b      	mov	r3, r5
 800a834:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a838:	4620      	mov	r0, r4
 800a83a:	f7ff ffc0 	bl	800a7be <SPI_WaitFifoStateUntilTimeout>
 800a83e:	b130      	cbz	r0, 800a84e <SPI_EndRxTxTransaction+0x40>
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800a840:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800a844:	f043 0320 	orr.w	r3, r3, #32
 800a848:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 800a84c:	2003      	movs	r0, #3
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800a84e:	bd38      	pop	{r3, r4, r5, pc}

0800a850 <HAL_SPI_MspInit>:
 800a850:	4770      	bx	lr

0800a852 <HAL_SPI_Init>:
{
 800a852:	b570      	push	{r4, r5, r6, lr}
  if(hspi == NULL)
 800a854:	4604      	mov	r4, r0
 800a856:	2800      	cmp	r0, #0
 800a858:	d04c      	beq.n	800a8f4 <HAL_SPI_Init+0xa2>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a85a:	2302      	movs	r3, #2
 800a85c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_MspInit(hspi);
 800a860:	f7ff fff6 	bl	800a850 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800a864:	6821      	ldr	r1, [r4, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a866:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800a868:	680b      	ldr	r3, [r1, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a86a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800a86e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a872:	600b      	str	r3, [r1, #0]
 800a874:	f04f 0300 	mov.w	r3, #0
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a878:	d903      	bls.n	800a882 <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a87a:	4618      	mov	r0, r3
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800a87c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800a880:	e001      	b.n	800a886 <HAL_SPI_Init+0x34>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a882:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800a886:	bf18      	it	ne
 800a888:	62a3      	strne	r3, [r4, #40]	; 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a88a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a88c:	b92b      	cbnz	r3, 800a89a <HAL_SPI_Init+0x48>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a88e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a892:	bf8c      	ite	hi
 800a894:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a896:	2301      	movls	r3, #1
 800a898:	6323      	str	r3, [r4, #48]	; 0x30
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800a89a:	68a5      	ldr	r5, [r4, #8]
 800a89c:	6866      	ldr	r6, [r4, #4]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800a89e:	69a3      	ldr	r3, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800a8a0:	432e      	orrs	r6, r5
 800a8a2:	6925      	ldr	r5, [r4, #16]
 800a8a4:	432e      	orrs	r6, r5
 800a8a6:	6965      	ldr	r5, [r4, #20]
 800a8a8:	432e      	orrs	r6, r5
 800a8aa:	69e5      	ldr	r5, [r4, #28]
 800a8ac:	432e      	orrs	r6, r5
 800a8ae:	6a25      	ldr	r5, [r4, #32]
 800a8b0:	432e      	orrs	r6, r5
 800a8b2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a8b4:	432e      	orrs	r6, r5
 800a8b6:	f403 7500 	and.w	r5, r3, #512	; 0x200
 800a8ba:	4335      	orrs	r5, r6
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 800a8bc:	600d      	str	r5, [r1, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a8be:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800a8c0:	2d02      	cmp	r5, #2
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800a8c2:	bf02      	ittt	eq
 800a8c4:	680d      	ldreq	r5, [r1, #0]
 800a8c6:	f445 6500 	orreq.w	r5, r5, #2048	; 0x800
 800a8ca:	600d      	streq	r5, [r1, #0]
                         hspi->Init.DataSize ) | frxth;
 800a8cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a8ce:	432a      	orrs	r2, r5
 800a8d0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800a8d2:	0c1b      	lsrs	r3, r3, #16
 800a8d4:	4315      	orrs	r5, r2
 800a8d6:	f003 0204 	and.w	r2, r3, #4
 800a8da:	ea45 0302 	orr.w	r3, r5, r2
 800a8de:	4303      	orrs	r3, r0
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800a8e0:	604b      	str	r3, [r1, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800a8e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a8e4:	610b      	str	r3, [r1, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8e6:	2000      	movs	r0, #0
  hspi->State= HAL_SPI_STATE_READY;
 800a8e8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8ea:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 800a8ee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a8f4:	2001      	movs	r0, #1
}
 800a8f6:	bd70      	pop	{r4, r5, r6, pc}

0800a8f8 <HAL_SPI_MspDeInit>:
 800a8f8:	4770      	bx	lr

0800a8fa <HAL_SPI_DeInit>:
{
 800a8fa:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	b188      	cbz	r0, 800a924 <HAL_SPI_DeInit+0x2a>
  __HAL_SPI_DISABLE(hspi);
 800a900:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800a902:	2302      	movs	r3, #2
 800a904:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800a908:	6813      	ldr	r3, [r2, #0]
 800a90a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a90e:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800a910:	f7ff fff2 	bl	800a8f8 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a914:	2000      	movs	r0, #0
 800a916:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State = HAL_SPI_STATE_RESET;
 800a91a:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a91e:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  return HAL_OK;
 800a922:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800a924:	2001      	movs	r0, #1
}
 800a926:	bd10      	pop	{r4, pc}

0800a928 <HAL_SPI_TransmitReceive>:
{
 800a928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->State != HAL_SPI_STATE_READY) 
 800a92c:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
{
 800a930:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800a932:	f04f 0b00 	mov.w	fp, #0
  if(hspi->State != HAL_SPI_STATE_READY) 
 800a936:	2d01      	cmp	r5, #1
{
 800a938:	4604      	mov	r4, r0
 800a93a:	4689      	mov	r9, r1
 800a93c:	4692      	mov	sl, r2
 800a93e:	4698      	mov	r8, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800a940:	f8ad b006 	strh.w	fp, [sp, #6]
  if(hspi->State != HAL_SPI_STATE_READY) 
 800a944:	d001      	beq.n	800a94a <HAL_SPI_TransmitReceive+0x22>
    return HAL_BUSY;
 800a946:	2002      	movs	r0, #2
 800a948:	e12f      	b.n	800abaa <HAL_SPI_TransmitReceive+0x282>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800a94a:	2900      	cmp	r1, #0
 800a94c:	f000 812a 	beq.w	800aba4 <HAL_SPI_TransmitReceive+0x27c>
 800a950:	2a00      	cmp	r2, #0
 800a952:	f000 8127 	beq.w	800aba4 <HAL_SPI_TransmitReceive+0x27c>
 800a956:	2b00      	cmp	r3, #0
 800a958:	f000 8124 	beq.w	800aba4 <HAL_SPI_TransmitReceive+0x27c>
  tickstart = HAL_GetTick();
 800a95c:	f7fe fb76 	bl	800904c <HAL_GetTick>
  __HAL_LOCK(hspi); 
 800a960:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800a964:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800a966:	4607      	mov	r7, r0
  __HAL_LOCK(hspi); 
 800a968:	d0ed      	beq.n	800a946 <HAL_SPI_TransmitReceive+0x1e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a96a:	2305      	movs	r3, #5
 800a96c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a970:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  __HAL_LOCK(hspi); 
 800a972:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a97a:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  hspi->pRxBuffPtr  = pRxData;
 800a97e:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a982:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a986:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800a98a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a98e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 800a992:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
 800a996:	6822      	ldr	r2, [r4, #0]
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a998:	d107      	bne.n	800a9aa <HAL_SPI_TransmitReceive+0x82>
    __HAL_SPI_RESET_CRC(hspi);
 800a99a:	6813      	ldr	r3, [r2, #0]
 800a99c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	6813      	ldr	r3, [r2, #0]
 800a9a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a9a8:	6013      	str	r3, [r2, #0]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800a9aa:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9ac:	6853      	ldr	r3, [r2, #4]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800a9ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a9b2:	d802      	bhi.n	800a9ba <HAL_SPI_TransmitReceive+0x92>
 800a9b4:	f1b8 0f01 	cmp.w	r8, #1
 800a9b8:	d902      	bls.n	800a9c0 <HAL_SPI_TransmitReceive+0x98>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9be:	e001      	b.n	800a9c4 <HAL_SPI_TransmitReceive+0x9c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9c4:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9c6:	6813      	ldr	r3, [r2, #0]
 800a9c8:	0658      	lsls	r0, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800a9ca:	bf5e      	ittt	pl
 800a9cc:	6813      	ldrpl	r3, [r2, #0]
 800a9ce:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800a9d2:	6013      	strpl	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a9d8:	d949      	bls.n	800aa6e <HAL_SPI_TransmitReceive+0x146>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800a9da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a9dc:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d033      	beq.n	800aa4c <HAL_SPI_TransmitReceive+0x124>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800a9e4:	6822      	ldr	r2, [r4, #0]
 800a9e6:	6891      	ldr	r1, [r2, #8]
 800a9e8:	0789      	lsls	r1, r1, #30
 800a9ea:	d510      	bpl.n	800aa0e <HAL_SPI_TransmitReceive+0xe6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a9ee:	3b01      	subs	r3, #1
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9f0:	f831 5b02 	ldrh.w	r5, [r1], #2
 800a9f4:	60d5      	str	r5, [r2, #12]
        hspi->TxXferCount--;
 800a9f6:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9f8:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a9fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800a9fc:	b93b      	cbnz	r3, 800aa0e <HAL_SPI_TransmitReceive+0xe6>
 800a9fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800aa04:	bf02      	ittt	eq
 800aa06:	6813      	ldreq	r3, [r2, #0]
 800aa08:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800aa0c:	6013      	streq	r3, [r2, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800aa0e:	b168      	cbz	r0, 800aa2c <HAL_SPI_TransmitReceive+0x104>
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	07d2      	lsls	r2, r2, #31
 800aa16:	d509      	bpl.n	800aa2c <HAL_SPI_TransmitReceive+0x104>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa1c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa20:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800aa22:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800aa26:	3b01      	subs	r3, #1
 800aa28:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if(Timeout != HAL_MAX_DELAY)
 800aa2c:	1c75      	adds	r5, r6, #1
 800aa2e:	d0d4      	beq.n	800a9da <HAL_SPI_TransmitReceive+0xb2>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800aa30:	b936      	cbnz	r6, 800aa40 <HAL_SPI_TransmitReceive+0x118>
          hspi->State = HAL_SPI_STATE_READY;
 800aa32:	2301      	movs	r3, #1
 800aa34:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800aa3e:	e0b3      	b.n	800aba8 <HAL_SPI_TransmitReceive+0x280>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800aa40:	f7fe fb04 	bl	800904c <HAL_GetTick>
 800aa44:	1bc0      	subs	r0, r0, r7
 800aa46:	4286      	cmp	r6, r0
 800aa48:	d2c7      	bcs.n	800a9da <HAL_SPI_TransmitReceive+0xb2>
 800aa4a:	e7f2      	b.n	800aa32 <HAL_SPI_TransmitReceive+0x10a>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d1df      	bne.n	800aa10 <HAL_SPI_TransmitReceive+0xe8>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800aa50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa56:	f040 8085 	bne.w	800ab64 <HAL_SPI_TransmitReceive+0x23c>
 800aa5a:	e058      	b.n	800ab0e <HAL_SPI_TransmitReceive+0x1e6>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800aa5c:	6821      	ldr	r1, [r4, #0]
 800aa5e:	688b      	ldr	r3, [r1, #8]
 800aa60:	0798      	lsls	r0, r3, #30
 800aa62:	d408      	bmi.n	800aa76 <HAL_SPI_TransmitReceive+0x14e>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800aa64:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800aa68:	bb3b      	cbnz	r3, 800aaba <HAL_SPI_TransmitReceive+0x192>
      if(Timeout != HAL_MAX_DELAY)
 800aa6a:	1c73      	adds	r3, r6, #1
 800aa6c:	d147      	bne.n	800aafe <HAL_SPI_TransmitReceive+0x1d6>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800aa6e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800aa70:	2a00      	cmp	r2, #0
 800aa72:	d1f3      	bne.n	800aa5c <HAL_SPI_TransmitReceive+0x134>
 800aa74:	e01d      	b.n	800aab2 <HAL_SPI_TransmitReceive+0x18a>
        if(hspi->TxXferCount > 2)
 800aa76:	2a02      	cmp	r2, #2
 800aa78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aa7a:	d906      	bls.n	800aa8a <HAL_SPI_TransmitReceive+0x162>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800aa7c:	f833 0b02 	ldrh.w	r0, [r3], #2
 800aa80:	60c8      	str	r0, [r1, #12]
          hspi->TxXferCount -= 2;
 800aa82:	3a02      	subs	r2, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa84:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800aa86:	87e2      	strh	r2, [r4, #62]	; 0x3e
 800aa88:	e006      	b.n	800aa98 <HAL_SPI_TransmitReceive+0x170>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800aa8a:	1c5a      	adds	r2, r3, #1
 800aa8c:	63a2      	str	r2, [r4, #56]	; 0x38
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800aa92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800aa94:	3b01      	subs	r3, #1
 800aa96:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800aa98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e2      	bne.n	800aa64 <HAL_SPI_TransmitReceive+0x13c>
 800aa9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aaa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800aaa4:	bf01      	itttt	eq
 800aaa6:	6822      	ldreq	r2, [r4, #0]
 800aaa8:	6813      	ldreq	r3, [r2, #0]
 800aaaa:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800aaae:	6013      	streq	r3, [r2, #0]
 800aab0:	e7d8      	b.n	800aa64 <HAL_SPI_TransmitReceive+0x13c>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800aab2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0ca      	beq.n	800aa50 <HAL_SPI_TransmitReceive+0x128>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800aaba:	6822      	ldr	r2, [r4, #0]
 800aabc:	6891      	ldr	r1, [r2, #8]
 800aabe:	07c9      	lsls	r1, r1, #31
 800aac0:	d5d3      	bpl.n	800aa6a <HAL_SPI_TransmitReceive+0x142>
        if(hspi->RxXferCount > 1)
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aac6:	d910      	bls.n	800aaea <HAL_SPI_TransmitReceive+0x1c2>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aac8:	68d1      	ldr	r1, [r2, #12]
 800aaca:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aace:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800aad0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800aad4:	3b02      	subs	r3, #2
 800aad6:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 800aad8:	2b01      	cmp	r3, #1
          hspi->RxXferCount -= 2;
 800aada:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800aade:	d8c4      	bhi.n	800aa6a <HAL_SPI_TransmitReceive+0x142>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aae0:	6853      	ldr	r3, [r2, #4]
 800aae2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aae6:	6053      	str	r3, [r2, #4]
 800aae8:	e7bf      	b.n	800aa6a <HAL_SPI_TransmitReceive+0x142>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800aaea:	1c59      	adds	r1, r3, #1
 800aaec:	6421      	str	r1, [r4, #64]	; 0x40
 800aaee:	7b12      	ldrb	r2, [r2, #12]
 800aaf0:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800aaf2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800aafc:	e7b5      	b.n	800aa6a <HAL_SPI_TransmitReceive+0x142>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800aafe:	2e00      	cmp	r6, #0
 800ab00:	d097      	beq.n	800aa32 <HAL_SPI_TransmitReceive+0x10a>
 800ab02:	f7fe faa3 	bl	800904c <HAL_GetTick>
 800ab06:	1bc0      	subs	r0, r0, r7
 800ab08:	4286      	cmp	r6, r0
 800ab0a:	d2b0      	bcs.n	800aa6e <HAL_SPI_TransmitReceive+0x146>
 800ab0c:	e791      	b.n	800aa32 <HAL_SPI_TransmitReceive+0x10a>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 800ab0e:	2202      	movs	r2, #2
 800ab10:	4633      	mov	r3, r6
 800ab12:	4611      	mov	r1, r2
 800ab14:	4620      	mov	r0, r4
 800ab16:	f7ff fe32 	bl	800a77e <SPI_WaitFlagStateUntilTimeout>
 800ab1a:	b128      	cbz	r0, 800ab28 <HAL_SPI_TransmitReceive+0x200>
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800ab1c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800ab20:	f043 0302 	orr.w	r3, r3, #2
 800ab24:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ab28:	68e3      	ldr	r3, [r4, #12]
 800ab2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	d102      	bne.n	800ab38 <HAL_SPI_TransmitReceive+0x210>
      tmpreg = hspi->Instance->DR;
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	e013      	b.n	800ab60 <HAL_SPI_TransmitReceive+0x238>
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800ab38:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800ab3a:	7b1b      	ldrb	r3, [r3, #12]
 800ab3c:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800ab40:	2a02      	cmp	r2, #2
 800ab42:	d10f      	bne.n	800ab64 <HAL_SPI_TransmitReceive+0x23c>
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 800ab44:	4633      	mov	r3, r6
 800ab46:	4611      	mov	r1, r2
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f7ff fe18 	bl	800a77e <SPI_WaitFlagStateUntilTimeout>
 800ab4e:	b128      	cbz	r0, 800ab5c <HAL_SPI_TransmitReceive+0x234>
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800ab50:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800ab54:	f043 0302 	orr.w	r3, r3, #2
 800ab58:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	7b1b      	ldrb	r3, [r3, #12]
 800ab60:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800ab64:	4631      	mov	r1, r6
 800ab66:	4620      	mov	r0, r4
 800ab68:	f7ff fe51 	bl	800a80e <SPI_EndRxTxTransaction>
 800ab6c:	b9e0      	cbnz	r0, 800aba8 <HAL_SPI_TransmitReceive+0x280>
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800ab6e:	6825      	ldr	r5, [r4, #0]
 800ab70:	68aa      	ldr	r2, [r5, #8]
  hspi->State = HAL_SPI_STATE_READY;
 800ab72:	2301      	movs	r3, #1
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800ab74:	f012 0110 	ands.w	r1, r2, #16
  hspi->State = HAL_SPI_STATE_READY;
 800ab78:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800ab7c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800ab80:	d00a      	beq.n	800ab98 <HAL_SPI_TransmitReceive+0x270>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800ab82:	f042 0202 	orr.w	r2, r2, #2
 800ab86:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800ab8a:	f06f 0210 	mvn.w	r2, #16
 800ab8e:	60aa      	str	r2, [r5, #8]
    __HAL_UNLOCK(hspi);
 800ab90:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800ab94:	4618      	mov	r0, r3
 800ab96:	e008      	b.n	800abaa <HAL_SPI_TransmitReceive+0x282>
    return HAL_BUSY;
 800ab98:	1c10      	adds	r0, r2, #0
  __HAL_UNLOCK(hspi);
 800ab9a:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    return HAL_BUSY;
 800ab9e:	bf18      	it	ne
 800aba0:	2001      	movne	r0, #1
 800aba2:	e002      	b.n	800abaa <HAL_SPI_TransmitReceive+0x282>
    return HAL_ERROR;
 800aba4:	4628      	mov	r0, r5
 800aba6:	e000      	b.n	800abaa <HAL_SPI_TransmitReceive+0x282>
    return HAL_TIMEOUT;
 800aba8:	2003      	movs	r0, #3
}
 800abaa:	b003      	add	sp, #12
 800abac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abb0 <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 800abb0:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 800abb4:	4770      	bx	lr

0800abb6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800abb6:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800abb8:	b180      	cbz	r0, 800abdc <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800abba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800abbe:	b113      	cbz	r3, 800abc6 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800abc0:	2300      	movs	r3, #0
 800abc2:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800abc6:	b109      	cbz	r1, 800abcc <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800abc8:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800abcc:	2301      	movs	r3, #1
 800abce:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800abd2:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800abd4:	f000 fc7e 	bl	800b4d4 <USBD_LL_Init>
  
  return USBD_OK; 
 800abd8:	2000      	movs	r0, #0
 800abda:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800abdc:	2002      	movs	r0, #2
}
 800abde:	bd08      	pop	{r3, pc}

0800abe0 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800abe0:	b119      	cbz	r1, 800abea <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 800abe2:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800abe6:	2000      	movs	r0, #0
 800abe8:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800abea:	2002      	movs	r0, #2
  }
  
  return status;
}
 800abec:	4770      	bx	lr

0800abee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800abee:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800abf0:	f000 fcae 	bl	800b550 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800abf4:	2000      	movs	r0, #0
 800abf6:	bd08      	pop	{r3, pc}

0800abf8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800abf8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800abfa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800abfe:	b90b      	cbnz	r3, 800ac04 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800ac00:	2002      	movs	r0, #2
 800ac02:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4798      	blx	r3
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d1f9      	bne.n	800ac00 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800ac0c:	bd08      	pop	{r3, pc}

0800ac0e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ac0e:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800ac10:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	4798      	blx	r3
  return USBD_OK;
}
 800ac18:	2000      	movs	r0, #0
 800ac1a:	bd08      	pop	{r3, pc}

0800ac1c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac20:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800ac24:	4628      	mov	r0, r5
 800ac26:	f000 f8ca 	bl	800adbe <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800ac2a:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800ac2c:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800ac30:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800ac34:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800ac38:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800ac3c:	f001 031f 	and.w	r3, r1, #31
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d00c      	beq.n	800ac5e <USBD_LL_SetupStage+0x42>
 800ac44:	d306      	bcc.n	800ac54 <USBD_LL_SetupStage+0x38>
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d10e      	bne.n	800ac68 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f000 f9f7 	bl	800b040 <USBD_StdEPReq>
    break;
 800ac52:	e00e      	b.n	800ac72 <USBD_LL_SetupStage+0x56>
    USBD_StdDevReq (pdev, &pdev->request);
 800ac54:	4629      	mov	r1, r5
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 f8d0 	bl	800adfc <USBD_StdDevReq>
    break;
 800ac5c:	e009      	b.n	800ac72 <USBD_LL_SetupStage+0x56>
    USBD_StdItfReq(pdev, &pdev->request);
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 f9d5 	bl	800b010 <USBD_StdItfReq>
    break;
 800ac66:	e004      	b.n	800ac72 <USBD_LL_SetupStage+0x56>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800ac68:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f000 fc87 	bl	800b580 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 800ac72:	2000      	movs	r0, #0
 800ac74:	bd38      	pop	{r3, r4, r5, pc}

0800ac76 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800ac76:	b538      	push	{r3, r4, r5, lr}
 800ac78:	4604      	mov	r4, r0
 800ac7a:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800ac7c:	bb09      	cbnz	r1, 800acc2 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac7e:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d126      	bne.n	800acd4 <USBD_LL_DataOutStage+0x5e>
    {
      if(pep->rem_length > pep->maxpacket)
 800ac86:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800ac8a:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800ac8e:	4291      	cmp	r1, r2
 800ac90:	d90a      	bls.n	800aca8 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 800ac92:	1a8b      	subs	r3, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 800ac94:	429a      	cmp	r2, r3
 800ac96:	bf28      	it	cs
 800ac98:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800ac9a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800ac9e:	b292      	uxth	r2, r2
 800aca0:	4629      	mov	r1, r5
 800aca2:	f000 fa66 	bl	800b172 <USBD_CtlContinueRx>
 800aca6:	e015      	b.n	800acd4 <USBD_LL_DataOutStage+0x5e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800aca8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	b123      	cbz	r3, 800acba <USBD_LL_DataOutStage+0x44>
 800acb0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800acb4:	2a03      	cmp	r2, #3
 800acb6:	d100      	bne.n	800acba <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800acb8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800acba:	4620      	mov	r0, r4
 800acbc:	f000 fa61 	bl	800b182 <USBD_CtlSendStatus>
 800acc0:	e008      	b.n	800acd4 <USBD_LL_DataOutStage+0x5e>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800acc2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	b123      	cbz	r3, 800acd4 <USBD_LL_DataOutStage+0x5e>
 800acca:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800acce:	2a03      	cmp	r2, #3
 800acd0:	d100      	bne.n	800acd4 <USBD_LL_DataOutStage+0x5e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800acd2:	4798      	blx	r3
  }  
  return USBD_OK;
}
 800acd4:	2000      	movs	r0, #0
 800acd6:	bd38      	pop	{r3, r4, r5, pc}

0800acd8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4604      	mov	r4, r0
 800acdc:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800acde:	bba9      	cbnz	r1, 800ad4c <USBD_LL_DataInStage+0x74>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800ace0:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d129      	bne.n	800ad3c <USBD_LL_DataInStage+0x64>
    {
      if(pep->rem_length > pep->maxpacket)
 800ace8:	69c2      	ldr	r2, [r0, #28]
 800acea:	6a03      	ldr	r3, [r0, #32]
 800acec:	429a      	cmp	r2, r3
 800acee:	d906      	bls.n	800acfe <USBD_LL_DataInStage+0x26>
      {
        pep->rem_length -=  pep->maxpacket;
 800acf0:	1ad2      	subs	r2, r2, r3
 800acf2:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800acf4:	4629      	mov	r1, r5
 800acf6:	b292      	uxth	r2, r2
 800acf8:	f000 fa24 	bl	800b144 <USBD_CtlContinueSendData>
 800acfc:	e01e      	b.n	800ad3c <USBD_LL_DataInStage+0x64>
                                  pdata, 
                                  pep->rem_length);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800acfe:	6982      	ldr	r2, [r0, #24]
 800ad00:	fbb2 f5f3 	udiv	r5, r2, r3
 800ad04:	fb03 2515 	mls	r5, r3, r5, r2
 800ad08:	b95d      	cbnz	r5, 800ad22 <USBD_LL_DataInStage+0x4a>
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d809      	bhi.n	800ad22 <USBD_LL_DataInStage+0x4a>
           (pep->total_length >= pep->maxpacket) &&
 800ad0e:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d205      	bcs.n	800ad22 <USBD_LL_DataInStage+0x4a>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800ad16:	462a      	mov	r2, r5
 800ad18:	f000 fa14 	bl	800b144 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800ad1c:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800ad20:	e00c      	b.n	800ad3c <USBD_LL_DataInStage+0x64>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ad22:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	b12b      	cbz	r3, 800ad36 <USBD_LL_DataInStage+0x5e>
 800ad2a:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800ad2e:	2a03      	cmp	r2, #3
 800ad30:	d101      	bne.n	800ad36 <USBD_LL_DataInStage+0x5e>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800ad32:	4620      	mov	r0, r4
 800ad34:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800ad36:	4620      	mov	r0, r4
 800ad38:	f000 fa2e 	bl	800b198 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800ad3c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d10c      	bne.n	800ad5e <USBD_LL_DataInStage+0x86>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800ad44:	2300      	movs	r3, #0
 800ad46:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 800ad4a:	e008      	b.n	800ad5e <USBD_LL_DataInStage+0x86>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800ad4c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	b123      	cbz	r3, 800ad5e <USBD_LL_DataInStage+0x86>
 800ad54:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800ad58:	2a03      	cmp	r2, #3
 800ad5a:	d100      	bne.n	800ad5e <USBD_LL_DataInStage+0x86>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800ad5c:	4798      	blx	r3
  }  
  return USBD_OK;
}
 800ad5e:	2000      	movs	r0, #0
 800ad60:	bd38      	pop	{r3, r4, r5, pc}

0800ad62 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800ad62:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800ad64:	2200      	movs	r2, #0
{
 800ad66:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800ad68:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad6a:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800ad6c:	2340      	movs	r3, #64	; 0x40
 800ad6e:	f000 fbf6 	bl	800b55e <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800ad72:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad74:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800ad78:	2200      	movs	r2, #0
 800ad7a:	2180      	movs	r1, #128	; 0x80
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 fbee 	bl	800b55e <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad82:	2301      	movs	r3, #1
 800ad84:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800ad88:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad8c:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800ad8e:	b12b      	cbz	r3, 800ad9c <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800ad90:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800ad94:	7921      	ldrb	r1, [r4, #4]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	4620      	mov	r0, r4
 800ad9a:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}

0800ada0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800ada0:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800ada2:	2000      	movs	r0, #0
 800ada4:	4770      	bx	lr

0800ada6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800ada6:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800adac:	2a03      	cmp	r2, #3
 800adae:	d104      	bne.n	800adba <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800adb0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	b103      	cbz	r3, 800adba <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800adb8:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800adba:	2000      	movs	r0, #0
 800adbc:	bd08      	pop	{r3, pc}

0800adbe <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 800adbe:	780b      	ldrb	r3, [r1, #0]
 800adc0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800adc2:	784b      	ldrb	r3, [r1, #1]
 800adc4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800adc6:	78ca      	ldrb	r2, [r1, #3]
 800adc8:	788b      	ldrb	r3, [r1, #2]
 800adca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800adce:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800add0:	794a      	ldrb	r2, [r1, #5]
 800add2:	790b      	ldrb	r3, [r1, #4]
 800add4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800add8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800adda:	79ca      	ldrb	r2, [r1, #7]
 800addc:	798b      	ldrb	r3, [r1, #6]
 800adde:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ade2:	80c3      	strh	r3, [r0, #6]
 800ade4:	4770      	bx	lr

0800ade6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ade6:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 800ade8:	2180      	movs	r1, #128	; 0x80
{
 800adea:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800adec:	f000 fbc8 	bl	800b580 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800adf0:	4620      	mov	r0, r4
 800adf2:	2100      	movs	r1, #0
}
 800adf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800adf8:	f000 bbc2 	b.w	800b580 <USBD_LL_StallEP>

0800adfc <USBD_StdDevReq>:
{
 800adfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bRequest) 
 800adfe:	784b      	ldrb	r3, [r1, #1]
{
 800ae00:	4604      	mov	r4, r0
 800ae02:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800ae04:	2b09      	cmp	r3, #9
 800ae06:	f200 80f9 	bhi.w	800affc <USBD_StdDevReq+0x200>
 800ae0a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ae0e:	00cb      	.short	0x00cb
 800ae10:	00f700e2 	.word	0x00f700e2
 800ae14:	00f700de 	.word	0x00f700de
 800ae18:	000a0075 	.word	0x000a0075
 800ae1c:	00bb00f7 	.word	0x00bb00f7
 800ae20:	0091      	.short	0x0091
  switch (req->wValue >> 8)
 800ae22:	884b      	ldrh	r3, [r1, #2]
 800ae24:	0a1a      	lsrs	r2, r3, #8
 800ae26:	3a01      	subs	r2, #1
 800ae28:	2a06      	cmp	r2, #6
 800ae2a:	f200 80e7 	bhi.w	800affc <USBD_StdDevReq+0x200>
 800ae2e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ae32:	0007      	.short	0x0007
 800ae34:	0017000b 	.word	0x0017000b
 800ae38:	00e500e5 	.word	0x00e500e5
 800ae3c:	0047003c 	.word	0x0047003c
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae40:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	e017      	b.n	800ae78 <USBD_StdDevReq+0x7c>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800ae48:	7c02      	ldrb	r2, [r0, #16]
 800ae4a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ae4e:	b90a      	cbnz	r2, 800ae54 <USBD_StdDevReq+0x58>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ae50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae52:	e000      	b.n	800ae56 <USBD_StdDevReq+0x5a>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae56:	f10d 0006 	add.w	r0, sp, #6
 800ae5a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	e03a      	b.n	800aed6 <USBD_StdDevReq+0xda>
    switch ((uint8_t)(req->wValue))
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b05      	cmp	r3, #5
 800ae64:	f200 80ca 	bhi.w	800affc <USBD_StdDevReq+0x200>
 800ae68:	e8df f003 	tbb	[pc, r3]
 800ae6c:	130f0b03 	.word	0x130f0b03
 800ae70:	1b17      	.short	0x1b17
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800ae72:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	7c20      	ldrb	r0, [r4, #16]
 800ae7a:	f10d 0106 	add.w	r1, sp, #6
 800ae7e:	4798      	blx	r3
 800ae80:	e02a      	b.n	800aed8 <USBD_StdDevReq+0xdc>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae82:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	e7f6      	b.n	800ae78 <USBD_StdDevReq+0x7c>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae8a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	e7f2      	b.n	800ae78 <USBD_StdDevReq+0x7c>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae92:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	e7ee      	b.n	800ae78 <USBD_StdDevReq+0x7c>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae9a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800ae9e:	695b      	ldr	r3, [r3, #20]
 800aea0:	e7ea      	b.n	800ae78 <USBD_StdDevReq+0x7c>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aea2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	e7e6      	b.n	800ae78 <USBD_StdDevReq+0x7c>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800aeaa:	7c03      	ldrb	r3, [r0, #16]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f040 80a5 	bne.w	800affc <USBD_StdDevReq+0x200>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aeb2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800aeb6:	f10d 0006 	add.w	r0, sp, #6
 800aeba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aebc:	4798      	blx	r3
 800aebe:	e00b      	b.n	800aed8 <USBD_StdDevReq+0xdc>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800aec0:	7c03      	ldrb	r3, [r0, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f040 809a 	bne.w	800affc <USBD_StdDevReq+0x200>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aec8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800aecc:	f10d 0006 	add.w	r0, sp, #6
 800aed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aed4:	2307      	movs	r3, #7
 800aed6:	7043      	strb	r3, [r0, #1]
  if((len != 0)&& (req->wLength != 0))
 800aed8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aedc:	2a00      	cmp	r2, #0
 800aede:	f000 8091 	beq.w	800b004 <USBD_StdDevReq+0x208>
 800aee2:	88eb      	ldrh	r3, [r5, #6]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 808d 	beq.w	800b004 <USBD_StdDevReq+0x208>
    len = MIN(len , req->wLength);
 800aeea:	429a      	cmp	r2, r3
 800aeec:	bf28      	it	cs
 800aeee:	461a      	movcs	r2, r3
 800aef0:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800aef4:	4601      	mov	r1, r0
 800aef6:	e064      	b.n	800afc2 <USBD_StdDevReq+0x1c6>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800aef8:	888b      	ldrh	r3, [r1, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d17e      	bne.n	800affc <USBD_StdDevReq+0x200>
 800aefe:	88cb      	ldrh	r3, [r1, #6]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d17b      	bne.n	800affc <USBD_StdDevReq+0x200>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800af04:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800af08:	788e      	ldrb	r6, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800af0a:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800af0c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800af10:	d074      	beq.n	800affc <USBD_StdDevReq+0x200>
      pdev->dev_address = dev_addr;
 800af12:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800af16:	4631      	mov	r1, r6
 800af18:	f000 fb53 	bl	800b5c2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 f930 	bl	800b182 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800af22:	b10e      	cbz	r6, 800af28 <USBD_StdDevReq+0x12c>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800af24:	2302      	movs	r3, #2
 800af26:	e000      	b.n	800af2a <USBD_StdDevReq+0x12e>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800af28:	2301      	movs	r3, #1
 800af2a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 800af2e:	e069      	b.n	800b004 <USBD_StdDevReq+0x208>
  cfgidx = (uint8_t)(req->wValue);                 
 800af30:	7889      	ldrb	r1, [r1, #2]
 800af32:	4e36      	ldr	r6, [pc, #216]	; (800b00c <USBD_StdDevReq+0x210>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800af34:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800af36:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800af38:	d860      	bhi.n	800affc <USBD_StdDevReq+0x200>
    switch (pdev->dev_state) 
 800af3a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d002      	beq.n	800af48 <USBD_StdDevReq+0x14c>
 800af42:	2b03      	cmp	r3, #3
 800af44:	d008      	beq.n	800af58 <USBD_StdDevReq+0x15c>
 800af46:	e059      	b.n	800affc <USBD_StdDevReq+0x200>
      if (cfgidx) 
 800af48:	2900      	cmp	r1, #0
 800af4a:	d053      	beq.n	800aff4 <USBD_StdDevReq+0x1f8>
        pdev->dev_config = cfgidx;
 800af4c:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800af4e:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800af50:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800af52:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 800af56:	e00f      	b.n	800af78 <USBD_StdDevReq+0x17c>
      if (cfgidx == 0) 
 800af58:	b931      	cbnz	r1, 800af68 <USBD_StdDevReq+0x16c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af5a:	2302      	movs	r3, #2
 800af5c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800af60:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800af62:	f7ff fe54 	bl	800ac0e <USBD_ClrClassConfig>
 800af66:	e045      	b.n	800aff4 <USBD_StdDevReq+0x1f8>
      else  if (cfgidx != pdev->dev_config) 
 800af68:	6841      	ldr	r1, [r0, #4]
 800af6a:	2901      	cmp	r1, #1
 800af6c:	d042      	beq.n	800aff4 <USBD_StdDevReq+0x1f8>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800af6e:	b2c9      	uxtb	r1, r1
 800af70:	f7ff fe4d 	bl	800ac0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af74:	7831      	ldrb	r1, [r6, #0]
 800af76:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800af78:	4620      	mov	r0, r4
 800af7a:	f7ff fe3d 	bl	800abf8 <USBD_SetClassConfig>
 800af7e:	2802      	cmp	r0, #2
 800af80:	d138      	bne.n	800aff4 <USBD_StdDevReq+0x1f8>
 800af82:	e03b      	b.n	800affc <USBD_StdDevReq+0x200>
  if (req->wLength != 1) 
 800af84:	88ca      	ldrh	r2, [r1, #6]
 800af86:	2a01      	cmp	r2, #1
 800af88:	d138      	bne.n	800affc <USBD_StdDevReq+0x200>
    switch (pdev->dev_state )  
 800af8a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d003      	beq.n	800af9a <USBD_StdDevReq+0x19e>
 800af92:	2b03      	cmp	r3, #3
 800af94:	d132      	bne.n	800affc <USBD_StdDevReq+0x200>
      USBD_CtlSendData (pdev, 
 800af96:	1d01      	adds	r1, r0, #4
 800af98:	e013      	b.n	800afc2 <USBD_StdDevReq+0x1c6>
      pdev->dev_default_config = 0;
 800af9a:	4601      	mov	r1, r0
 800af9c:	2300      	movs	r3, #0
 800af9e:	f841 3f08 	str.w	r3, [r1, #8]!
 800afa2:	e00e      	b.n	800afc2 <USBD_StdDevReq+0x1c6>
  switch (pdev->dev_state) 
 800afa4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800afa8:	3b02      	subs	r3, #2
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d826      	bhi.n	800affc <USBD_StdDevReq+0x200>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800afae:	2301      	movs	r3, #1
 800afb0:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800afb2:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800afb6:	b10b      	cbz	r3, 800afbc <USBD_StdDevReq+0x1c0>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800afb8:	2303      	movs	r3, #3
 800afba:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800afbc:	2202      	movs	r2, #2
 800afbe:	f104 010c 	add.w	r1, r4, #12
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 f8b1 	bl	800b12a <USBD_CtlSendData>
 800afc8:	e01c      	b.n	800b004 <USBD_StdDevReq+0x208>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afca:	884b      	ldrh	r3, [r1, #2]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d119      	bne.n	800b004 <USBD_StdDevReq+0x208>
 800afd0:	e008      	b.n	800afe4 <USBD_StdDevReq+0x1e8>
  switch (pdev->dev_state)
 800afd2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800afd6:	3b02      	subs	r3, #2
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d80f      	bhi.n	800affc <USBD_StdDevReq+0x200>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800afdc:	884b      	ldrh	r3, [r1, #2]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d110      	bne.n	800b004 <USBD_StdDevReq+0x208>
      pdev->dev_remote_wakeup = 0; 
 800afe2:	2300      	movs	r3, #0
 800afe4:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800afe8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800afec:	4629      	mov	r1, r5
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	4620      	mov	r0, r4
 800aff2:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800aff4:	4620      	mov	r0, r4
 800aff6:	f000 f8c4 	bl	800b182 <USBD_CtlSendStatus>
 800affa:	e003      	b.n	800b004 <USBD_StdDevReq+0x208>
    USBD_CtlError(pdev , req);
 800affc:	4629      	mov	r1, r5
 800affe:	4620      	mov	r0, r4
 800b000:	f7ff fef1 	bl	800ade6 <USBD_CtlError>
}
 800b004:	2000      	movs	r0, #0
 800b006:	b002      	add	sp, #8
 800b008:	bd70      	pop	{r4, r5, r6, pc}
 800b00a:	bf00      	nop
 800b00c:	20000c5c 	.word	0x20000c5c

0800b010 <USBD_StdItfReq>:
{
 800b010:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800b012:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b016:	2b03      	cmp	r3, #3
{
 800b018:	4604      	mov	r4, r0
 800b01a:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800b01c:	d10c      	bne.n	800b038 <USBD_StdItfReq+0x28>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800b01e:	790b      	ldrb	r3, [r1, #4]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d809      	bhi.n	800b038 <USBD_StdItfReq+0x28>
      pdev->pClass->Setup (pdev, req); 
 800b024:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800b02c:	88eb      	ldrh	r3, [r5, #6]
 800b02e:	b92b      	cbnz	r3, 800b03c <USBD_StdItfReq+0x2c>
         USBD_CtlSendStatus(pdev);
 800b030:	4620      	mov	r0, r4
 800b032:	f000 f8a6 	bl	800b182 <USBD_CtlSendStatus>
 800b036:	e001      	b.n	800b03c <USBD_StdItfReq+0x2c>
     USBD_CtlError(pdev , req);
 800b038:	f7ff fed5 	bl	800ade6 <USBD_CtlError>
}
 800b03c:	2000      	movs	r0, #0
 800b03e:	bd38      	pop	{r3, r4, r5, pc}

0800b040 <USBD_StdEPReq>:
{
 800b040:	b570      	push	{r4, r5, r6, lr}
  switch (req->bRequest) 
 800b042:	784e      	ldrb	r6, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);   
 800b044:	888a      	ldrh	r2, [r1, #4]
  switch (req->bRequest) 
 800b046:	2e01      	cmp	r6, #1
{
 800b048:	4604      	mov	r4, r0
 800b04a:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800b04c:	b2d3      	uxtb	r3, r2
  switch (req->bRequest) 
 800b04e:	d010      	beq.n	800b072 <USBD_StdEPReq+0x32>
 800b050:	d326      	bcc.n	800b0a0 <USBD_StdEPReq+0x60>
 800b052:	2e03      	cmp	r6, #3
 800b054:	d14b      	bne.n	800b0ee <USBD_StdEPReq+0xae>
    switch (pdev->dev_state) 
 800b056:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b05a:	2a02      	cmp	r2, #2
 800b05c:	d027      	beq.n	800b0ae <USBD_StdEPReq+0x6e>
 800b05e:	2a03      	cmp	r2, #3
 800b060:	d143      	bne.n	800b0ea <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800b062:	884a      	ldrh	r2, [r1, #2]
 800b064:	b992      	cbnz	r2, 800b08c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800b066:	065e      	lsls	r6, r3, #25
 800b068:	d010      	beq.n	800b08c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800b06a:	4619      	mov	r1, r3
 800b06c:	f000 fa88 	bl	800b580 <USBD_LL_StallEP>
 800b070:	e00c      	b.n	800b08c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800b072:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b076:	2a02      	cmp	r2, #2
 800b078:	d019      	beq.n	800b0ae <USBD_StdEPReq+0x6e>
 800b07a:	2a03      	cmp	r2, #3
 800b07c:	d135      	bne.n	800b0ea <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800b07e:	884a      	ldrh	r2, [r1, #2]
 800b080:	bbaa      	cbnz	r2, 800b0ee <USBD_StdEPReq+0xae>
        if ((ep_addr & 0x7F) != 0x00) 
 800b082:	0659      	lsls	r1, r3, #25
 800b084:	d008      	beq.n	800b098 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800b086:	4619      	mov	r1, r3
 800b088:	f000 fa81 	bl	800b58e <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800b08c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b090:	4629      	mov	r1, r5
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	4620      	mov	r0, r4
 800b096:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800b098:	4620      	mov	r0, r4
 800b09a:	f000 f872 	bl	800b182 <USBD_CtlSendStatus>
 800b09e:	e026      	b.n	800b0ee <USBD_StdEPReq+0xae>
    switch (pdev->dev_state) 
 800b0a0:	f890 51fc 	ldrb.w	r5, [r0, #508]	; 0x1fc
 800b0a4:	2d02      	cmp	r5, #2
 800b0a6:	d002      	beq.n	800b0ae <USBD_StdEPReq+0x6e>
 800b0a8:	2d03      	cmp	r5, #3
 800b0aa:	d006      	beq.n	800b0ba <USBD_StdEPReq+0x7a>
 800b0ac:	e01d      	b.n	800b0ea <USBD_StdEPReq+0xaa>
      if ((ep_addr & 0x7F) != 0x00) 
 800b0ae:	065a      	lsls	r2, r3, #25
 800b0b0:	d01d      	beq.n	800b0ee <USBD_StdEPReq+0xae>
        USBD_LL_StallEP(pdev , ep_addr);
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	f000 fa64 	bl	800b580 <USBD_LL_StallEP>
 800b0b8:	e019      	b.n	800b0ee <USBD_StdEPReq+0xae>
 800b0ba:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800b0be:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b0c2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800b0c6:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800b0c8:	bf14      	ite	ne
 800b0ca:	3514      	addne	r5, #20
 800b0cc:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800b0d0:	f000 fa64 	bl	800b59c <USBD_LL_IsStallEP>
 800b0d4:	b110      	cbz	r0, 800b0dc <USBD_StdEPReq+0x9c>
        pep->status = 0x0001;     
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	602b      	str	r3, [r5, #0]
 800b0da:	e000      	b.n	800b0de <USBD_StdEPReq+0x9e>
        pep->status = 0x0000;  
 800b0dc:	6028      	str	r0, [r5, #0]
      USBD_CtlSendData (pdev,
 800b0de:	2202      	movs	r2, #2
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f000 f821 	bl	800b12a <USBD_CtlSendData>
      break;
 800b0e8:	e001      	b.n	800b0ee <USBD_StdEPReq+0xae>
      USBD_CtlError(pdev , req);
 800b0ea:	f7ff fe7c 	bl	800ade6 <USBD_CtlError>
}
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	bd70      	pop	{r4, r5, r6, pc}

0800b0f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0f2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800b0f4:	b1c0      	cbz	r0, 800b128 <USBD_GetString+0x36>
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800b0fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2c00      	cmp	r4, #0
 800b102:	d1f9      	bne.n	800b0f8 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800b104:	005b      	lsls	r3, r3, #1
 800b106:	3302      	adds	r3, #2
 800b108:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800b10a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800b10c:	2303      	movs	r3, #3
 800b10e:	704b      	strb	r3, [r1, #1]
 800b110:	3801      	subs	r0, #1
 800b112:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800b114:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b118:	b135      	cbz	r5, 800b128 <USBD_GetString+0x36>
      unicode[idx++] = *desc++;
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	b2d2      	uxtb	r2, r2
 800b11e:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 800b120:	3302      	adds	r3, #2
 800b122:	b2db      	uxtb	r3, r3
 800b124:	548c      	strb	r4, [r1, r2]
 800b126:	e7f5      	b.n	800b114 <USBD_GetString+0x22>
 800b128:	bd30      	pop	{r4, r5, pc}

0800b12a <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800b12a:	b510      	push	{r4, lr}
 800b12c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800b12e:	2202      	movs	r2, #2
 800b130:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800b134:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800b136:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800b138:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800b13a:	2100      	movs	r1, #0
 800b13c:	f000 fa48 	bl	800b5d0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b140:	2000      	movs	r0, #0
 800b142:	bd10      	pop	{r4, pc}

0800b144 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800b144:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800b146:	4613      	mov	r3, r2
 800b148:	460a      	mov	r2, r1
 800b14a:	2100      	movs	r1, #0
 800b14c:	f000 fa40 	bl	800b5d0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b150:	2000      	movs	r0, #0
 800b152:	bd08      	pop	{r3, pc}

0800b154 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800b154:	b510      	push	{r4, lr}
 800b156:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800b158:	2203      	movs	r2, #3
 800b15a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800b15e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800b162:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800b164:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800b168:	2100      	movs	r1, #0
 800b16a:	f000 fa38 	bl	800b5de <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800b16e:	2000      	movs	r0, #0
 800b170:	bd10      	pop	{r4, pc}

0800b172 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800b172:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800b174:	4613      	mov	r3, r2
 800b176:	460a      	mov	r2, r1
 800b178:	2100      	movs	r1, #0
 800b17a:	f000 fa30 	bl	800b5de <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800b17e:	2000      	movs	r0, #0
 800b180:	bd08      	pop	{r3, pc}

0800b182 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800b182:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b184:	2304      	movs	r3, #4
 800b186:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800b18a:	2300      	movs	r3, #0
 800b18c:	461a      	mov	r2, r3
 800b18e:	4619      	mov	r1, r3
 800b190:	f000 fa1e 	bl	800b5d0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b194:	2000      	movs	r0, #0
 800b196:	bd08      	pop	{r3, pc}

0800b198 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800b198:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800b19a:	2305      	movs	r3, #5
 800b19c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	f000 fa1a 	bl	800b5de <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	bd08      	pop	{r3, pc}

0800b1ae <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b1ae:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800b1b2:	b11b      	cbz	r3, 800b1bc <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800b1ba:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800b1bc:	2002      	movs	r0, #2
  }
}
 800b1be:	4770      	bx	lr

0800b1c0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b1c0:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800b1c4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b1c6:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b1ca:	b15b      	cbz	r3, 800b1e4 <USBD_CDC_EP0_RxReady+0x24>
 800b1cc:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800b1d0:	28ff      	cmp	r0, #255	; 0xff
 800b1d2:	d007      	beq.n	800b1e4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800b1da:	4621      	mov	r1, r4
 800b1dc:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800b1de:	23ff      	movs	r3, #255	; 0xff
 800b1e0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	bd10      	pop	{r4, pc}

0800b1e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b1e8:	2343      	movs	r3, #67	; 0x43
 800b1ea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800b1ec:	4800      	ldr	r0, [pc, #0]	; (800b1f0 <USBD_CDC_GetFSCfgDesc+0x8>)
 800b1ee:	4770      	bx	lr
 800b1f0:	200008dc 	.word	0x200008dc

0800b1f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b1f4:	2343      	movs	r3, #67	; 0x43
 800b1f6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800b1f8:	4800      	ldr	r0, [pc, #0]	; (800b1fc <USBD_CDC_GetHSCfgDesc+0x8>)
 800b1fa:	4770      	bx	lr
 800b1fc:	200009a8 	.word	0x200009a8

0800b200 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b200:	2343      	movs	r3, #67	; 0x43
 800b202:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800b204:	4800      	ldr	r0, [pc, #0]	; (800b208 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800b206:	4770      	bx	lr
 800b208:	20000964 	.word	0x20000964

0800b20c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b20c:	230a      	movs	r3, #10
 800b20e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800b210:	4800      	ldr	r0, [pc, #0]	; (800b214 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800b212:	4770      	bx	lr
 800b214:	20000958 	.word	0x20000958

0800b218 <USBD_CDC_DataOut>:
{      
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b21c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b220:	f000 f9e4 	bl	800b5ec <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800b224:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b228:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800b22c:	b14b      	cbz	r3, 800b242 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b22e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800b232:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800b23c:	4798      	blx	r3
    return USBD_OK;
 800b23e:	2000      	movs	r0, #0
 800b240:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800b242:	2002      	movs	r0, #2
}
 800b244:	bd38      	pop	{r3, r4, r5, pc}

0800b246 <USBD_CDC_Setup>:
{
 800b246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b248:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b24a:	7809      	ldrb	r1, [r1, #0]
 800b24c:	f001 0360 	and.w	r3, r1, #96	; 0x60
 800b250:	2b20      	cmp	r3, #32
{
 800b252:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b254:	d122      	bne.n	800b29c <USBD_CDC_Setup+0x56>
    if (req->wLength)
 800b256:	88e2      	ldrh	r2, [r4, #6]
 800b258:	7863      	ldrb	r3, [r4, #1]
 800b25a:	b1ca      	cbz	r2, 800b290 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 800b25c:	0609      	lsls	r1, r1, #24
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b25e:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800b262:	d50b      	bpl.n	800b27c <USBD_CDC_Setup+0x36>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b264:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800b268:	4618      	mov	r0, r3
 800b26a:	688f      	ldr	r7, [r1, #8]
 800b26c:	4629      	mov	r1, r5
 800b26e:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 800b270:	88e2      	ldrh	r2, [r4, #6]
 800b272:	4629      	mov	r1, r5
 800b274:	4630      	mov	r0, r6
 800b276:	f7ff ff58 	bl	800b12a <USBD_CtlSendData>
 800b27a:	e00f      	b.n	800b29c <USBD_CDC_Setup+0x56>
        hcdc->CmdOpCode = req->bRequest;
 800b27c:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800b280:	88e3      	ldrh	r3, [r4, #6]
 800b282:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800b286:	88e2      	ldrh	r2, [r4, #6]
 800b288:	4629      	mov	r1, r5
 800b28a:	f7ff ff63 	bl	800b154 <USBD_CtlPrepareRx>
 800b28e:	e005      	b.n	800b29c <USBD_CDC_Setup+0x56>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b290:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800b294:	4618      	mov	r0, r3
 800b296:	688c      	ldr	r4, [r1, #8]
 800b298:	4611      	mov	r1, r2
 800b29a:	47a0      	blx	r4
}
 800b29c:	2000      	movs	r0, #0
 800b29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2a0 <USBD_CDC_DeInit>:
{
 800b2a0:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800b2a2:	2181      	movs	r1, #129	; 0x81
{
 800b2a4:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800b2a6:	f000 f964 	bl	800b572 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f000 f960 	bl	800b572 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800b2b2:	2182      	movs	r1, #130	; 0x82
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f000 f95c 	bl	800b572 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800b2ba:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800b2be:	b153      	cbz	r3, 800b2d6 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b2c0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b2c8:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800b2cc:	f000 f998 	bl	800b600 <USBD_static_free>
    pdev->pClassData = NULL;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	bd10      	pop	{r4, pc}

0800b2da <USBD_CDC_Init>:
{
 800b2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b2dc:	7c03      	ldrb	r3, [r0, #16]
{
 800b2de:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b2e0:	b943      	cbnz	r3, 800b2f4 <USBD_CDC_Init+0x1a>
    USBD_LL_OpenEP(pdev,
 800b2e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	2181      	movs	r1, #129	; 0x81
 800b2ea:	f000 f938 	bl	800b55e <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800b2ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2f2:	e005      	b.n	800b300 <USBD_CDC_Init+0x26>
    USBD_LL_OpenEP(pdev,
 800b2f4:	2340      	movs	r3, #64	; 0x40
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	2181      	movs	r1, #129	; 0x81
 800b2fa:	f000 f930 	bl	800b55e <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800b2fe:	2340      	movs	r3, #64	; 0x40
 800b300:	2202      	movs	r2, #2
 800b302:	2101      	movs	r1, #1
 800b304:	4620      	mov	r0, r4
 800b306:	f000 f92a 	bl	800b55e <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800b30a:	2308      	movs	r3, #8
 800b30c:	2203      	movs	r2, #3
 800b30e:	2182      	movs	r1, #130	; 0x82
 800b310:	4620      	mov	r0, r4
 800b312:	f000 f924 	bl	800b55e <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b316:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b31a:	f000 f96d 	bl	800b5f8 <USBD_static_malloc>
 800b31e:	4606      	mov	r6, r0
 800b320:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800b324:	b1e8      	cbz	r0, 800b362 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b326:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b32e:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800b330:	2500      	movs	r5, #0
 800b332:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 800b336:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b33a:	b94f      	cbnz	r7, 800b350 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800b33c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b340:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800b344:	2101      	movs	r1, #1
 800b346:	4620      	mov	r0, r4
 800b348:	f000 f949 	bl	800b5de <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800b34c:	4638      	mov	r0, r7
 800b34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBD_LL_PrepareReceive(pdev,
 800b350:	2340      	movs	r3, #64	; 0x40
 800b352:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800b356:	2101      	movs	r1, #1
 800b358:	4620      	mov	r0, r4
 800b35a:	f000 f940 	bl	800b5de <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800b35e:	4628      	mov	r0, r5
 800b360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 800b362:	2001      	movs	r0, #1
}
 800b364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b366 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800b366:	b119      	cbz	r1, 800b370 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800b368:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800b36c:	2000      	movs	r0, #0
 800b36e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800b370:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800b372:	4770      	bx	lr

0800b374 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b374:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 800b378:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800b37a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800b37e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800b382:	4770      	bx	lr

0800b384 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800b384:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800b388:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800b38a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800b38e:	4770      	bx	lr

0800b390 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800b390:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b392:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800b396:	b175      	cbz	r5, 800b3b6 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800b398:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800b39c:	b96c      	cbnz	r4, 800b3ba <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800b39e:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 800b3a2:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800b3a6:	2181      	movs	r1, #129	; 0x81
 800b3a8:	f000 f912 	bl	800b5d0 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800b3b6:	2002      	movs	r0, #2
 800b3b8:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
 800b3ba:	2001      	movs	r0, #1
  }
}
 800b3bc:	bd38      	pop	{r3, r4, r5, pc}

0800b3be <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b3be:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800b3c2:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800b3c4:	b162      	cbz	r2, 800b3e0 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b3c6:	7c04      	ldrb	r4, [r0, #16]
 800b3c8:	b914      	cbnz	r4, 800b3d0 <USBD_CDC_ReceivePacket+0x12>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b3ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3ce:	e000      	b.n	800b3d2 <USBD_CDC_ReceivePacket+0x14>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b3d0:	2340      	movs	r3, #64	; 0x40
 800b3d2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	f000 f901 	bl	800b5de <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b3dc:	2000      	movs	r0, #0
 800b3de:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 800b3e0:	2002      	movs	r0, #2
  }
}
 800b3e2:	bd10      	pop	{r4, pc}

0800b3e4 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800b3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 800b3e8:	4c24      	ldr	r4, [pc, #144]	; (800b47c <HAL_PCD_MspInit+0x98>)
 800b3ea:	6963      	ldr	r3, [r4, #20]
 800b3ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3f0:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800b3f2:	6963      	ldr	r3, [r4, #20]
{
 800b3f4:	b086      	sub	sp, #24
  __GPIOB_CLK_ENABLE();
 800b3f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b3fa:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800b3fc:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800b400:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b402:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b404:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b408:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b40a:	a901      	add	r1, sp, #4
 800b40c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800b410:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800b412:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b414:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b416:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b41a:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b41c:	f7fd fe92 	bl	8009144 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 800b420:	462a      	mov	r2, r5
 800b422:	4631      	mov	r1, r6
 800b424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b428:	f7fd ff58 	bl	80092dc <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800b42c:	2001      	movs	r0, #1
 800b42e:	f7fd fe13 	bl	8009058 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 800b432:	2201      	movs	r2, #1
 800b434:	4631      	mov	r1, r6
 800b436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b43a:	f7fd ff4f 	bl	80092dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b43e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b440:	a901      	add	r1, sp, #4
 800b442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b446:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800b448:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b44a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b44c:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b450:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800b452:	f7fd fe77 	bl	8009144 <HAL_GPIO_Init>
  __USB_CLK_ENABLE();
 800b456:	69e3      	ldr	r3, [r4, #28]
 800b458:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b45c:	61e3      	str	r3, [r4, #28]
  __SYSCFG_CLK_ENABLE();
 800b45e:	69a3      	ldr	r3, [r4, #24]
 800b460:	f043 0301 	orr.w	r3, r3, #1
 800b464:	61a3      	str	r3, [r4, #24]
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800b466:	462a      	mov	r2, r5
 800b468:	2105      	movs	r1, #5
 800b46a:	2014      	movs	r0, #20
 800b46c:	f7fd fe14 	bl	8009098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 800b470:	2014      	movs	r0, #20
 800b472:	f7fd fe45 	bl	8009100 <HAL_NVIC_EnableIRQ>
}
 800b476:	b006      	add	sp, #24
 800b478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b47c:	40021000 	.word	0x40021000

0800b480 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800b480:	f500 71a2 	add.w	r1, r0, #324	; 0x144
 800b484:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b488:	f7ff bbc8 	b.w	800ac1c <USBD_LL_SetupStage>

0800b48c <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b48c:	231c      	movs	r3, #28
 800b48e:	fb03 0301 	mla	r3, r3, r1, r0
 800b492:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b496:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b49a:	f7ff bbec 	b.w	800ac76 <USBD_LL_DataOutStage>

0800b49e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b49e:	231c      	movs	r3, #28
 800b4a0:	fb03 0301 	mla	r3, r3, r1, r0
 800b4a4:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b4a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4aa:	f7ff bc15 	b.w	800acd8 <USBD_LL_DataInStage>

0800b4ae <HAL_PCD_SOFCallback>:
  USBD_LL_SOF(hpcd->pData);
 800b4ae:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b4b2:	f7ff bc78 	b.w	800ada6 <USBD_LL_SOF>

0800b4b6 <HAL_PCD_ResetCallback>:
{   
 800b4b6:	b510      	push	{r4, lr}
 800b4b8:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800b4ba:	2101      	movs	r1, #1
 800b4bc:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800b4c0:	f7ff fc6e 	bl	800ada0 <USBD_LL_SetSpeed>
  USBD_LL_Reset(hpcd->pData);
 800b4c4:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 800b4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset(hpcd->pData);
 800b4cc:	f7ff bc49 	b.w	800ad62 <USBD_LL_Reset>

0800b4d0 <HAL_PCD_SuspendCallback>:
 800b4d0:	4770      	bx	lr

0800b4d2 <HAL_PCD_ResumeCallback>:
 800b4d2:	4770      	bx	lr

0800b4d4 <USBD_LL_Init>:
{    
 800b4d4:	b538      	push	{r3, r4, r5, lr}
  hpcd.Init.dev_endpoints = 8;
 800b4d6:	4a1c      	ldr	r2, [pc, #112]	; (800b548 <USBD_LL_Init+0x74>)
{    
 800b4d8:	4605      	mov	r5, r0
  hpcd.Instance = USB;
 800b4da:	481c      	ldr	r0, [pc, #112]	; (800b54c <USBD_LL_Init+0x78>)
  pdev->pData = &hpcd;
 800b4dc:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
  hpcd.Init.dev_endpoints = 8;
 800b4e0:	2308      	movs	r3, #8
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800b4e2:	2400      	movs	r4, #0
  hpcd.Init.dev_endpoints = 8;
 800b4e4:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b4e8:	2302      	movs	r3, #2
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800b4ea:	60c4      	str	r4, [r0, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b4ec:	6103      	str	r3, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800b4ee:	6083      	str	r3, [r0, #8]
  hpcd.pData = pdev;
 800b4f0:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
  HAL_PCD_Init(pdev->pData);
 800b4f4:	f7fd fefb 	bl	80092ee <HAL_PCD_Init>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	2340      	movs	r3, #64	; 0x40
 800b4fe:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800b502:	f7fe fe04 	bl	800a10e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800b506:	2380      	movs	r3, #128	; 0x80
 800b508:	4622      	mov	r2, r4
 800b50a:	4619      	mov	r1, r3
 800b50c:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800b510:	f7fe fdfd 	bl	800a10e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 800b514:	4622      	mov	r2, r4
 800b516:	23c0      	movs	r3, #192	; 0xc0
 800b518:	2181      	movs	r1, #129	; 0x81
 800b51a:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800b51e:	f7fe fdf6 	bl	800a10e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 800b522:	4622      	mov	r2, r4
 800b524:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b528:	2101      	movs	r1, #1
 800b52a:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800b52e:	f7fe fdee 	bl	800a10e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 800b532:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b536:	4622      	mov	r2, r4
 800b538:	2182      	movs	r1, #130	; 0x82
 800b53a:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800b53e:	f7fe fde6 	bl	800a10e <HAL_PCDEx_PMAConfig>
}
 800b542:	4620      	mov	r0, r4
 800b544:	bd38      	pop	{r3, r4, r5, pc}
 800b546:	bf00      	nop
 800b548:	40005c00 	.word	0x40005c00
 800b54c:	200011f8 	.word	0x200011f8

0800b550 <USBD_LL_Start>:
{
 800b550:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800b552:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b556:	f7fd ff18 	bl	800938a <HAL_PCD_Start>
}
 800b55a:	2000      	movs	r0, #0
 800b55c:	bd08      	pop	{r3, pc}

0800b55e <USBD_LL_OpenEP>:
{
 800b55e:	b510      	push	{r4, lr}
 800b560:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 800b562:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b566:	4613      	mov	r3, r2
 800b568:	4622      	mov	r2, r4
 800b56a:	f7fd ff2a 	bl	80093c2 <HAL_PCD_EP_Open>
}
 800b56e:	2000      	movs	r0, #0
 800b570:	bd10      	pop	{r4, pc}

0800b572 <USBD_LL_CloseEP>:
{
 800b572:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b574:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b578:	f7fe f8be 	bl	80096f8 <HAL_PCD_EP_Close>
}
 800b57c:	2000      	movs	r0, #0
 800b57e:	bd08      	pop	{r3, pc}

0800b580 <USBD_LL_StallEP>:
{
 800b580:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b582:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b586:	f7fe fd10 	bl	8009faa <HAL_PCD_EP_SetStall>
}
 800b58a:	2000      	movs	r0, #0
 800b58c:	bd08      	pop	{r3, pc}

0800b58e <USBD_LL_ClearStallEP>:
{
 800b58e:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b590:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b594:	f7fe fd58 	bl	800a048 <HAL_PCD_EP_ClrStall>
}
 800b598:	2000      	movs	r0, #0
 800b59a:	bd08      	pop	{r3, pc}

0800b59c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800b59c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b5a0:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b5a4:	bf18      	it	ne
 800b5a6:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 800b5aa:	f04f 001c 	mov.w	r0, #28
 800b5ae:	bf15      	itete	ne
 800b5b0:	fb00 2103 	mlane	r1, r0, r3, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b5b4:	fb00 2101 	mlaeq	r1, r0, r1, r2
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b5b8:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b5bc:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
}
 800b5c0:	4770      	bx	lr

0800b5c2 <USBD_LL_SetUSBAddress>:
{
 800b5c2:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5c4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b5c8:	f7fd fee5 	bl	8009396 <HAL_PCD_SetAddress>
}
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	bd08      	pop	{r3, pc}

0800b5d0 <USBD_LL_Transmit>:
{
 800b5d0:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b5d2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b5d6:	f7fe f9eb 	bl	80099b0 <HAL_PCD_EP_Transmit>
}
 800b5da:	2000      	movs	r0, #0
 800b5dc:	bd08      	pop	{r3, pc}

0800b5de <USBD_LL_PrepareReceive>:
{
 800b5de:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b5e0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b5e4:	f7fe f95f 	bl	80098a6 <HAL_PCD_EP_Receive>
}
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	bd08      	pop	{r3, pc}

0800b5ec <USBD_LL_GetRxDataSize>:
{
 800b5ec:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800b5ee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b5f2:	f7fe f9d5 	bl	80099a0 <HAL_PCD_EP_GetRxCount>
}
 800b5f6:	bd08      	pop	{r3, pc}

0800b5f8 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 800b5f8:	4800      	ldr	r0, [pc, #0]	; (800b5fc <USBD_static_malloc+0x4>)
 800b5fa:	4770      	bx	lr
 800b5fc:	20000c60 	.word	0x20000c60

0800b600 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b600:	4770      	bx	lr
	...

0800b604 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 800b604:	2312      	movs	r3, #18
 800b606:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)hUSBDDeviceDesc;
}
 800b608:	4800      	ldr	r0, [pc, #0]	; (800b60c <USBD_VCP_DeviceDescriptor+0x8>)
 800b60a:	4770      	bx	lr
 800b60c:	0801bab5 	.word	0x0801bab5

0800b610 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800b610:	2304      	movs	r3, #4
 800b612:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 800b614:	4800      	ldr	r0, [pc, #0]	; (800b618 <USBD_VCP_LangIDStrDescriptor+0x8>)
 800b616:	4770      	bx	lr
 800b618:	0801ba64 	.word	0x0801ba64

0800b61c <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800b61c:	2300      	movs	r3, #0
{
 800b61e:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800b620:	461d      	mov	r5, r3
  for( idx = 0 ; idx < len ; idx ++)
 800b622:	b2dc      	uxtb	r4, r3
 800b624:	42a2      	cmp	r2, r4
 800b626:	d90c      	bls.n	800b642 <IntToUnicode+0x26>
    if( ((value >> 28)) < 0xA )
 800b628:	0f04      	lsrs	r4, r0, #28
 800b62a:	2c09      	cmp	r4, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 800b62c:	bf94      	ite	ls
 800b62e:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800b630:	3437      	addhi	r4, #55	; 0x37
 800b632:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800b636:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 800b63a:	0100      	lsls	r0, r0, #4
    pbuf[ 2* idx + 1] = 0;
 800b63c:	7065      	strb	r5, [r4, #1]
 800b63e:	3301      	adds	r3, #1
 800b640:	e7ef      	b.n	800b622 <IntToUnicode+0x6>
  }
}
 800b642:	bd30      	pop	{r4, r5, pc}

0800b644 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800b644:	231a      	movs	r3, #26
{
 800b646:	b510      	push	{r4, lr}
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 800b648:	4a09      	ldr	r2, [pc, #36]	; (800b670 <USBD_VCP_SerialStrDescriptor+0x2c>)
  *length = USB_SIZ_STRING_SERIAL;
 800b64a:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800b64c:	4b09      	ldr	r3, [pc, #36]	; (800b674 <USBD_VCP_SerialStrDescriptor+0x30>)
  deviceserial0 += deviceserial2;
 800b64e:	6810      	ldr	r0, [r2, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800b650:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800b652:	1818      	adds	r0, r3, r0
 800b654:	d00a      	beq.n	800b66c <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800b656:	4b08      	ldr	r3, [pc, #32]	; (800b678 <USBD_VCP_SerialStrDescriptor+0x34>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800b658:	4908      	ldr	r1, [pc, #32]	; (800b67c <USBD_VCP_SerialStrDescriptor+0x38>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800b65a:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800b65c:	2208      	movs	r2, #8
 800b65e:	f7ff ffdd 	bl	800b61c <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800b662:	2204      	movs	r2, #4
 800b664:	4906      	ldr	r1, [pc, #24]	; (800b680 <USBD_VCP_SerialStrDescriptor+0x3c>)
 800b666:	4620      	mov	r0, r4
 800b668:	f7ff ffd8 	bl	800b61c <IntToUnicode>
}
 800b66c:	4805      	ldr	r0, [pc, #20]	; (800b684 <USBD_VCP_SerialStrDescriptor+0x40>)
 800b66e:	bd10      	pop	{r4, pc}
 800b670:	1ffff7b4 	.word	0x1ffff7b4
 800b674:	1ffff7ac 	.word	0x1ffff7ac
 800b678:	1ffff7b0 	.word	0x1ffff7b0
 800b67c:	20000a0a 	.word	0x20000a0a
 800b680:	20000a1a 	.word	0x20000a1a
 800b684:	20000a08 	.word	0x20000a08

0800b688 <USBD_VCP_ProductStrDescriptor>:
{
 800b688:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800b68a:	4c04      	ldr	r4, [pc, #16]	; (800b69c <USBD_VCP_ProductStrDescriptor+0x14>)
 800b68c:	4804      	ldr	r0, [pc, #16]	; (800b6a0 <USBD_VCP_ProductStrDescriptor+0x18>)
 800b68e:	460a      	mov	r2, r1
 800b690:	4621      	mov	r1, r4
 800b692:	f7ff fd2e 	bl	800b0f2 <USBD_GetString>
}
 800b696:	4620      	mov	r0, r4
 800b698:	bd10      	pop	{r4, pc}
 800b69a:	bf00      	nop
 800b69c:	20001370 	.word	0x20001370
 800b6a0:	0801ba68 	.word	0x0801ba68

0800b6a4 <USBD_VCP_ManufacturerStrDescriptor>:
{
 800b6a4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b6a6:	4c04      	ldr	r4, [pc, #16]	; (800b6b8 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 800b6a8:	4804      	ldr	r0, [pc, #16]	; (800b6bc <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 800b6aa:	460a      	mov	r2, r1
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	f7ff fd20 	bl	800b0f2 <USBD_GetString>
}
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	bd10      	pop	{r4, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20001370 	.word	0x20001370
 800b6bc:	0801ba89 	.word	0x0801ba89

0800b6c0 <USBD_VCP_ConfigStrDescriptor>:
{
 800b6c0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800b6c2:	4c04      	ldr	r4, [pc, #16]	; (800b6d4 <USBD_VCP_ConfigStrDescriptor+0x14>)
 800b6c4:	4804      	ldr	r0, [pc, #16]	; (800b6d8 <USBD_VCP_ConfigStrDescriptor+0x18>)
 800b6c6:	460a      	mov	r2, r1
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	f7ff fd12 	bl	800b0f2 <USBD_GetString>
}
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	bd10      	pop	{r4, pc}
 800b6d2:	bf00      	nop
 800b6d4:	20001370 	.word	0x20001370
 800b6d8:	0801ba9c 	.word	0x0801ba9c

0800b6dc <USBD_VCP_InterfaceStrDescriptor>:
{
 800b6dc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800b6de:	4c04      	ldr	r4, [pc, #16]	; (800b6f0 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 800b6e0:	4804      	ldr	r0, [pc, #16]	; (800b6f4 <USBD_VCP_InterfaceStrDescriptor+0x18>)
 800b6e2:	460a      	mov	r2, r1
 800b6e4:	4621      	mov	r1, r4
 800b6e6:	f7ff fd04 	bl	800b0f2 <USBD_GetString>
}
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	bd10      	pop	{r4, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20001370 	.word	0x20001370
 800b6f4:	0801baa7 	.word	0x0801baa7

0800b6f8 <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	4770      	bx	lr

0800b6fc <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 800b6fc:	b508      	push	{r3, lr}
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800b6fe:	680a      	ldr	r2, [r1, #0]
 800b700:	4601      	mov	r1, r0
 800b702:	2000      	movs	r0, #0
 800b704:	f7fc fcce 	bl	80080a4 <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 800b708:	4802      	ldr	r0, [pc, #8]	; (800b714 <CDC_Itf_Receive+0x18>)
 800b70a:	f7ff fe58 	bl	800b3be <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800b70e:	2000      	movs	r0, #0
 800b710:	bd08      	pop	{r3, pc}
 800b712:	bf00      	nop
 800b714:	20000fd0 	.word	0x20000fd0

0800b718 <CDC_Itf_Init>:
{
 800b718:	b508      	push	{r3, lr}
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 800b71a:	4903      	ldr	r1, [pc, #12]	; (800b728 <CDC_Itf_Init+0x10>)
 800b71c:	4803      	ldr	r0, [pc, #12]	; (800b72c <CDC_Itf_Init+0x14>)
 800b71e:	f7ff fe31 	bl	800b384 <USBD_CDC_SetRxBuffer>
}
 800b722:	2000      	movs	r0, #0
 800b724:	bd08      	pop	{r3, pc}
 800b726:	bf00      	nop
 800b728:	200014e0 	.word	0x200014e0
 800b72c:	20000fd0 	.word	0x20000fd0

0800b730 <CDC_Itf_Control>:
  switch (cmd)
 800b730:	2820      	cmp	r0, #32
 800b732:	d012      	beq.n	800b75a <CDC_Itf_Control+0x2a>
 800b734:	2821      	cmp	r0, #33	; 0x21
 800b736:	d119      	bne.n	800b76c <CDC_Itf_Control+0x3c>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800b738:	4b0d      	ldr	r3, [pc, #52]	; (800b770 <CDC_Itf_Control+0x40>)
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	0a12      	lsrs	r2, r2, #8
 800b742:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800b744:	885a      	ldrh	r2, [r3, #2]
 800b746:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800b748:	78da      	ldrb	r2, [r3, #3]
 800b74a:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 800b74c:	791a      	ldrb	r2, [r3, #4]
 800b74e:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800b750:	795a      	ldrb	r2, [r3, #5]
 800b752:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 800b754:	799b      	ldrb	r3, [r3, #6]
 800b756:	718b      	strb	r3, [r1, #6]
    break;
 800b758:	e008      	b.n	800b76c <CDC_Itf_Control+0x3c>
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800b75a:	4b05      	ldr	r3, [pc, #20]	; (800b770 <CDC_Itf_Control+0x40>)
 800b75c:	680a      	ldr	r2, [r1, #0]
 800b75e:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 800b760:	790a      	ldrb	r2, [r1, #4]
 800b762:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 800b764:	794a      	ldrb	r2, [r1, #5]
 800b766:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 800b768:	798a      	ldrb	r2, [r1, #6]
 800b76a:	719a      	strb	r2, [r3, #6]
}
 800b76c:	2000      	movs	r0, #0
 800b76e:	4770      	bx	lr
 800b770:	20000a24 	.word	0x20000a24

0800b774 <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 800b774:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800b776:	4c1c      	ldr	r4, [pc, #112]	; (800b7e8 <SPIx_Init+0x74>)
{
 800b778:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800b77a:	4620      	mov	r0, r4
 800b77c:	f7ff fa18 	bl	800abb0 <HAL_SPI_GetState>
 800b780:	2800      	cmp	r0, #0
 800b782:	d12e      	bne.n	800b7e2 <SPIx_Init+0x6e>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800b784:	4b19      	ldr	r3, [pc, #100]	; (800b7ec <SPIx_Init+0x78>)
 800b786:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b788:	2318      	movs	r3, #24
 800b78a:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 800b78c:	2307      	movs	r3, #7
 800b78e:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800b790:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800b794:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800b796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b79a:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800b79c:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b7a0:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800b7a2:	4b13      	ldr	r3, [pc, #76]	; (800b7f0 <SPIx_Init+0x7c>)
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800b7a4:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b7a6:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b7a8:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800b7aa:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b7ac:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800b7ae:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 800b7b0:	699a      	ldr	r2, [r3, #24]
 800b7b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b7b6:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800b7b8:	695a      	ldr	r2, [r3, #20]
 800b7ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b7be:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800b7c0:	23e0      	movs	r3, #224	; 0xe0
 800b7c2:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b7c8:	2303      	movs	r3, #3
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 800b7ca:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b7cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800b7ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800b7d2:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800b7d4:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800b7d6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800b7d8:	f7fd fcb4 	bl	8009144 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f7ff f838 	bl	800a852 <HAL_SPI_Init>
}
 800b7e2:	b006      	add	sp, #24
 800b7e4:	bd10      	pop	{r4, pc}
 800b7e6:	bf00      	nop
 800b7e8:	20000e90 	.word	0x20000e90
 800b7ec:	40013000 	.word	0x40013000
 800b7f0:	40021000 	.word	0x40021000

0800b7f4 <SPIx_WriteRead>:
{
 800b7f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 800b7f6:	aa06      	add	r2, sp, #24
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800b7fe:	4b0b      	ldr	r3, [pc, #44]	; (800b82c <SPIx_WriteRead+0x38>)
{
 800b800:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	f10d 010f 	add.w	r1, sp, #15
 800b80c:	2301      	movs	r3, #1
 800b80e:	4808      	ldr	r0, [pc, #32]	; (800b830 <SPIx_WriteRead+0x3c>)
 800b810:	f7ff f88a 	bl	800a928 <HAL_SPI_TransmitReceive>
 800b814:	b120      	cbz	r0, 800b820 <SPIx_WriteRead+0x2c>
  HAL_SPI_DeInit(&SpiHandle);
 800b816:	4806      	ldr	r0, [pc, #24]	; (800b830 <SPIx_WriteRead+0x3c>)
 800b818:	f7ff f86f 	bl	800a8fa <HAL_SPI_DeInit>
  SPIx_Init();
 800b81c:	f7ff ffaa 	bl	800b774 <SPIx_Init>
}
 800b820:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800b824:	b007      	add	sp, #28
 800b826:	f85d fb04 	ldr.w	pc, [sp], #4
 800b82a:	bf00      	nop
 800b82c:	20000a3c 	.word	0x20000a3c
 800b830:	20000e90 	.word	0x20000e90

0800b834 <I2Cx_Init>:
{
 800b834:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800b836:	4c16      	ldr	r4, [pc, #88]	; (800b890 <I2Cx_Init+0x5c>)
{
 800b838:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7fe ff74 	bl	800a728 <HAL_I2C_GetState>
 800b840:	bb18      	cbnz	r0, 800b88a <I2Cx_Init+0x56>
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800b842:	4b14      	ldr	r3, [pc, #80]	; (800b894 <I2Cx_Init+0x60>)
 800b844:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 800b846:	2332      	movs	r3, #50	; 0x32
 800b848:	60a3      	str	r3, [r4, #8]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800b84a:	4d13      	ldr	r5, [pc, #76]	; (800b898 <I2Cx_Init+0x64>)
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800b84c:	6120      	str	r0, [r4, #16]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b84e:	2301      	movs	r3, #1
    I2cHandle.Init.OwnAddress2 = 0;
 800b850:	6160      	str	r0, [r4, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800b852:	61e0      	str	r0, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800b854:	6220      	str	r0, [r4, #32]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b856:	60e3      	str	r3, [r4, #12]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800b858:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800b85a:	4810      	ldr	r0, [pc, #64]	; (800b89c <I2Cx_Init+0x68>)
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800b85c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b860:	616b      	str	r3, [r5, #20]
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 800b862:	23c0      	movs	r3, #192	; 0xc0
 800b864:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800b866:	2302      	movs	r3, #2
 800b868:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800b86a:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b86c:	2303      	movs	r3, #3
 800b86e:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800b870:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800b872:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800b876:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800b878:	f7fd fc64 	bl	8009144 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800b87c:	69eb      	ldr	r3, [r5, #28]
 800b87e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b882:	61eb      	str	r3, [r5, #28]
    HAL_I2C_Init(&I2cHandle);
 800b884:	4620      	mov	r0, r4
 800b886:	f7fe fdc1 	bl	800a40c <HAL_I2C_Init>
}
 800b88a:	b007      	add	sp, #28
 800b88c:	bd30      	pop	{r4, r5, pc}
 800b88e:	bf00      	nop
 800b890:	20000ef0 	.word	0x20000ef0
 800b894:	40005400 	.word	0x40005400
 800b898:	40021000 	.word	0x40021000
 800b89c:	48000400 	.word	0x48000400

0800b8a0 <BSP_LED_Init>:
{
 800b8a0:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800b8a2:	4604      	mov	r4, r0
{
 800b8a4:	b086      	sub	sp, #24
  LEDx_GPIO_CLK_ENABLE(Led);
 800b8a6:	b168      	cbz	r0, 800b8c4 <BSP_LED_Init+0x24>
 800b8a8:	2801      	cmp	r0, #1
 800b8aa:	d00b      	beq.n	800b8c4 <BSP_LED_Init+0x24>
 800b8ac:	2802      	cmp	r0, #2
 800b8ae:	d009      	beq.n	800b8c4 <BSP_LED_Init+0x24>
 800b8b0:	2803      	cmp	r0, #3
 800b8b2:	d007      	beq.n	800b8c4 <BSP_LED_Init+0x24>
 800b8b4:	2804      	cmp	r0, #4
 800b8b6:	d005      	beq.n	800b8c4 <BSP_LED_Init+0x24>
 800b8b8:	2805      	cmp	r0, #5
 800b8ba:	d003      	beq.n	800b8c4 <BSP_LED_Init+0x24>
 800b8bc:	2806      	cmp	r0, #6
 800b8be:	d001      	beq.n	800b8c4 <BSP_LED_Init+0x24>
 800b8c0:	2807      	cmp	r0, #7
 800b8c2:	d104      	bne.n	800b8ce <BSP_LED_Init+0x2e>
 800b8c4:	4a0d      	ldr	r2, [pc, #52]	; (800b8fc <BSP_LED_Init+0x5c>)
 800b8c6:	6953      	ldr	r3, [r2, #20]
 800b8c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8cc:	6153      	str	r3, [r2, #20]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b8ce:	4b0c      	ldr	r3, [pc, #48]	; (800b900 <BSP_LED_Init+0x60>)
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b8d0:	4d0c      	ldr	r5, [pc, #48]	; (800b904 <BSP_LED_Init+0x64>)
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b8d2:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b8d6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b8da:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b8e0:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b8e2:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b8e8:	f7fd fc2c 	bl	8009144 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	4631      	mov	r1, r6
 800b8f0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800b8f4:	f7fd fcf2 	bl	80092dc <HAL_GPIO_WritePin>
}
 800b8f8:	b006      	add	sp, #24
 800b8fa:	bd70      	pop	{r4, r5, r6, pc}
 800b8fc:	40021000 	.word	0x40021000
 800b900:	0801bac8 	.word	0x0801bac8
 800b904:	20000a48 	.word	0x20000a48

0800b908 <BSP_LED_On>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800b908:	4b04      	ldr	r3, [pc, #16]	; (800b91c <BSP_LED_On+0x14>)
 800b90a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800b90e:	4b04      	ldr	r3, [pc, #16]	; (800b920 <BSP_LED_On+0x18>)
 800b910:	2201      	movs	r2, #1
 800b912:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b916:	f7fd bce1 	b.w	80092dc <HAL_GPIO_WritePin>
 800b91a:	bf00      	nop
 800b91c:	0801bac8 	.word	0x0801bac8
 800b920:	20000a48 	.word	0x20000a48

0800b924 <BSP_LED_Off>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800b924:	4b04      	ldr	r3, [pc, #16]	; (800b938 <BSP_LED_Off+0x14>)
 800b926:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800b92a:	4b04      	ldr	r3, [pc, #16]	; (800b93c <BSP_LED_Off+0x18>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b932:	f7fd bcd3 	b.w	80092dc <HAL_GPIO_WritePin>
 800b936:	bf00      	nop
 800b938:	0801bac8 	.word	0x0801bac8
 800b93c:	20000a48 	.word	0x20000a48

0800b940 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800b940:	4b03      	ldr	r3, [pc, #12]	; (800b950 <BSP_LED_Toggle+0x10>)
 800b942:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800b946:	4b03      	ldr	r3, [pc, #12]	; (800b954 <BSP_LED_Toggle+0x14>)
 800b948:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b94c:	f7fd bccb 	b.w	80092e6 <HAL_GPIO_TogglePin>
 800b950:	0801bac8 	.word	0x0801bac8
 800b954:	20000a48 	.word	0x20000a48

0800b958 <BSP_PB_Init>:
{
 800b958:	b510      	push	{r4, lr}
 800b95a:	4b19      	ldr	r3, [pc, #100]	; (800b9c0 <BSP_PB_Init+0x68>)
 800b95c:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800b95e:	b918      	cbnz	r0, 800b968 <BSP_PB_Init+0x10>
 800b960:	695a      	ldr	r2, [r3, #20]
 800b962:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b966:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 800b968:	699a      	ldr	r2, [r3, #24]
 800b96a:	f042 0201 	orr.w	r2, r2, #1
 800b96e:	619a      	str	r2, [r3, #24]
  if (ButtonMode == BUTTON_MODE_GPIO)
 800b970:	b969      	cbnz	r1, 800b98e <BSP_PB_Init+0x36>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800b972:	2301      	movs	r3, #1
 800b974:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b976:	2302      	movs	r3, #2
 800b978:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b97a:	2303      	movs	r3, #3
 800b97c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b97e:	4b11      	ldr	r3, [pc, #68]	; (800b9c4 <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b980:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b982:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b986:	a901      	add	r1, sp, #4
 800b988:	f7fd fbdc 	bl	8009144 <HAL_GPIO_Init>
 800b98c:	e016      	b.n	800b9bc <BSP_PB_Init+0x64>
  if (ButtonMode == BUTTON_MODE_EXTI)
 800b98e:	2901      	cmp	r1, #1
 800b990:	d114      	bne.n	800b9bc <BSP_PB_Init+0x64>
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b992:	2303      	movs	r3, #3
 800b994:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 800b996:	4b0c      	ldr	r3, [pc, #48]	; (800b9c8 <BSP_PB_Init+0x70>)
 800b998:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b99a:	4b0a      	ldr	r3, [pc, #40]	; (800b9c4 <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800b99c:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b99e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9a2:	2400      	movs	r4, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b9a4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9a6:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b9a8:	f7fd fbcc 	bl	8009144 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800b9ac:	2006      	movs	r0, #6
 800b9ae:	4622      	mov	r2, r4
 800b9b0:	210f      	movs	r1, #15
 800b9b2:	f7fd fb71 	bl	8009098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800b9b6:	2006      	movs	r0, #6
 800b9b8:	f7fd fba2 	bl	8009100 <HAL_NVIC_EnableIRQ>
}
 800b9bc:	b006      	add	sp, #24
 800b9be:	bd10      	pop	{r4, pc}
 800b9c0:	40021000 	.word	0x40021000
 800b9c4:	20000a40 	.word	0x20000a40
 800b9c8:	10110000 	.word	0x10110000

0800b9cc <BSP_PB_GetState>:
{
 800b9cc:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800b9ce:	4b03      	ldr	r3, [pc, #12]	; (800b9dc <BSP_PB_GetState+0x10>)
 800b9d0:	2101      	movs	r1, #1
 800b9d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b9d6:	f7fd fc7b 	bl	80092d0 <HAL_GPIO_ReadPin>
}
 800b9da:	bd08      	pop	{r3, pc}
 800b9dc:	20000a40 	.word	0x20000a40

0800b9e0 <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800b9e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800b9e4:	4c16      	ldr	r4, [pc, #88]	; (800ba40 <GYRO_IO_Init+0x60>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800b9e6:	4d17      	ldr	r5, [pc, #92]	; (800ba44 <GYRO_IO_Init+0x64>)
  GYRO_CS_GPIO_CLK_ENABLE();  
 800b9e8:	6963      	ldr	r3, [r4, #20]
{
 800b9ea:	b087      	sub	sp, #28
  GYRO_CS_GPIO_CLK_ENABLE();  
 800b9ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9f0:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800b9f2:	2600      	movs	r6, #0
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800b9f4:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800b9f8:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b9fc:	2703      	movs	r7, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800b9fe:	a901      	add	r1, sp, #4
 800ba00:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800ba02:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800ba06:	f8cd 9008 	str.w	r9, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800ba0a:	9603      	str	r6, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800ba0c:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800ba0e:	f7fd fb99 	bl	8009144 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 800ba12:	464a      	mov	r2, r9
 800ba14:	4641      	mov	r1, r8
 800ba16:	4628      	mov	r0, r5
 800ba18:	f7fd fc60 	bl	80092dc <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800ba1c:	6963      	ldr	r3, [r4, #20]
 800ba1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba22:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800ba24:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800ba26:	2306      	movs	r3, #6
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800ba28:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800ba2a:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800ba2c:	9602      	str	r6, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800ba2e:	9704      	str	r7, [sp, #16]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800ba30:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800ba32:	f7fd fb87 	bl	8009144 <HAL_GPIO_Init>
  
  SPIx_Init();
 800ba36:	f7ff fe9d 	bl	800b774 <SPIx_Init>
}
 800ba3a:	b007      	add	sp, #28
 800ba3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba40:	40021000 	.word	0x40021000
 800ba44:	48001000 	.word	0x48001000

0800ba48 <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800ba48:	2a01      	cmp	r2, #1
{
 800ba4a:	b570      	push	{r4, r5, r6, lr}
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	4606      	mov	r6, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800ba50:	bf88      	it	hi
 800ba52:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800ba56:	480c      	ldr	r0, [pc, #48]	; (800ba88 <GYRO_IO_Write+0x40>)
{
 800ba58:	4614      	mov	r4, r2
  GYRO_CS_LOW();
 800ba5a:	2108      	movs	r1, #8
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f7fd fc3d 	bl	80092dc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800ba62:	4628      	mov	r0, r5
 800ba64:	f7ff fec6 	bl	800b7f4 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800ba68:	b134      	cbz	r4, 800ba78 <GYRO_IO_Write+0x30>
  {
    SPIx_WriteRead(*pBuffer);
 800ba6a:	f816 0b01 	ldrb.w	r0, [r6], #1
    NumByteToWrite--;
 800ba6e:	3c01      	subs	r4, #1
    SPIx_WriteRead(*pBuffer);
 800ba70:	f7ff fec0 	bl	800b7f4 <SPIx_WriteRead>
    NumByteToWrite--;
 800ba74:	b2a4      	uxth	r4, r4
 800ba76:	e7f7      	b.n	800ba68 <GYRO_IO_Write+0x20>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800ba78:	2201      	movs	r2, #1
 800ba7a:	2108      	movs	r1, #8
 800ba7c:	4802      	ldr	r0, [pc, #8]	; (800ba88 <GYRO_IO_Write+0x40>)
}
 800ba7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800ba82:	f7fd bc2b 	b.w	80092dc <HAL_GPIO_WritePin>
 800ba86:	bf00      	nop
 800ba88:	48001000 	.word	0x48001000

0800ba8c <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 800ba8c:	2a01      	cmp	r2, #1
{  
 800ba8e:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800ba90:	bf8c      	ite	hi
 800ba92:	f041 05c0 	orrhi.w	r5, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800ba96:	f041 0580 	orrls.w	r5, r1, #128	; 0x80
{  
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	4614      	mov	r4, r2
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800ba9e:	480c      	ldr	r0, [pc, #48]	; (800bad0 <GYRO_IO_Read+0x44>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	2108      	movs	r1, #8
 800baa4:	f7fd fc1a 	bl	80092dc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800baa8:	4628      	mov	r0, r5
 800baaa:	f7ff fea3 	bl	800b7f4 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800baae:	b13c      	cbz	r4, 800bac0 <GYRO_IO_Read+0x34>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800bab0:	2000      	movs	r0, #0
 800bab2:	f7ff fe9f 	bl	800b7f4 <SPIx_WriteRead>
    NumByteToRead--;
 800bab6:	3c01      	subs	r4, #1
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800bab8:	f806 0b01 	strb.w	r0, [r6], #1
    NumByteToRead--;
 800babc:	b2a4      	uxth	r4, r4
 800babe:	e7f6      	b.n	800baae <GYRO_IO_Read+0x22>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800bac0:	2201      	movs	r2, #1
 800bac2:	2108      	movs	r1, #8
 800bac4:	4802      	ldr	r0, [pc, #8]	; (800bad0 <GYRO_IO_Read+0x44>)
}  
 800bac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800baca:	f7fd bc07 	b.w	80092dc <HAL_GPIO_WritePin>
 800bace:	bf00      	nop
 800bad0:	48001000 	.word	0x48001000

0800bad4 <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800bad4:	4b16      	ldr	r3, [pc, #88]	; (800bb30 <COMPASSACCELERO_IO_Init+0x5c>)
 800bad6:	695a      	ldr	r2, [r3, #20]
{
 800bad8:	b570      	push	{r4, r5, r6, lr}
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800bada:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800bade:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bae0:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800bae2:	4d14      	ldr	r5, [pc, #80]	; (800bb34 <COMPASSACCELERO_IO_Init+0x60>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bae4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
{
 800bae8:	b086      	sub	sp, #24
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800baea:	615a      	str	r2, [r3, #20]
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800baec:	2304      	movs	r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800baee:	2400      	movs	r4, #0
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800baf0:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800baf4:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800baf6:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800baf8:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800bafa:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800bafc:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bafe:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800bb00:	f7fd fb20 	bl	8009144 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 800bb04:	4622      	mov	r2, r4
 800bb06:	4621      	mov	r1, r4
 800bb08:	2008      	movs	r0, #8
 800bb0a:	f7fd fac5 	bl	8009098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 800bb0e:	2008      	movs	r0, #8
 800bb10:	f7fd faf6 	bl	8009100 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800bb14:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bb16:	a901      	add	r1, sp, #4
 800bb18:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800bb1a:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800bb1c:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bb1e:	9604      	str	r6, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800bb20:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bb22:	f7fd fb0f 	bl	8009144 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800bb26:	f7ff fe85 	bl	800b834 <I2Cx_Init>
}
 800bb2a:	b006      	add	sp, #24
 800bb2c:	bd70      	pop	{r4, r5, r6, pc}
 800bb2e:	bf00      	nop
 800bb30:	40021000 	.word	0x40021000
 800bb34:	48001000 	.word	0x48001000

0800bb38 <COMPASSACCELERO_IO_ITConfig>:
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 800bb38:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bb3a:	4a0e      	ldr	r2, [pc, #56]	; (800bb74 <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bb3c:	480e      	ldr	r0, [pc, #56]	; (800bb78 <COMPASSACCELERO_IO_ITConfig+0x40>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bb3e:	6953      	ldr	r3, [r2, #20]
{
 800bb40:	b086      	sub	sp, #24
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800bb42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb46:	6153      	str	r3, [r2, #20]
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800bb48:	2330      	movs	r3, #48	; 0x30
 800bb4a:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800bb4c:	4b0b      	ldr	r3, [pc, #44]	; (800bb7c <COMPASSACCELERO_IO_ITConfig+0x44>)
 800bb4e:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800bb50:	2400      	movs	r4, #0
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bb52:	2303      	movs	r3, #3
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bb54:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800bb56:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800bb58:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800bb5a:	f7fd faf3 	bl	8009144 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 800bb5e:	4622      	mov	r2, r4
 800bb60:	4621      	mov	r1, r4
 800bb62:	200a      	movs	r0, #10
 800bb64:	f7fd fa98 	bl	8009098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 800bb68:	200a      	movs	r0, #10
 800bb6a:	f7fd fac9 	bl	8009100 <HAL_NVIC_EnableIRQ>
  
}
 800bb6e:	b006      	add	sp, #24
 800bb70:	bd10      	pop	{r4, pc}
 800bb72:	bf00      	nop
 800bb74:	40021000 	.word	0x40021000
 800bb78:	48001000 	.word	0x48001000
 800bb7c:	10110000 	.word	0x10110000

0800bb80 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800bb80:	b510      	push	{r4, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800bb86:	4b0a      	ldr	r3, [pc, #40]	; (800bbb0 <COMPASSACCELERO_IO_Write+0x30>)
 800bb88:	f804 2d01 	strb.w	r2, [r4, #-1]!
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	9302      	str	r3, [sp, #8]
 800bb90:	2301      	movs	r3, #1
 800bb92:	460a      	mov	r2, r1
 800bb94:	9301      	str	r3, [sp, #4]
 800bb96:	4601      	mov	r1, r0
 800bb98:	9400      	str	r4, [sp, #0]
 800bb9a:	4806      	ldr	r0, [pc, #24]	; (800bbb4 <COMPASSACCELERO_IO_Write+0x34>)
 800bb9c:	f7fe fc96 	bl	800a4cc <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800bba0:	b120      	cbz	r0, 800bbac <COMPASSACCELERO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800bba2:	4804      	ldr	r0, [pc, #16]	; (800bbb4 <COMPASSACCELERO_IO_Write+0x34>)
 800bba4:	f7fe fc7b 	bl	800a49e <HAL_I2C_DeInit>
  I2Cx_Init();
 800bba8:	f7ff fe44 	bl	800b834 <I2Cx_Init>
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 800bbac:	b006      	add	sp, #24
 800bbae:	bd10      	pop	{r4, pc}
 800bbb0:	20000a44 	.word	0x20000a44
 800bbb4:	20000ef0 	.word	0x20000ef0

0800bbb8 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800bbb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 800bbba:	aa06      	add	r2, sp, #24
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800bbc2:	4b0b      	ldr	r3, [pc, #44]	; (800bbf0 <COMPASSACCELERO_IO_Read+0x38>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	9302      	str	r3, [sp, #8]
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e88d 000c 	stmia.w	sp, {r2, r3}
 800bbce:	460a      	mov	r2, r1
 800bbd0:	4601      	mov	r1, r0
 800bbd2:	4808      	ldr	r0, [pc, #32]	; (800bbf4 <COMPASSACCELERO_IO_Read+0x3c>)
 800bbd4:	f7fe fd0e 	bl	800a5f4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800bbd8:	b120      	cbz	r0, 800bbe4 <COMPASSACCELERO_IO_Read+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800bbda:	4806      	ldr	r0, [pc, #24]	; (800bbf4 <COMPASSACCELERO_IO_Read+0x3c>)
 800bbdc:	f7fe fc5f 	bl	800a49e <HAL_I2C_DeInit>
  I2Cx_Init();
 800bbe0:	f7ff fe28 	bl	800b834 <I2Cx_Init>
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 800bbe4:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800bbe8:	b007      	add	sp, #28
 800bbea:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbee:	bf00      	nop
 800bbf0:	20000a44 	.word	0x20000a44
 800bbf4:	20000ef0 	.word	0x20000ef0

0800bbf8 <BSP_ACCELERO_Init>:
  * @brief  Set ACCELEROMETER Initialization.
  * @param  None
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{  
 800bbf8:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800bbfa:	4c09      	ldr	r4, [pc, #36]	; (800bc20 <BSP_ACCELERO_Init+0x28>)
 800bbfc:	6863      	ldr	r3, [r4, #4]
 800bbfe:	4798      	blx	r3
 800bc00:	2833      	cmp	r0, #51	; 0x33
 800bc02:	d10b      	bne.n	800bc1c <BSP_ACCELERO_Init+0x24>
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800bc04:	4d07      	ldr	r5, [pc, #28]	; (800bc24 <BSP_ACCELERO_Init+0x2c>)
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800bc06:	6823      	ldr	r3, [r4, #0]
    AccelerometerDrv = &Lsm303dlhcDrv;
 800bc08:	602c      	str	r4, [r5, #0]
    AccelerometerDrv->Init(ctrl);
 800bc0a:	f640 0047 	movw	r0, #2119	; 0x847
 800bc0e:	4798      	blx	r3
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);

  /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	2090      	movs	r0, #144	; 0x90
 800bc14:	6a1b      	ldr	r3, [r3, #32]
 800bc16:	4798      	blx	r3

    ret = ACCELERO_OK;
 800bc18:	2000      	movs	r0, #0
 800bc1a:	bd38      	pop	{r3, r4, r5, pc}
  }  
  else
  {
    ret = ACCELERO_ERROR;
 800bc1c:	2001      	movs	r0, #1
  }

  return ret;
}
 800bc1e:	bd38      	pop	{r3, r4, r5, pc}
 800bc20:	20000a68 	.word	0x20000a68
 800bc24:	20000f28 	.word	0x20000f28

0800bc28 <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 800bc28:	4b02      	ldr	r3, [pc, #8]	; (800bc34 <BSP_ACCELERO_GetXYZ+0xc>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc2e:	b103      	cbz	r3, 800bc32 <BSP_ACCELERO_GetXYZ+0xa>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800bc30:	4718      	bx	r3
 800bc32:	4770      	bx	lr
 800bc34:	20000f28 	.word	0x20000f28

0800bc38 <BSP_GYRO_Init>:
  * @brief  Set GYROSCOPE Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 800bc38:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800bc3a:	4c0e      	ldr	r4, [pc, #56]	; (800bc74 <BSP_GYRO_Init+0x3c>)
 800bc3c:	6863      	ldr	r3, [r4, #4]
 800bc3e:	4798      	blx	r3
 800bc40:	28d4      	cmp	r0, #212	; 0xd4
 800bc42:	4625      	mov	r5, r4
 800bc44:	d10f      	bne.n	800bc66 <BSP_GYRO_Init+0x2e>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800bc46:	4c0c      	ldr	r4, [pc, #48]	; (800bc78 <BSP_GYRO_Init+0x40>)
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 800bc48:	682b      	ldr	r3, [r5, #0]
    GyroscopeDrv = &L3gd20Drv;
 800bc4a:	6025      	str	r5, [r4, #0]
    GyroscopeDrv->Init(ctrl);
 800bc4c:	f241 003f 	movw	r0, #4159	; 0x103f
 800bc50:	4798      	blx	r3
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
	
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));		
	
    GyroscopeDrv->FilterConfig(ctrl) ;
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	2000      	movs	r0, #0
 800bc56:	6a1b      	ldr	r3, [r3, #32]
 800bc58:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800bc5a:	6823      	ldr	r3, [r4, #0]
 800bc5c:	2010      	movs	r0, #16
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc60:	4798      	blx	r3
	
    ret = GYRO_OK;
 800bc62:	2000      	movs	r0, #0
 800bc64:	bd38      	pop	{r3, r4, r5, pc}
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800bc66:	6863      	ldr	r3, [r4, #4]
 800bc68:	4798      	blx	r3
 800bc6a:	28d5      	cmp	r0, #213	; 0xd5
 800bc6c:	d0eb      	beq.n	800bc46 <BSP_GYRO_Init+0xe>
  }
  else
  {
    ret = GYRO_ERROR;
 800bc6e:	2001      	movs	r0, #1
  }
  
  return ret;
}
 800bc70:	bd38      	pop	{r3, r4, r5, pc}
 800bc72:	bf00      	nop
 800bc74:	20000a94 	.word	0x20000a94
 800bc78:	20000f2c 	.word	0x20000f2c

0800bc7c <BSP_GYRO_GetXYZ>:
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 800bc7c:	4b02      	ldr	r3, [pc, #8]	; (800bc88 <BSP_GYRO_GetXYZ+0xc>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc82:	b103      	cbz	r3, 800bc86 <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 800bc84:	4718      	bx	r3
 800bc86:	4770      	bx	lr
 800bc88:	20000f2c 	.word	0x20000f2c

0800bc8c <LSM303DLHC_AccInit>:
  * @brief    Set LSM303DLHC Initialization.
  * @param  InitStruct: init parameters
  * @retval   None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800bc90:	f7ff ff20 	bl	800bad4 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800bc94:	b2e2      	uxtb	r2, r4
 800bc96:	2120      	movs	r1, #32
 800bc98:	2032      	movs	r0, #50	; 0x32
 800bc9a:	f7ff ff71 	bl	800bb80 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2123      	movs	r1, #35	; 0x23
 800bca2:	2032      	movs	r0, #50	; 0x32
}
 800bca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800bca8:	f7ff bf6a 	b.w	800bb80 <COMPASSACCELERO_IO_Write>

0800bcac <LSM303DLHC_AccReadID>:
/**
  * @brief     Read LSM303DLHC ID.
  * @retval   ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800bcac:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800bcae:	f7ff ff11 	bl	800bad4 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800bcb2:	210f      	movs	r1, #15
 800bcb4:	2032      	movs	r0, #50	; 0x32

  return ctrl;
}
 800bcb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800bcba:	f7ff bf7d 	b.w	800bbb8 <COMPASSACCELERO_IO_Read>

0800bcbe <LSM303DLHC_AccRebootCmd>:
/**
  * @brief     Reboot memory content of LSM303DLHC
  * @retval   None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 800bcbe:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800bcc0:	2124      	movs	r1, #36	; 0x24
 800bcc2:	2032      	movs	r0, #50	; 0x32
 800bcc4:	f7ff ff78 	bl	800bbb8 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800bcc8:	f060 027f 	orn	r2, r0, #127	; 0x7f
 800bccc:	b2d2      	uxtb	r2, r2
 800bcce:	2124      	movs	r1, #36	; 0x24
 800bcd0:	2032      	movs	r0, #50	; 0x32
}
 800bcd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800bcd6:	f7ff bf53 	b.w	800bb80 <COMPASSACCELERO_IO_Write>

0800bcda <LSM303DLHC_AccFilterConfig>:
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 800bcda:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bcdc:	2121      	movs	r1, #33	; 0x21
{
 800bcde:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bce0:	2032      	movs	r0, #50	; 0x32
 800bce2:	f7ff ff69 	bl	800bbb8 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800bce6:	f000 020c 	and.w	r2, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800bcea:	4322      	orrs	r2, r4
 800bcec:	2121      	movs	r1, #33	; 0x21
 800bcee:	2032      	movs	r0, #50	; 0x32
}
 800bcf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800bcf4:	f7ff bf44 	b.w	800bb80 <COMPASSACCELERO_IO_Write>

0800bcf8 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 800bcf8:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bcfa:	2121      	movs	r1, #33	; 0x21
 {
 800bcfc:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bcfe:	2032      	movs	r0, #50	; 0x32
 800bd00:	f7ff ff5a 	bl	800bbb8 <COMPASSACCELERO_IO_Read>
                  
  tmpreg &= 0xF7;
 800bd04:	f000 02f7 	and.w	r2, r0, #247	; 0xf7

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800bd08:	4322      	orrs	r2, r4
 800bd0a:	2121      	movs	r1, #33	; 0x21
 800bd0c:	2032      	movs	r0, #50	; 0x32
}
 800bd0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800bd12:	f7ff bf35 	b.w	800bb80 <COMPASSACCELERO_IO_Write>

0800bd16 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800bd16:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800bd1a:	2123      	movs	r1, #35	; 0x23
{
 800bd1c:	4606      	mov	r6, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800bd1e:	2032      	movs	r0, #50	; 0x32
 800bd20:	f7ff ff4a 	bl	800bbb8 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800bd24:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800bd26:	4604      	mov	r4, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800bd28:	2032      	movs	r0, #50	; 0x32
 800bd2a:	f7ff ff45 	bl	800bbb8 <COMPASSACCELERO_IO_Read>

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800bd2e:	2128      	movs	r1, #40	; 0x28
 800bd30:	2032      	movs	r0, #50	; 0x32
 800bd32:	f7ff ff41 	bl	800bbb8 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800bd36:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800bd38:	fa4f fa80 	sxtb.w	sl, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800bd3c:	2032      	movs	r0, #50	; 0x32
 800bd3e:	f7ff ff3b 	bl	800bbb8 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800bd42:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800bd44:	fa4f f880 	sxtb.w	r8, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800bd48:	2032      	movs	r0, #50	; 0x32
 800bd4a:	f7ff ff35 	bl	800bbb8 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800bd4e:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800bd50:	b247      	sxtb	r7, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800bd52:	2032      	movs	r0, #50	; 0x32
 800bd54:	f7ff ff30 	bl	800bbb8 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800bd58:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800bd5a:	b245      	sxtb	r5, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800bd5c:	2032      	movs	r0, #50	; 0x32
 800bd5e:	f7ff ff2b 	bl	800bbb8 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800bd62:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800bd64:	fa4f f980 	sxtb.w	r9, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800bd68:	2032      	movs	r0, #50	; 0x32
 800bd6a:	f7ff ff25 	bl	800bbb8 <COMPASSACCELERO_IO_Read>
  
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800bd6e:	0663      	lsls	r3, r4, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800bd70:	b240      	sxtb	r0, r0
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800bd72:	d416      	bmi.n	800bda2 <LSM303DLHC_AccReadXYZ+0x8c>
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800bd74:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
 800bd78:	eb07 2505 	add.w	r5, r7, r5, lsl #8
 800bd7c:	f8ad 8000 	strh.w	r8, [sp]
 800bd80:	f8ad 5002 	strh.w	r5, [sp, #2]
 800bd84:	eb09 2000 	add.w	r0, r9, r0, lsl #8
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800bd88:	f004 0430 	and.w	r4, r4, #48	; 0x30
 800bd8c:	2c20      	cmp	r4, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800bd8e:	f8ad 0004 	strh.w	r0, [sp, #4]
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800bd92:	d011      	beq.n	800bdb8 <LSM303DLHC_AccReadXYZ+0xa2>
 800bd94:	2c30      	cmp	r4, #48	; 0x30
 800bd96:	d011      	beq.n	800bdbc <LSM303DLHC_AccReadXYZ+0xa6>
 800bd98:	2c10      	cmp	r4, #16
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800bd9a:	bf0c      	ite	eq
 800bd9c:	2302      	moveq	r3, #2
 800bd9e:	2301      	movne	r3, #1
 800bda0:	e00d      	b.n	800bdbe <LSM303DLHC_AccReadXYZ+0xa8>
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800bda2:	eb08 280a 	add.w	r8, r8, sl, lsl #8
 800bda6:	eb05 2507 	add.w	r5, r5, r7, lsl #8
 800bdaa:	f8ad 8000 	strh.w	r8, [sp]
 800bdae:	f8ad 5002 	strh.w	r5, [sp, #2]
 800bdb2:	eb00 2009 	add.w	r0, r0, r9, lsl #8
 800bdb6:	e7e7      	b.n	800bd88 <LSM303DLHC_AccReadXYZ+0x72>
    break;
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
    break;
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 800bdb8:	2304      	movs	r3, #4
    break;
 800bdba:	e000      	b.n	800bdbe <LSM303DLHC_AccReadXYZ+0xa8>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800bdbc:	230c      	movs	r3, #12
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800bdbe:	f8bd 2000 	ldrh.w	r2, [sp]
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	fb12 f203 	smulbb	r2, r2, r3
 800bdc8:	8032      	strh	r2, [r6, #0]
 800bdca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800bdce:	fb12 f203 	smulbb	r2, r2, r3
 800bdd2:	8072      	strh	r2, [r6, #2]
 800bdd4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800bdd8:	fb12 f303 	smulbb	r3, r2, r3
 800bddc:	80b3      	strh	r3, [r6, #4]
  }

}
 800bdde:	b002      	add	sp, #8
 800bde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bde4 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 800bde4:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bde6:	2121      	movs	r1, #33	; 0x21
 {
 800bde8:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800bdea:	2032      	movs	r0, #50	; 0x32
 800bdec:	f7ff fee4 	bl	800bbb8 <COMPASSACCELERO_IO_Read>

  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 800bdf0:	f000 02fb 	and.w	r2, r0, #251	; 0xfb

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800bdf4:	4322      	orrs	r2, r4
 800bdf6:	2121      	movs	r1, #33	; 0x21
 800bdf8:	2032      	movs	r0, #50	; 0x32
}
 800bdfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800bdfe:	f7ff bebf 	b.w	800bb80 <COMPASSACCELERO_IO_Write>

0800be02 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800be02:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800be04:	2122      	movs	r1, #34	; 0x22
{
 800be06:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800be08:	2032      	movs	r0, #50	; 0x32
 800be0a:	f7ff fed5 	bl	800bbb8 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800be0e:	ea40 0204 	orr.w	r2, r0, r4
 800be12:	b2d2      	uxtb	r2, r2
 800be14:	2122      	movs	r1, #34	; 0x22
 800be16:	2032      	movs	r0, #50	; 0x32
}
 800be18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800be1c:	f7ff beb0 	b.w	800bb80 <COMPASSACCELERO_IO_Write>

0800be20 <LSM303DLHC_AccClickITEnable>:
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800be20:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800be22:	2138      	movs	r1, #56	; 0x38
{  
 800be24:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800be26:	2032      	movs	r0, #50	; 0x32
 800be28:	f7ff fec6 	bl	800bbb8 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800be2c:	ea40 0204 	orr.w	r2, r0, r4
 800be30:	b2d2      	uxtb	r2, r2
 800be32:	2138      	movs	r1, #56	; 0x38
 800be34:	2032      	movs	r0, #50	; 0x32
 800be36:	f7ff fea3 	bl	800bb80 <COMPASSACCELERO_IO_Write>

  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800be3a:	220a      	movs	r2, #10
 800be3c:	213a      	movs	r1, #58	; 0x3a
 800be3e:	2032      	movs	r0, #50	; 0x32
 800be40:	f7ff fe9e 	bl	800bb80 <COMPASSACCELERO_IO_Write>

  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800be44:	2205      	movs	r2, #5
 800be46:	213b      	movs	r1, #59	; 0x3b
 800be48:	2032      	movs	r0, #50	; 0x32
 800be4a:	f7ff fe99 	bl	800bb80 <COMPASSACCELERO_IO_Write>

  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 800be4e:	2205      	movs	r2, #5
 800be50:	213c      	movs	r1, #60	; 0x3c
 800be52:	2032      	movs	r0, #50	; 0x32
 800be54:	f7ff fe94 	bl	800bb80 <COMPASSACCELERO_IO_Write>

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800be58:	2232      	movs	r2, #50	; 0x32
 800be5a:	213d      	movs	r1, #61	; 0x3d
 800be5c:	4610      	mov	r0, r2

}
 800be5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800be62:	f7ff be8d 	b.w	800bb80 <COMPASSACCELERO_IO_Write>

0800be66 <LSM303DLHC_AccZClickITConfig>:
  * @brief  click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800be66:	b508      	push	{r3, lr}
  /* configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800be68:	f7ff fe66 	bl	800bb38 <COMPASSACCELERO_IO_ITConfig>
  
  /* select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 800be6c:	2080      	movs	r0, #128	; 0x80
 800be6e:	f7ff ffc8 	bl	800be02 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 800be72:	2004      	movs	r0, #4
 800be74:	f7ff ffb6 	bl	800bde4 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800be78:	2010      	movs	r0, #16
  
}
 800be7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800be7e:	f7ff bfcf 	b.w	800be20 <LSM303DLHC_AccClickITEnable>

0800be82 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800be82:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 800be84:	ac02      	add	r4, sp, #8
  uint8_t ctrl = 0x00;
 800be86:	2300      	movs	r3, #0
{  
 800be88:	4605      	mov	r5, r0
  uint8_t ctrl = 0x00;
 800be8a:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800be8e:	f7ff fda7 	bl	800b9e0 <GYRO_IO_Init>
  ctrl = (uint8_t) InitStruct;
 800be92:	f804 5d01 	strb.w	r5, [r4, #-1]!
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800be96:	2201      	movs	r2, #1
 800be98:	4620      	mov	r0, r4
 800be9a:	2120      	movs	r1, #32
 800be9c:	f7ff fdd4 	bl	800ba48 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800bea0:	0a2d      	lsrs	r5, r5, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800bea2:	2201      	movs	r2, #1
 800bea4:	2123      	movs	r1, #35	; 0x23
 800bea6:	4620      	mov	r0, r4
  ctrl = (uint8_t) (InitStruct >> 8);
 800bea8:	f88d 5007 	strb.w	r5, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800beac:	f7ff fdcc 	bl	800ba48 <GYRO_IO_Write>
}
 800beb0:	b003      	add	sp, #12
 800beb2:	bd30      	pop	{r4, r5, pc}

0800beb4 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  Device ID address
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800beb4:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp;

  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 800beb6:	f7ff fd93 	bl	800b9e0 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800beba:	f10d 0007 	add.w	r0, sp, #7
 800bebe:	2201      	movs	r2, #1
 800bec0:	210f      	movs	r1, #15
 800bec2:	f7ff fde3 	bl	800ba8c <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
}
 800bec6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800beca:	b003      	add	sp, #12
 800becc:	f85d fb04 	ldr.w	pc, [sp], #4

0800bed0 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800bed0:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bed2:	2201      	movs	r2, #1
 800bed4:	f10d 0007 	add.w	r0, sp, #7
 800bed8:	2124      	movs	r1, #36	; 0x24
 800beda:	f7ff fdd7 	bl	800ba8c <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800bede:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bee2:	2201      	movs	r2, #1
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800bee4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bee8:	2124      	movs	r1, #36	; 0x24
 800beea:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800beee:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bef2:	f7ff fda9 	bl	800ba48 <GYRO_IO_Write>
}
 800bef6:	b003      	add	sp, #12
 800bef8:	f85d fb04 	ldr.w	pc, [sp], #4

0800befc <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800befc:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800befe:	2300      	movs	r3, #0
{
 800bf00:	4604      	mov	r4, r0
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800bf02:	2201      	movs	r2, #1
 800bf04:	f10d 0006 	add.w	r0, sp, #6
 800bf08:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800bf0a:	f88d 3006 	strb.w	r3, [sp, #6]
 800bf0e:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800bf12:	f7ff fdbb 	bl	800ba8c <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800bf16:	f10d 0007 	add.w	r0, sp, #7
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	2122      	movs	r1, #34	; 0x22
 800bf1e:	f7ff fdb5 	bl	800ba8c <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 800bf22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bf26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf2a:	f88d 3006 	strb.w	r3, [sp, #6]
  
  ctrl3 &= 0xDF;
  ctrl3 |= ((uint8_t) Int1Config);
 800bf2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bf32:	f023 0320 	bic.w	r3, r3, #32
 800bf36:	431c      	orrs	r4, r3
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800bf38:	f10d 0006 	add.w	r0, sp, #6
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	2130      	movs	r1, #48	; 0x30
  ctrl3 |= ((uint8_t) Int1Config);
 800bf40:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800bf44:	f7ff fd80 	bl	800ba48 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800bf48:	2201      	movs	r2, #1
 800bf4a:	2122      	movs	r1, #34	; 0x22
 800bf4c:	f10d 0007 	add.w	r0, sp, #7
 800bf50:	f7ff fd7a 	bl	800ba48 <GYRO_IO_Write>
}
 800bf54:	b002      	add	sp, #8
 800bf56:	bd10      	pop	{r4, pc}

0800bf58 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800bf58:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800bf5a:	2201      	movs	r2, #1
{  
 800bf5c:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800bf5e:	2122      	movs	r1, #34	; 0x22
 800bf60:	f10d 0007 	add.w	r0, sp, #7
 800bf64:	f7ff fd92 	bl	800ba8c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800bf68:	b924      	cbnz	r4, 800bf74 <L3GD20_EnableIT+0x1c>
  {
    tmpreg &= 0x7F;	
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800bf6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bf6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf72:	e007      	b.n	800bf84 <L3GD20_EnableIT+0x2c>
  }
  else if(IntSel == L3GD20_INT2)
 800bf74:	2c01      	cmp	r4, #1
 800bf76:	d107      	bne.n	800bf88 <L3GD20_EnableIT+0x30>
  {
    tmpreg &= 0xF7;
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800bf78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bf7c:	f023 0308 	bic.w	r3, r3, #8
 800bf80:	f043 0308 	orr.w	r3, r3, #8
 800bf84:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800bf88:	2201      	movs	r2, #1
 800bf8a:	2122      	movs	r1, #34	; 0x22
 800bf8c:	f10d 0007 	add.w	r0, sp, #7
 800bf90:	f7ff fd5a 	bl	800ba48 <GYRO_IO_Write>
}
 800bf94:	b002      	add	sp, #8
 800bf96:	bd10      	pop	{r4, pc}

0800bf98 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800bf98:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800bf9a:	2201      	movs	r2, #1
{  
 800bf9c:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800bf9e:	2122      	movs	r1, #34	; 0x22
 800bfa0:	f10d 0007 	add.w	r0, sp, #7
 800bfa4:	f7ff fd72 	bl	800ba8c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800bfa8:	b924      	cbnz	r4, 800bfb4 <L3GD20_DisableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 800bfaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bfae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfb2:	e005      	b.n	800bfc0 <L3GD20_DisableIT+0x28>
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
 800bfb4:	2c01      	cmp	r4, #1
 800bfb6:	d105      	bne.n	800bfc4 <L3GD20_DisableIT+0x2c>
  {
    tmpreg &= 0xF7;
 800bfb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bfbc:	f023 0308 	bic.w	r3, r3, #8
 800bfc0:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	2122      	movs	r1, #34	; 0x22
 800bfc8:	f10d 0007 	add.w	r0, sp, #7
 800bfcc:	f7ff fd3c 	bl	800ba48 <GYRO_IO_Write>
}
 800bfd0:	b002      	add	sp, #8
 800bfd2:	bd10      	pop	{r4, pc}

0800bfd4 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800bfd4:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800bfd6:	2201      	movs	r2, #1
{
 800bfd8:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800bfda:	2121      	movs	r1, #33	; 0x21
 800bfdc:	f10d 0007 	add.w	r0, sp, #7
 800bfe0:	f7ff fd54 	bl	800ba8c <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= FilterStruct;
 800bfe4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800bfe8:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800bfec:	4320      	orrs	r0, r4
 800bfee:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Write value to MEMS CTRL_REG2 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800bff2:	2201      	movs	r2, #1
 800bff4:	2121      	movs	r1, #33	; 0x21
 800bff6:	f10d 0007 	add.w	r0, sp, #7
 800bffa:	f7ff fd25 	bl	800ba48 <GYRO_IO_Write>
}
 800bffe:	b002      	add	sp, #8
 800c000:	bd10      	pop	{r4, pc}

0800c002 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800c002:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c004:	2201      	movs	r2, #1
{
 800c006:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c008:	2124      	movs	r1, #36	; 0x24
 800c00a:	f10d 0007 	add.w	r0, sp, #7
 800c00e:	f7ff fd3d 	bl	800ba8c <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
  
  tmpreg |= HighPassFilterState;
 800c012:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c016:	f020 0010 	bic.w	r0, r0, #16
 800c01a:	4320      	orrs	r0, r4
 800c01c:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c020:	2201      	movs	r2, #1
 800c022:	2124      	movs	r1, #36	; 0x24
 800c024:	f10d 0007 	add.w	r0, sp, #7
 800c028:	f7ff fd0e 	bl	800ba48 <GYRO_IO_Write>
}
 800c02c:	b002      	add	sp, #8
 800c02e:	bd10      	pop	{r4, pc}

0800c030 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
 800c030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c032:	b087      	sub	sp, #28
 800c034:	4604      	mov	r4, r0
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 800c036:	a806      	add	r0, sp, #24
  uint8_t tmpbuffer[6] ={0};
 800c038:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
 800c03a:	ad04      	add	r5, sp, #16
  uint8_t tmpreg = 0;
 800c03c:	f800 3d11 	strb.w	r3, [r0, #-17]!
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c040:	2201      	movs	r2, #1
 800c042:	2123      	movs	r1, #35	; 0x23
  uint8_t tmpbuffer[6] ={0};
 800c044:	9302      	str	r3, [sp, #8]
 800c046:	f8ad 300c 	strh.w	r3, [sp, #12]
  int16_t RawData[3] = {0};
 800c04a:	9304      	str	r3, [sp, #16]
 800c04c:	80ab      	strh	r3, [r5, #4]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c04e:	f7ff fd1d 	bl	800ba8c <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800c052:	2206      	movs	r2, #6
 800c054:	2128      	movs	r1, #40	; 0x28
 800c056:	a802      	add	r0, sp, #8
 800c058:	f7ff fd18 	bl	800ba8c <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800c05c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c060:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800c064:	f89d e008 	ldrb.w	lr, [sp, #8]
 800c068:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800c06c:	f89d 600a 	ldrb.w	r6, [sp, #10]
 800c070:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800c074:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800c078:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c07c:	d11a      	bne.n	800c0b4 <L3GD20_ReadXYZAngRate+0x84>
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800c07e:	eb0e 2707 	add.w	r7, lr, r7, lsl #8
 800c082:	eb06 2000 	add.w	r0, r6, r0, lsl #8
 800c086:	f8ad 7010 	strh.w	r7, [sp, #16]
 800c08a:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c08e:	eb01 2202 	add.w	r2, r1, r2, lsl #8
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800c092:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c096:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800c098:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800c09c:	d015      	beq.n	800c0ca <L3GD20_ReadXYZAngRate+0x9a>
 800c09e:	2b20      	cmp	r3, #32
 800c0a0:	d016      	beq.n	800c0d0 <L3GD20_ReadXYZAngRate+0xa0>
  float sensitivity = 0;
 800c0a2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800c0f8 <L3GD20_ReadXYZAngRate+0xc8>
 800c0a6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c0fc <L3GD20_ReadXYZAngRate+0xcc>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	bf08      	it	eq
 800c0ae:	eeb0 7a67 	vmoveq.f32	s14, s15
 800c0b2:	e00f      	b.n	800c0d4 <L3GD20_ReadXYZAngRate+0xa4>
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800c0b4:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800c0b8:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 800c0bc:	f8ad 7010 	strh.w	r7, [sp, #16]
 800c0c0:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c0c4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800c0c8:	e7e3      	b.n	800c092 <L3GD20_ReadXYZAngRate+0x62>
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
    break;
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800c0ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800c100 <L3GD20_ReadXYZAngRate+0xd0>
    break;
 800c0ce:	e001      	b.n	800c0d4 <L3GD20_ReadXYZAngRate+0xa4>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800c0d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c104 <L3GD20_ReadXYZAngRate+0xd4>
 800c0d4:	4620      	mov	r0, r4
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 800c0d6:	2300      	movs	r3, #0
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800c0d8:	f935 2013 	ldrsh.w	r2, [r5, r3, lsl #1]
 800c0dc:	ee07 2a90 	vmov	s15, r2
 800c0e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for(i=0; i<3; i++)
 800c0e4:	3301      	adds	r3, #1
    pfData[i]=(float)(RawData[i] * sensitivity);
 800c0e6:	ee67 7a87 	vmul.f32	s15, s15, s14
  for(i=0; i<3; i++)
 800c0ea:	2b03      	cmp	r3, #3
    pfData[i]=(float)(RawData[i] * sensitivity);
 800c0ec:	ece0 7a01 	vstmia	r0!, {s15}
  for(i=0; i<3; i++)
 800c0f0:	d1f2      	bne.n	800c0d8 <L3GD20_ReadXYZAngRate+0xa8>
  }
}
 800c0f2:	b007      	add	sp, #28
 800c0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	00000000 	.word	0x00000000
 800c0fc:	410c0000 	.word	0x410c0000
 800c100:	418c0000 	.word	0x418c0000
 800c104:	428c0000 	.word	0x428c0000

0800c108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c108:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c140 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c10c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c10e:	e003      	b.n	800c118 <LoopCopyDataInit>

0800c110 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800c110:	4b0c      	ldr	r3, [pc, #48]	; (800c144 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800c112:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800c114:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800c116:	3104      	adds	r1, #4

0800c118 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800c118:	480b      	ldr	r0, [pc, #44]	; (800c148 <LoopForever+0xa>)
	ldr	r3, =_edata
 800c11a:	4b0c      	ldr	r3, [pc, #48]	; (800c14c <LoopForever+0xe>)
	adds	r2, r0, r1
 800c11c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800c11e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800c120:	d3f6      	bcc.n	800c110 <CopyDataInit>
	ldr	r2, =_sbss
 800c122:	4a0b      	ldr	r2, [pc, #44]	; (800c150 <LoopForever+0x12>)
	b	LoopFillZerobss
 800c124:	e002      	b.n	800c12c <LoopFillZerobss>

0800c126 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800c126:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800c128:	f842 3b04 	str.w	r3, [r2], #4

0800c12c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800c12c:	4b09      	ldr	r3, [pc, #36]	; (800c154 <LoopForever+0x16>)
	cmp	r2, r3
 800c12e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800c130:	d3f9      	bcc.n	800c126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c132:	f7fc fa89 	bl	8008648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c136:	f7f4 f8d1 	bl	80002dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c13a:	f7fb fa9d 	bl	8007678 <main>

0800c13e <LoopForever>:

LoopForever:
    b LoopForever
 800c13e:	e7fe      	b.n	800c13e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c140:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 800c144:	0801bb54 	.word	0x0801bb54
	ldr	r0, =_sdata
 800c148:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800c14c:	20000ac0 	.word	0x20000ac0
	ldr	r2, =_sbss
 800c150:	20000ac0 	.word	0x20000ac0
	ldr	r3, = _ebss
 800c154:	20001d1c 	.word	0x20001d1c

0800c158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c158:	e7fe      	b.n	800c158 <ADC1_2_IRQHandler>
	...

0800c15c <register_fini>:
 800c15c:	4b02      	ldr	r3, [pc, #8]	; (800c168 <register_fini+0xc>)
 800c15e:	b113      	cbz	r3, 800c166 <register_fini+0xa>
 800c160:	4802      	ldr	r0, [pc, #8]	; (800c16c <register_fini+0x10>)
 800c162:	f7f4 b89b 	b.w	800029c <atexit>
 800c166:	4770      	bx	lr
 800c168:	00000000 	.word	0x00000000
 800c16c:	080002b5 	.word	0x080002b5

0800c170 <_init>:
 800c170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c172:	bf00      	nop
 800c174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c176:	bc08      	pop	{r3}
 800c178:	469e      	mov	lr, r3
 800c17a:	4770      	bx	lr

0800c17c <_fini>:
 800c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17e:	bf00      	nop
 800c180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c182:	bc08      	pop	{r3}
 800c184:	469e      	mov	lr, r3
 800c186:	4770      	bx	lr
